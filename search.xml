<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VIM 之快捷键</title>
      <link href="/article/vim-shortcuts/"/>
      <url>/article/vim-shortcuts/</url>
      
        <content type="html"><![CDATA[<h1 id="VIM-之快捷键"><a href="#VIM-之快捷键" class="headerlink" title="VIM 之快捷键"></a>VIM 之快捷键</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">. <span class="token comment"># 重复上一次命令</span>jj / ESC <span class="token comment"># 回到 normal 模式 </span><span class="token directive important">% </span><span class="token comment"># 在括号间跳转</span>hjkl  <span class="token comment"># 光标`左下上右`移动</span>HJKL  <span class="token comment"># 光标`左下上右`快速移动（需配置）</span>M <span class="token comment"># 将光标移到屏幕的中央</span>z + z <span class="token comment"># 将当前行置于屏幕中央</span>z + t <span class="token comment"># 将当前行置于屏幕顶部</span>z + b <span class="token comment"># 将当前行置于屏幕底部</span>g + g <span class="token comment"># 调到文件首部</span>G     <span class="token comment"># 调到文件尾部</span>行数 + j <span class="token comment"># 向下移动指定行数</span>行数 + k <span class="token comment"># 向下移动指定行数</span>行数 + g + g <span class="token comment"># 调到指定行</span>行数 + G <span class="token comment"># 调到指定行</span>Ctrl + u <span class="token comment"># 向上滚动半屏</span>Ctrl + d <span class="token comment"># 向下滚动半屏</span>Ctrl + f <span class="token comment"># 向下滚动一屏</span>Ctrl + b <span class="token comment"># 向上滚动一屏</span>Ctrl + d <span class="token comment"># 向下滚动半屏</span>Ctrl + u <span class="token comment"># 向上滚动半屏</span>Ctrl + e <span class="token comment"># 向下滚动一行（光标不会移动）</span>Ctrl + y <span class="token comment"># 向上滚动一行（光标不会移动）</span>Ctrl + i <span class="token comment"># 向后跳转</span>Ctrl + o <span class="token comment"># 向前跳转</span>g + d <span class="token comment"># 跳转到变量/函数定义</span>g + h <span class="token comment"># 查看变量/函数说明</span>Shift + <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 上/下一个代码块</span>Command + <span class="token punctuation">[</span><span class="token punctuation">]</span> / &lt;&lt;<span class="token punctuation">,</span> <span class="token punctuation">></span><span class="token punctuation">></span>  <span class="token comment"># 添加/减少缩进</span>w <span class="token comment"># 移动到下一个单词的开头</span>b <span class="token comment"># 移动到上一个单词的开头</span>e <span class="token comment"># 移动到下一个单词的结尾</span>g + e <span class="token comment"># 移动到上一个单词的结尾</span>f <span class="token comment"># 向后查找字符，';'跳到下一个, ',' 跳到上一个</span>F <span class="token comment"># 向前查找字符，';'跳到下一个, ',' 跳到上一个</span>t <span class="token comment"># 向后查找字符(在字符前)，';'跳到下一个, ',' 跳到上一个</span>T <span class="token comment"># 向前查找字符(在字符前)，';'跳到下一个, ',' 跳到上一个</span>/ <span class="token comment"># 向前查找</span>？ <span class="token comment"># 向后查找</span>n <span class="token comment"># 下一个</span>N <span class="token comment"># 上一个</span>W <span class="token comment"># 移动到下一个字符串的开头</span>B <span class="token comment"># 移动到上一个字符串的开头</span>E <span class="token comment"># 移动到下一个字符串的结尾</span>G + E <span class="token comment"># 移动到上一个字符串的结尾</span>0 <span class="token comment"># 移动到行首</span>^ <span class="token comment"># 移动到本行第一个不是 blank 字符的位置</span>$ <span class="token comment"># 移动到行尾</span>g + _ <span class="token comment"># 移动到本行最后一个不是 blank 字符的位置</span>A <span class="token comment"># 行末添加，并转为 insert 模式</span>I <span class="token comment"># 行首添加，并转为 insert 模式</span>o <span class="token comment"># 下一行插入，并转为 insert 模式</span>O <span class="token comment"># 上一行插入，并转为 insert 模式</span>x <span class="token comment"># 删除光标所在的字符</span>X <span class="token comment"># 删除光标前的字符</span>s <span class="token comment"># 删除当前光标的字符并进入insert模式</span>S <span class="token comment"># 删除当前光标所在行并进入insert模式</span>cc <span class="token comment"># 删除当前行，并转为 insert 模式</span>c^ <span class="token comment"># 删除当前光标到行首（不包括当前），并转为 insert 模式</span>c$ <span class="token comment"># 删除当前光标到行尾（包括当前），并转为 insert 模式</span>ci( <span class="token comment"># 清空括号里的内容</span>dd <span class="token comment"># 删除当前行</span>d^ <span class="token comment"># 删除当前光标到行首（不包括当前）</span>d$ <span class="token comment"># 删除当前光标到行尾（包括当前)</span>r <span class="token comment"># 替换一个字符</span>R <span class="token comment"># 替换多个字符</span>yy <span class="token comment"># 复制当前行</span>p  <span class="token comment"># 粘贴</span>u / Ctrl + r <span class="token comment"># 撤销上一个操作</span>shift + ~ <span class="token comment"># 大小写切换</span>gcc <span class="token comment"># 行注释</span>gCC <span class="token comment"># 块注释</span>v + e <span class="token comment"># 选中当前单词</span>o     <span class="token comment"># 切换可视区的光标位置</span>g + v <span class="token comment"># 回到上一次选择的选择区域</span>Ctrl + v <span class="token comment"># 选中多行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/index/"/>
      <url>/article/index/</url>
      
        <content type="html"><![CDATA[<ul><li><p>简单地把这些物体丢弃会给MOT带来不可逆转的错误，包括大量的漏检和轨迹中断</p></li><li><p>将高分框和低分框分开处理，利用低分检测框和跟踪轨迹之间的相似性，从低分框中挖掘出真正的物体，过滤掉背景</p></li><li><p>根据 trackers 的 <strong>状态</strong>，区分（新的）休眠、（正常的）激活，不论高分和低分检测框，都是<strong>优先和（正常的）激活的 tracker 关联</strong></p></li><li><p>优先关联激活状态的（正常的）trackers ?</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/index/"/>
      <url>/article/index/</url>
      
        <content type="html"><![CDATA[<h3 id="构建指令"><a href="#构建指令" class="headerlink" title="构建指令"></a>构建指令</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cmake ..&#x2F;opencv \  -D CMAKE_BUILD_TYPE&#x3D;Release \  -D CMAKE_C_COMPILER&#x3D;&#x2F;opt&#x2F;rh&#x2F;devtoolset-7&#x2F;root&#x2F;bin&#x2F;gcc \  -D CMAKE_CXX_COMPILER&#x3D;&#x2F;opt&#x2F;rh&#x2F;devtoolset-7&#x2F;root&#x2F;bin&#x2F;g++ \  -D OPENCV_EXTRA_MODULES_PATH&#x3D;..&#x2F;opencv_contrib&#x2F;modules \  -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local \  -D BUILD_TESTS&#x3D;OFF \  -D BUILD_PERF_TESTS&#x3D;OFF \  -D BUILD_opencv_python_bindings_generator&#x3D;OFF \  -D BUILD_opencv_python_tests&#x3D;OFF \  -D BUILD_JAVA&#x3D;OFF \  -D BUILD_opencv_apps&#x3D;OFF \  -D BUILD_opencv_highgui&#x3D;OFF \  -D BUILD_opencv_objdetect&#x3D;OFF \  -D BUILD_opencv_dnn&#x3D;OFF \  -D BUILD_opencv_ml&#x3D;OFF \  -D WITH_IPP&#x3D;OFF \  -D WITH_OPENCL&#x3D;OFF \  -D WITH_VTK&#x3D;OFF \  -D WITH_PROTOBUF&#x3D;OFF \  -D WITH_CUDA&#x3D;ON \  -D WITH_FREETYPE&#x3D;ON \  -D OPENCV_ENABLE_NONFREE&#x3D;ON make -j64 # 一只卡住换 -j1make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>name</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>ANT_EXECUTABLE</td><td>ANT_EXECUTABLE-NOTFOUND</td><td>ant 是java的构建工具，类似于c&#x2F;c++的make</td></tr><tr><td>Atlas_BLAS_LIBRARY</td><td>Atlas_BLAS_LIBRARY-NOTFOUND</td><td>Fortran实现的矩阵计算库</td></tr><tr><td>Atlas_CBLAS_INCLUDE_DIR</td><td>depends</td><td></td></tr><tr><td>Atlas_CBLAS_LIBRARY</td><td>depends</td><td>C实现的BLAS</td></tr><tr><td>Atlas_CLAPACK_INCLUDED</td><td>depends</td><td></td></tr><tr><td>Atlas_LAPACK_LIBRARY</td><td>depends</td><td>该库的运行效率比BLAS库高</td></tr><tr><td>BUILD_CUDA_STUBS</td><td>OFF</td><td></td></tr><tr><td>BUILD_DOCS</td><td>OFF</td><td></td></tr><tr><td>BUILD_EXAMPLES</td><td>OFF</td><td></td></tr><tr><td>BUILD_IPP_IW</td><td>ON</td><td>编译Intel IPP集成包装</td></tr><tr><td>BUILD_ITT</td><td>ON</td><td>代码性能检测用，比如游戏开发中关键性能数据收集，因为ITT API 有开销，不需要的可以关闭</td></tr><tr><td>BUILD_JASPER</td><td>ON</td><td>OpenJPEG 的优先级高于已弃用的 JasPer。 要使用 JasPer，必须禁用 OpenJPEG</td></tr><tr><td>BUILD_JAVA</td><td>ON</td><td>启用对 Java 包装器的构建。必须安装 Java SDK 和 Ant</td></tr><tr><td>BUILD_JPEG</td><td>ON</td><td></td></tr><tr><td>BUILD_LIST</td><td></td><td>可以自定义要编译的模块，比如 core</td></tr><tr><td>BUILD_OPENEXR</td><td>OFF</td><td>HDR 图像编解码支持</td></tr><tr><td>BUILD_OPENJPEG</td><td>ON</td><td></td></tr><tr><td>BUILD_PACKAGE</td><td>ON</td><td></td></tr><tr><td>BUILD_PERF_TESTS</td><td>ON</td><td></td></tr><tr><td>BUILD_PNG</td><td>ON</td><td></td></tr><tr><td>BUILD_PROTOBUF</td><td>ON</td><td>构建自己的 protobuf 库副本。如果要使用外部库则必须禁用此选项。好像是用于DNN</td></tr><tr><td>BUILD_SHARED_LIBS</td><td>ON</td><td></td></tr><tr><td>BUILD_TBB</td><td>OFF</td><td><a href="https://en.wikipedia.org/wiki/Threading_Building_Blocks">Threading Building Blocks</a> 是一个用于并行编程的跨平台库， OpenCV 可以从 GitHub 下载和构建 TBB 库，可以使用 <code>BUILD_TBB</code> 选项启用此功能</td></tr><tr><td>BUILD_TESTS</td><td>ON</td><td></td></tr><tr><td>BUILD_TIFF</td><td>ON</td><td></td></tr><tr><td>BUILD_USE_SYMLINKS</td><td>ON</td><td></td></tr><tr><td>BUILD_WEBP</td><td>OFF</td><td></td></tr><tr><td>BUILD_WITH_DEBUG_INFO</td><td>OFF</td><td></td></tr><tr><td>BUILD_WITH_DYNAMIC_IPP</td><td>ON</td><td></td></tr><tr><td>BUILD_ZLIB</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_apps</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_calib3d</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_core</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_dnn</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_features2d</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_flann</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_gapi</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_highgui</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_imgcodecs</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_imgproc</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_java_bindings_generator</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_js</td><td>OFF</td><td></td></tr><tr><td>BUILD_opencv_is_bindings_generator</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_ml</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_objc_bindings_generator</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_objdetect</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_photo</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_python_bindings_generator</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_python_tests</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_stitching</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_ts</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_video</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_videoio</td><td>ON</td><td></td></tr><tr><td>BUILD_opencv_world</td><td>OFF</td><td></td></tr><tr><td>CCACHE_PROGRAM</td><td>CCACHE_PROGRAM-NOTFOUND</td><td></td></tr><tr><td>CLAMDBLAS_INCLUDE_DIR</td><td>CLAMDBLAS_INCLUDE_DIR-NOTFOUND</td><td></td></tr><tr><td>CLAMDBLAS_ROOT_DIR</td><td>CLAMDBLAS_ROOT_DIR-NOTFOUND</td><td></td></tr><tr><td>CLAMDFFT_INCLUDE_DIR</td><td>CLAMDFFT_INCLUDE_DIR-NOTFOUND</td><td></td></tr><tr><td>CLAMDFFT_ROOT_DIR</td><td>CLAMDFFT_ROOT_DIR-NOTFOUND</td><td></td></tr><tr><td>CMAKE_BUILD_TYPE</td><td>Release</td><td></td></tr><tr><td>CMAKE_CONFIGURATION_TYPES</td><td>Debug;Release</td><td></td></tr><tr><td>CMAKE_INSTALL_PREFIX</td><td>&#x2F;usr&#x2F;local</td><td></td></tr><tr><td>CMAKE_OSX_ARCHITECTURES</td><td></td><td></td></tr><tr><td>CMAKE_OSX_DEPLOYMENT_TARGET</td><td></td><td></td></tr><tr><td>CMAKE_OSX_SYSROOT</td><td>&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;SDKs&#x2F;MacOSX13.1.sdk</td><td></td></tr><tr><td>CPU_BASELINE</td><td>DETECT</td><td></td></tr><tr><td>CPU_DISPATCH</td><td></td><td></td></tr><tr><td>CV_DISABLE_OPTIMIZATION</td><td></td><td></td></tr><tr><td>CV_ENABLE_INTRINSICS</td><td>ON</td><td></td></tr><tr><td>CV_TRACE</td><td>ON</td><td></td></tr><tr><td>DC1394_INCLUDE</td><td>DC1394_INCLUDE-NOTFOUND</td><td></td></tr><tr><td>DC1394_LIBRARY</td><td>DC1394_LIBRARY-NOTFOUND</td><td></td></tr><tr><td>EIGEN_INCLUDE_PATH</td><td>EIGEN_INCLUDE_PATH-NOTFOUND</td><td></td></tr><tr><td>ENABLE_BUILD_HARDENING</td><td>OFF</td><td></td></tr><tr><td>ENABLE_CCACHE</td><td>ON</td><td></td></tr><tr><td>ENABLE_CONFIG_VERIFICATION</td><td>OFF</td><td></td></tr><tr><td>ENABLE_FAST_MATH</td><td>OFF</td><td></td></tr><tr><td>ENABLE_FLAKE8</td><td>OFF</td><td></td></tr><tr><td>ENABLE_IMPLCOLLECTION</td><td>OFF</td><td></td></tr><tr><td>ENABLE_INSTRUMENTATION</td><td>OFF</td><td></td></tr><tr><td>ENABLE_LIBJPEG_TURBO_SIMD</td><td>ON</td><td></td></tr><tr><td>ENABLE_NOISY_WARNINGS</td><td>OFF</td><td></td></tr><tr><td>ENABLE_PIC</td><td>ON</td><td></td></tr><tr><td>ENABLE_PRECOMPILED_HEADERS</td><td>OFF</td><td></td></tr><tr><td>ENABLE_PYLINT</td><td>OFF</td><td></td></tr><tr><td>ENABLE_SOLUTION_FOLDERS</td><td>OFF</td><td></td></tr><tr><td>ENABLE_THIN_LTO</td><td>OFF</td><td></td></tr><tr><td>EXECUTABLE_OUTPUT_PATH</td><td>absolute_build_dir&#x2F;bin</td><td></td></tr><tr><td>Eigen3_DIR</td><td>Eigen3_DIR-NOTFOUND</td><td></td></tr><tr><td>GENERATE_ABI_DESCRIPTOR</td><td>OFF</td><td></td></tr><tr><td>INSTALL_CREATE_DISTRIB</td><td>OFF</td><td></td></tr><tr><td>INSTALL_C_EXAMPLES</td><td>OFF</td><td></td></tr><tr><td>INSTALL_PYTHON_EXAMPLES</td><td>OFF</td><td></td></tr><tr><td>INSTALL_TESTS</td><td>OFF</td><td></td></tr><tr><td>INSTALL_TO_MANGLED_PATHS</td><td>OFF</td><td></td></tr><tr><td>lmath_DIR</td><td>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;cmake&#x2F;lmath</td><td></td></tr><tr><td>LAPACKE_INCLUDE_DIR</td><td></td><td></td></tr><tr><td>LAPACK_CBLAS_H</td><td>Accelerate&#x2F;Accelerate.h</td><td></td></tr><tr><td>LAPACK_IMPL</td><td>LAPACK&#x2F;Apple</td><td>我这里是mac</td></tr><tr><td>LAPACK_INCLUDE_DIR</td><td></td><td></td></tr><tr><td>LAPACK_LAPACKE_H</td><td>Accelerate&#x2F;Accelerate.h</td><td></td></tr><tr><td>LAPACK_LIBRARIES</td><td></td><td></td></tr><tr><td>MKL_LAPACKE_INCLUDE_DIR</td><td>MKL_LAPACKE_INCLUDE_DIR-NOTFOUND</td><td></td></tr><tr><td>MKL_ROOT_DIR</td><td>MKL_ROOT_DIR-NOTFOUND</td><td></td></tr><tr><td>MKL_USE_SINGLE_DYNAMIC_LIBRARY</td><td>OFF</td><td></td></tr><tr><td>MKL_WITH_OPENMP</td><td>OFF</td><td></td></tr><tr><td>MKL_WITH_TBB</td><td>OFF</td><td></td></tr><tr><td>MLIBRARY</td><td></td><td></td></tr><tr><td>OPENCL_FOUND</td><td>ON</td><td></td></tr><tr><td>OPENCV_CONFIG_FILE_INCLUDE_DIR</td><td>absolute_build_dir</td><td></td></tr><tr><td>OPENCV_DISABLE_FILESYSTEM_SUPPORT</td><td>OFF</td><td></td></tr><tr><td>OPENCV_DNN_CUDA</td><td>OFF</td><td></td></tr><tr><td>OPENCV_DNN_OPENCL</td><td>OFF</td><td></td></tr><tr><td>OPENCV_DNNOPENVINO</td><td>OFF</td><td></td></tr><tr><td>OPENCV_DNN_PERF_CAFFE</td><td>OFF</td><td></td></tr><tr><td>OPENCV_DNN_PERF_CLCAFFE</td><td>OFF</td><td></td></tr><tr><td>OPENCV_DOWNLOAD_PATH</td><td>opencv-4.7.0&#x2F;.cache</td><td></td></tr><tr><td>OPENCV_DUMPHOOKS_FLOW</td><td>OFF</td><td></td></tr><tr><td>OPENCV_ENABLE_ALLOCATOR_STATS</td><td>ON</td><td></td></tr><tr><td>OPENCV_ENABLE_ATOMIC_LONG_LONG</td><td>ON</td><td></td></tr><tr><td>OPENCV_ENABLE_MEMALIGN</td><td>ON</td><td></td></tr><tr><td>OPENCV_ENABLE_MEMORY_SANITIZER</td><td>OFF</td><td></td></tr><tr><td>·</td><td>OFF</td><td></td></tr><tr><td>OPENCVEXTRA_MODULES_PATH</td><td></td><td></td></tr><tr><td>OPENCV_FFMPEG_ENABLE_LIBAVDEVICE</td><td>OFF</td><td></td></tr><tr><td>OPENCV_FORCE_3RDPARTY_BUILD</td><td>OFF</td><td></td></tr><tr><td>OPENCV_GAPLGSTREAMER</td><td>OFF</td><td></td></tr><tr><td>OPENCV_GENERATE_PKGCONFIG</td><td>OFF</td><td></td></tr><tr><td>OPENCV_GENERATE_SETUPVARS</td><td>ON</td><td></td></tr><tr><td>OPENCV_IPP_GAUSSIAN_BLUR</td><td>OFF</td><td></td></tr><tr><td>OPENCV_JAVA_SOURCEVERSION</td><td></td><td></td></tr><tr><td>OPENCV_JAVA_TARGETVERSION</td><td></td><td></td></tr><tr><td>OPENCV_MATHJAX_RELPATH</td><td><a href="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0">https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0</a></td><td></td></tr><tr><td>OPENCV_PYTHON3_VERSION</td><td>OFF</td><td></td></tr><tr><td>OPENCV_TEST_DNN_CANN</td><td>OFF</td><td></td></tr><tr><td>OPENCV_TEST_DNN_OPENVINO</td><td>OFF</td><td></td></tr><tr><td>OPENCV_TIMESTAMP</td><td>2023-04-30T06:28:27Z</td><td></td></tr><tr><td>OPENCV_WARNINGS_ARE_ERRORS</td><td>OFF</td><td></td></tr><tr><td>OPJ_DISABLE_TPSOT_FIX</td><td>OFF</td><td></td></tr><tr><td>OPJ_USE_THREAD</td><td>ON</td><td></td></tr><tr><td>OpenCV_HAL_DIR</td><td>OpenCV_HAL_DIR-NOTFOUND</td><td></td></tr><tr><td>OpenEXR_DIR</td><td>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;cmake&#x2F;OpenEXR</td><td></td></tr><tr><td>PARALLEL_ENABLE_PLUGINS</td><td>ON</td><td></td></tr><tr><td>PROTOBUF_UPDATE_FILES</td><td>OFF</td><td></td></tr><tr><td>PYTHON2_EXECUTABLE</td><td></td><td></td></tr><tr><td>PYTHON2_INCLUDE_DIR</td><td></td><td></td></tr><tr><td>PYTHON2INCLUDE_DIR2</td><td></td><td></td></tr><tr><td>PYTHON2LIBRARY</td><td></td><td></td></tr><tr><td>PYTHON2_LIBRARY_DEBUG</td><td></td><td></td></tr><tr><td>PYTHON2_NUMPY_INCLUDE_DIRS</td><td></td><td></td></tr><tr><td>PYTHON2_PACKAGES_PATH</td><td></td><td></td></tr><tr><td>PYTHON3_EXECUTABLE</td><td>&#x2F;usr&#x2F;bin&#x2F;python3</td><td></td></tr><tr><td>PYTHON3_INCLUDE_DIR</td><td></td><td></td></tr><tr><td>PYTHON3_INCLUDE_DIR2</td><td></td><td></td></tr><tr><td>PYTHON3_LIBRARY</td><td></td><td></td></tr><tr><td>PYTHON3_LIBRARY_DEBUG</td><td></td><td></td></tr><tr><td>PYTHON3_NUMPY_INCLUDE_DIRS</td><td></td><td></td></tr><tr><td>PYTHON3_PACKAGES_PATH</td><td>lib&#x2F;python3.9&#x2F;site-packages</td><td></td></tr><tr><td>USE_WIN32_FILEIO</td><td>OFF</td><td></td></tr><tr><td>VTK_DIR</td><td>VTK_DIR-NOTFOUND</td><td></td></tr><tr><td>WITH_1394</td><td>ON</td><td></td></tr><tr><td>WITH_ADE</td><td>ON</td><td></td></tr><tr><td>WITH_ARAVIS</td><td>OFF</td><td></td></tr><tr><td>WITH_ARITH_DEC</td><td>ON</td><td></td></tr><tr><td>WITH_ARITH_ENC</td><td>ON</td><td></td></tr><tr><td>WITH_AVFOUNDATION</td><td>ON</td><td></td></tr><tr><td>WITH_CANN</td><td>OFF</td><td></td></tr><tr><td>WITH_CLP</td><td>OFF</td><td></td></tr><tr><td>WITH_CUDA</td><td>OFF</td><td></td></tr><tr><td>WITH_EIGEN</td><td>ON</td><td></td></tr><tr><td>WITH_FFMPEG</td><td>ON</td><td></td></tr><tr><td>WITH_FREETYPE</td><td>OFF</td><td>字体库</td></tr><tr><td>WITH_GDAL</td><td>OFF</td><td></td></tr><tr><td>WITH_GDCM</td><td>OFF</td><td></td></tr><tr><td>WITH_GPHOTO2</td><td>OFF</td><td></td></tr><tr><td>WITH_GSTREAMER</td><td>ON</td><td></td></tr><tr><td>WITH_HALIDE</td><td>OFF</td><td></td></tr><tr><td>WITH_HPX</td><td>OFF</td><td></td></tr><tr><td>WITH_IMGCODEC_HDR</td><td>ON</td><td></td></tr><tr><td>WITH_IMGCODEC_PFM</td><td>ON</td><td></td></tr><tr><td>WITH_IMGCODEC_PXM</td><td>ON</td><td></td></tr><tr><td>WITH_IMGCODEC_SUNRASTER</td><td>ON</td><td></td></tr><tr><td>WITH_IPP</td><td>ON</td><td></td></tr><tr><td>WITH_ITT</td><td>ON</td><td></td></tr><tr><td>WITH_JASPER</td><td>ON</td><td></td></tr><tr><td>WITH_JPEG</td><td>ON</td><td></td></tr><tr><td>WITH_LAPACK</td><td>ON</td><td></td></tr><tr><td>WITH_LIBREALSENSE</td><td>OFF</td><td></td></tr><tr><td>WITH_MFX</td><td>OFF</td><td></td></tr><tr><td>WITH_OAK</td><td>OFF</td><td></td></tr><tr><td>WITH_ONNX</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENCL</td><td>ON</td><td></td></tr><tr><td>WITH_OPENCLAMDBLAS</td><td>ON</td><td></td></tr><tr><td>WITH_OPENCLAMDFFT</td><td>ON</td><td></td></tr><tr><td>WITH_OPENCL_SVM</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENEXR</td><td>ON</td><td></td></tr><tr><td>WITH_OPENGL</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENJPEG</td><td>ON</td><td></td></tr><tr><td>WITH_OPENMP</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENNI</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENN12</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENVINO</td><td>OFF</td><td></td></tr><tr><td>WITH_OPENVX</td><td>OFF</td><td></td></tr><tr><td>WITH_PLAIDML</td><td>OFF</td><td></td></tr><tr><td>WITH_PNG</td><td>ON</td><td></td></tr><tr><td>WITH_PROTOBUF</td><td>ON</td><td></td></tr><tr><td>WITH_PTHREADS_PF</td><td>ON</td><td></td></tr><tr><td>WITH_PVAPI</td><td>OFF</td><td></td></tr><tr><td>WITH_QT</td><td>OFF</td><td></td></tr><tr><td>WITH_QUIRC</td><td>ON</td><td></td></tr><tr><td>WITH_SPNG</td><td>OFF</td><td></td></tr><tr><td>WITH_TBB</td><td>OFF</td><td></td></tr><tr><td>WITH_TIFF</td><td>ON</td><td></td></tr><tr><td>WITH_TIMVX</td><td>OFF</td><td></td></tr><tr><td>WITH_VTK</td><td>ON</td><td></td></tr><tr><td>WITH_VULKAN</td><td>OFF</td><td></td></tr><tr><td>WITH_WEBNN</td><td>OFF</td><td></td></tr><tr><td>WITH_WEBP</td><td>ON</td><td></td></tr><tr><td>WITH_XIMEA</td><td>OFF</td><td></td></tr><tr><td>ccitt</td><td>ON</td><td></td></tr><tr><td>logluv</td><td>ON</td><td></td></tr><tr><td>lzW</td><td>ON</td><td></td></tr><tr><td>mdi</td><td>ON</td><td></td></tr><tr><td>lnext</td><td>ON</td><td></td></tr><tr><td>old-jpeg</td><td>OFF</td><td></td></tr><tr><td>packbits</td><td>ON</td><td></td></tr><tr><td>thunder</td><td>ON</td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/index/"/>
      <url>/article/index/</url>
      
        <content type="html"><![CDATA[<ul><li><p>下载源码 <a href="https://github.com/llvm/llvm-project/releases">Releases · llvm&#x2F;llvm-project (github.com)</a></p></li><li><p>安装</p><ul><li><p>llvm</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd llvm-projectmkdir build-llvm cd build-llvmcmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE&#x3D;Release ..&#x2F;llvmmake -j32make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>clang</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd llvm-projectmkdir build-clang cd build-clangcmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE&#x3D;Release ..&#x2F;clangmake -j32make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>compiler-rt</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd llvm-projectmkdir build-compiler-rt cd build-compiler-rtcmake -G &quot;Unix Makefiles&quot; -DCMAKE_BUILD_TYPE&#x3D;Release -DLLVM_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;llvm-config ..&#x2F;compiler-rtmake -j32make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>静态库找不到的问题</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;clang&#x2F;15.0.6ln -s &#x2F;usr&#x2F;local&#x2F;lib lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>卸载</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd build_xxxxargs rm &lt; install_manifest.txtcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/article/index/"/>
      <url>/article/index/</url>
      
        <content type="html"><![CDATA[<hr><hr><p>author: Zhenhong Hu<br>title: gdb 调试<br>urlname: gdb<br>categories: C++<br>tags: [C++, lambda]</p><p>date: 2023-05-05</p><h1 id="gdb-调试"><a href="#gdb-调试" class="headerlink" title="gdb 调试"></a>gdb 调试</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">在调试会话中使用 directory <span class="token operator">&lt;</span>dir<span class="token operator">></span>命令让GDB关联正确的源代码路径  list linenum：显示指定行数附近的代码。list function：显示指定函数附近的代码。list ＊addr：显示指定地址附近的代码。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>格式化后文件大小变化</title>
      <link href="/article/format-size-change/"/>
      <url>/article/format-size-change/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化后文件大小变化"><a href="#格式化后文件大小变化" class="headerlink" title="格式化后文件大小变化"></a>格式化后文件大小变化</h1><h2 id="原始大小为-1-8k"><a href="#原始大小为-1-8k" class="headerlink" title="原始大小为 1.8k"></a>原始大小为 1.8k</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">StreamTotalManagerMid</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateLabels</span><span class="token punctuation">(</span>CVModelResults<span class="token operator">&amp;</span> detect_results<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将模型的结果注册到 label_manager 中，才能对可能要合并的 label 进行分析</span>    m_label_manager<span class="token punctuation">.</span><span class="token function">update_model_labels</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缩减labels，省得告警结果json中有很多冗余</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> old_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> merge_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> labels_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_label_str <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_label_manager<span class="token punctuation">.</span><span class="token function">if_label_merged</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> merged_label <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merged_label<span class="token punctuation">)</span> <span class="token operator">==</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>merged_label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            old_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 没有合并的标签，不用修改</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> new_labels_vec<span class="token punctuation">;</span>    <span class="token comment">// 让没有被合并的标签保持在前面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> merge_labels_vec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> old_labels_vec<span class="token punctuation">;</span>        new_labels_vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_box <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>box_results<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 要把检测结果的标签进行修改，方便后面跟踪管理器跟踪</span>        <span class="token keyword">auto</span> label_str <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>one_box<span class="token punctuation">.</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        one_box<span class="token punctuation">.</span>label <span class="token operator">=</span> it <span class="token operator">-</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    detect_results<span class="token punctuation">.</span>labels <span class="token operator">=</span> new_labels_vec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">StreamTotalManagerMid</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateLabels</span><span class="token punctuation">(</span>CVModelResults<span class="token operator">&amp;</span> detect_results<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将模型的结果注册到 label_manager 中，才能对可能要合并的 label 进行分析</span>    m_label_manager<span class="token punctuation">.</span><span class="token function">update_model_labels</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缩减labels，省得告警结果json中有很多冗余</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> old_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> merge_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> labels_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_label_str <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_label_manager<span class="token punctuation">.</span><span class="token function">if_label_merged</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> merged_label <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merged_label<span class="token punctuation">)</span> <span class="token operator">==</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>merged_label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            old_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 没有合并的标签，不用修改</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> new_labels_vec<span class="token punctuation">;</span>    <span class="token comment">// 让没有被合并的标签保持在前面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> merge_labels_vec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> old_labels_vec<span class="token punctuation">;</span>        new_labels_vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_box <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>box_results<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 要把检测结果的标签进行修改，方便后面跟踪管理器跟踪</span>        <span class="token keyword">auto</span> label_str <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>one_box<span class="token punctuation">.</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        one_box<span class="token punctuation">.</span>label <span class="token operator">=</span> it <span class="token operator">-</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    detect_results<span class="token punctuation">.</span>labels <span class="token operator">=</span> new_labels_vec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单-format-后为-1-9k"><a href="#简单-format-后为-1-9k" class="headerlink" title="简单 format 后为 1.9k"></a>简单 format 后为 1.9k</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">StreamTotalManagerMid</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateLabels</span><span class="token punctuation">(</span>CVModelResults<span class="token operator">&amp;</span> detect_results<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将模型的结果注册到 label_manager 中，才能对可能要合并的 label 进行分析</span>    m_label_manager<span class="token punctuation">.</span><span class="token function">update_model_labels</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缩减labels，省得告警结果json中有很多冗余</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>   old_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>   merge_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> labels_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_label_str <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_label_manager<span class="token punctuation">.</span><span class="token function">if_label_merged</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> merged_label <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merged_label<span class="token punctuation">)</span> <span class="token operator">==</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>merged_label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            old_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 没有合并的标签，不用修改</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> new_labels_vec<span class="token punctuation">;</span>    <span class="token comment">// 让没有被合并的标签保持在前面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> merge_labels_vec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> old_labels_vec<span class="token punctuation">;</span>        new_labels_vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_box <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>box_results<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 要把检测结果的标签进行修改，方便后面跟踪管理器跟踪</span>        <span class="token keyword">auto</span> label_str <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>one_box<span class="token punctuation">.</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it        <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        one_box<span class="token punctuation">.</span>label  <span class="token operator">=</span> it <span class="token operator">-</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    detect_results<span class="token punctuation">.</span>labels <span class="token operator">=</span> new_labels_vec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">StreamTotalManagerMid</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateLabels</span><span class="token punctuation">(</span>CVModelResults<span class="token operator">&amp;</span> detect_results<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将模型的结果注册到 label_manager 中，才能对可能要合并的 label 进行分析</span>    m_label_manager<span class="token punctuation">.</span><span class="token function">update_model_labels</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缩减labels，省得告警结果json中有很多冗余</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>   old_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>   merge_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> labels_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_label_str <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_label_manager<span class="token punctuation">.</span><span class="token function">if_label_merged</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> merged_label <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merged_label<span class="token punctuation">)</span> <span class="token operator">==</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>merged_label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            old_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 没有合并的标签，不用修改</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> new_labels_vec<span class="token punctuation">;</span>    <span class="token comment">// 让没有被合并的标签保持在前面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> merge_labels_vec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> old_labels_vec<span class="token punctuation">;</span>        new_labels_vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_box <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>box_results<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 要把检测结果的标签进行修改，方便后面跟踪管理器跟踪</span>        <span class="token keyword">auto</span> label_str <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>one_box<span class="token punctuation">.</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it        <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        one_box<span class="token punctuation">.</span>label  <span class="token operator">=</span> it <span class="token operator">-</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    detect_results<span class="token punctuation">.</span>labels <span class="token operator">=</span> new_labels_vec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动调整添加空格后为1-9k"><a href="#手动调整添加空格后为1-9k" class="headerlink" title="手动调整添加空格后为1.9k"></a>手动调整添加空格后为1.9k</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">StreamTotalManagerMid</span><span class="token double-colon punctuation">::</span><span class="token function">UpdateLabels</span><span class="token punctuation">(</span>CVModelResults<span class="token operator">&amp;</span> detect_results<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 将模型的结果注册到 label_manager 中，才能对可能要合并的 label 进行分析</span>    m_label_manager<span class="token punctuation">.</span><span class="token function">update_model_labels</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缩减labels，省得告警结果json中有很多冗余</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>   old_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>   merge_labels_vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> labels_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_label_str <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_label_manager<span class="token punctuation">.</span><span class="token function">if_label_merged</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> merged_label <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> merged_label<span class="token punctuation">)</span> <span class="token operator">==</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                merge_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>merged_label<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            old_labels_vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>one_label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>merge_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 没有合并的标签，不用修改</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> new_labels_vec<span class="token punctuation">;</span>    <span class="token comment">// 让没有被合并的标签保持在前面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_labels_vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> merge_labels_vec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        new_labels_vec <span class="token operator">=</span> old_labels_vec<span class="token punctuation">;</span>        new_labels_vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> one_box <span class="token operator">:</span> detect_results<span class="token punctuation">.</span>box_results<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 要把检测结果的标签进行修改，方便后面跟踪管理器跟踪</span>        <span class="token keyword">auto</span> label_str <span class="token operator">=</span> m_label_manager<span class="token punctuation">.</span><span class="token function">get_merged_label</span><span class="token punctuation">(</span>detect_results<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>one_box<span class="token punctuation">.</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        one_box<span class="token punctuation">.</span>label <span class="token operator">=</span> it <span class="token operator">-</span> new_labels_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    detect_results<span class="token punctuation">.</span>labels <span class="token operator">=</span> new_labels_vec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spdlog 笔记</title>
      <link href="/article/spdlog/"/>
      <url>/article/spdlog/</url>
      
        <content type="html"><![CDATA[<h1 id="spdlog-笔记"><a href="#spdlog-笔记" class="headerlink" title="spdlog 笔记"></a>spdlog 笔记</h1><h3 id="version：1-11"><a href="#version：1-11" class="headerlink" title="version：1.11"></a>version：1.11</h3><ul><li><p>重要特性</p><ul><li>支持 header only、lib 方式</li><li>支持跨平台</li><li>支持日志回溯</li><li>支持日志计时</li></ul></li><li><p>源码简单说明</p><ul><li><p>默认创建支持多线程的控制台打印日志</p></li><li><p>支持 SPDLOG_TRACE() 或者 spd::log()，前者支持<code> __FILE__、__LINE__、__FUNCTION__</code>宏</p></li><li><p>spdlog::details::registry 类为日志控制单例，持有所有的 logger 及 sink</p></li><li><p>日志入口为 spdlog.h 头文件，通过全局接口函数调用 spdlog::details::registry 单实例，完成对所有 logger 的操作</p></li><li><p>&#96;&#96;&#96;cpp<br>SPDLOG_TRACE()</p><p>&#x2F;&#x2F; spdlog 全局函数<br>template<typename T><br>inline void log(level::level_enum lvl, const T&amp; msg)<br>{<br>default_logger_raw()-&gt;log(lvl, msg);<br>}</p><pre class="line-numbers language-none"><code class="language-none">  - &#96;&#96;&#96;sh# 加快一倍（不丢帧）ffmpeg -i input.mkv -r 50 -filter:v &quot;setpts&#x3D;0.5*PTS&quot; output.mkv# 加快一倍（会丢帧）ffmpeg -i input.mkv -filter:v &quot;setpts&#x3D;0.5*PTS&quot; output.mkv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> open-souece-note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spdlog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg 安装指南</title>
      <link href="/article/ffmpeg-install-guide/"/>
      <url>/article/ffmpeg-install-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="FFmpeg-安装指南"><a href="#FFmpeg-安装指南" class="headerlink" title="FFmpeg 安装指南"></a>FFmpeg 安装指南</h1><h3 id="安装nasm"><a href="#安装nasm" class="headerlink" title="安装nasm"></a>安装nasm</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">.&#x2F;configuremakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装yasm"><a href="#安装yasm" class="headerlink" title="安装yasm"></a>安装yasm</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">.&#x2F;configuremakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装x264"><a href="#安装x264" class="headerlink" title="安装x264"></a>安装x264</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">vim &#x2F;etc&#x2F;profileexport PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;pkgconfigsource &#x2F;etc&#x2F;profile.&#x2F;configure --enable-sharedmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装x265"><a href="#安装x265" class="headerlink" title="安装x265"></a>安装x265</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;build&#x2F;linuxmake-Makefiles.bashmake make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装libxvid"><a href="#安装libxvid" class="headerlink" title="安装libxvid"></a>安装libxvid</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget http:&#x2F;&#x2F;downloads.xvid.org&#x2F;downloads&#x2F;xvidcore-1.3.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装libvpx"><a href="#安装libvpx" class="headerlink" title="安装libvpx"></a>安装libvpx</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># --as&#x3D;yasm 很重要，要不然总是提示找不到nasm或yasm.&#x2F;configure \    --enable-realtime-only \    --enable-error-concealment \    --disable-examples \    --enable-vp8 --enable-vp9 --enable-pic \    --enable-shared --as&#x3D;yasm makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装nvidia编解码"><a href="#安装nvidia编解码" class="headerlink" title="安装nvidia编解码"></a>安装nvidia编解码</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git clone https:&#x2F;&#x2F;git.videolan.org&#x2F;git&#x2F;ffmpeg&#x2F;nv-codec-headers.gitcd nv-codec-headerssudo makesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FFmpeg安装"><a href="#FFmpeg安装" class="headerlink" title="FFmpeg安装"></a>FFmpeg安装</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 不要安装静态库，会导致 OpenCV 构建时报 make[2]: *** [lib&#x2F;libopencv_videoio.so.4.7.0] Error 1 的错误.&#x2F;configure \--disable-static \--disable-stripping \--enable-yasm \--enable-cuda \--enable-cuvid \--enable-gpl \--enable-libx264 \--enable-libx265 \--enable-libxvid \--enable-libvpx \--enable-nvdec \--enable-nvenc \--enable-shared \--enable-version3 \--disable-staticmake make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ffmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh 安装配置</title>
      <link href="/article/zsh/"/>
      <url>/article/zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="zsh-安装配置"><a href="#zsh-安装配置" class="headerlink" title="zsh 安装配置"></a>zsh 安装配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 安装 zshbrew instali zsh         # macossudo apt-get install zsh # ubuntuyum install zsh          # centoswget https:&#x2F;&#x2F;gitee.com&#x2F;mirrors&#x2F;oh-my-zsh&#x2F;raw&#x2F;master&#x2F;tools&#x2F;install.sh# 将 zsh 设置为系统默认 shellchsh -s &#x2F;bin&#x2F;zsh# 重启 shell 生效# 也可能不生效，此时需要在 vi ~&#x2F;.bashrc 中添加 if [ -t 1 ]; then    exec zshfi# 如果报错：command not found: shopt# 将. &#x2F;etc&#x2F;bashrc 替换为bash -c &quot;. &#x2F;etc&#x2F;bashrc&quot;cat &#x2F;etc&#x2F;shells# 查看系统可使用 shell 有哪些echo $SHELL# 查看当前使用的 shell# 安装 oh-my-zsh，网络问题可以将github换成giteegit clone https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zshcp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc# 安装高亮插件git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting# 安装自动提示插件git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># vi ~&#x2F;.zshrc# 开头添加或者取消注释export PATH&#x3D;$HOME&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:$PATH # source $HOME&#x2F;.bashrc # 有的话source $HOME&#x2F;.bash_profile  ZSH_THEME&#x3D;&quot;ys&quot;  # 以下内容去掉注释即可生效：  ENABLE_CORRECTION&#x3D;&quot;true&quot;# 启动错误命令自动更正  COMPLETION_WAITING_DOTS&#x3D;&quot;true&quot;# 在命令执行的过程中，使用小红点进行提示  # 配置插件，extract 用于使用 x 解压，z xx 直接跳转到进入过的目录  plugins&#x3D;(git brew z extract cp web-search zsh-syntax-highlighting zsh-autosuggestions)# source ~&#x2F;.zshrc# conda相关命令不能用解决办法cd &#x2F;xx&#x2F;xx&#x2F;miniconda&#x2F;bin.&#x2F;conda init zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义字符串</title>
      <link href="/article/custom-str/"/>
      <url>/article/custom-str/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义字符串"><a href="#自定义字符串" class="headerlink" title="自定义字符串"></a>自定义字符串</h1><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef></span>  <span class="token comment">// size_t: long unsigned int</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span>  <span class="token comment">// uint16_t</span></span><span class="token comment">// https://github.com/MengRao/str</span><span class="token keyword">template</span><span class="token operator">&lt;</span>size_t SIZE<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Str</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> charArr<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Str<span class="token operator">&lt;</span>SIZE<span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> charArr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> charArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token comment">// 何必加这个const？</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> charArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token keyword">void</span> <span class="token function">fromi</span><span class="token punctuation">(</span>T num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// year Size=4 num=2022</span>        <span class="token keyword">auto</span> n <span class="token operator">=</span> SIZE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>SIZE <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// SIZE 为奇数</span>        <span class="token punctuation">&#123;</span>            charArr<span class="token punctuation">[</span>SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理个位</span>            num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>                             <span class="token comment">// num 变为偶数位（注意不是偶数，是偶数位）</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*            源码        反码        补码        4   00000100   00000100   00000100        -2  10000010   11111101   11111110            4 &amp; -2 为 00000100        3   00000011   00000011   00000011        -2  10000010   11111101   11111110            3 &amp; -2 为 00000010        -2 的补码为 11111110，正好可以去掉 charArr 的最后一位，余下总位数为偶数位        */</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>SIZE <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">/*                以                case 18:                    *(uint16_t*)(charArr + 16) = *(uint16_t*)(pDigitTable + ((num % 100) &lt;&lt; 1));                为例                case 18 是因为已经单独处理了最后一位                (num % 100) 拿到最后两位数字，比如为 99，然后 99 &lt;&lt; 1 是因为 pDigitTable 里面每个数字占两个字节                转为 (uint16_t*) 是因为 uint16_t 正好可以取两个字节                charArr + 16 是因为在 18 的基础上刚刚又处理了最后面的两位                num /= 100 剩余数字就再减少两位                    这里以 100 为单位应该是比 10 少一半的运算，因为要处理的 case 情况减半，改为以 1000 为单位也可以，                    只是这样就很复杂了，要单独先处理两位数及一位数的情况，pDigitTable 需要存储 000~999                */</span>            <span class="token comment">// 最大支持 19 位数 case 18:</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">14</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>charArr <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pDigitTable <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pDigitTable <span class="token operator">=</span> <span class="token string">"00010203040506070809"</span>                                               <span class="token string">"10111213141516171819"</span>                                               <span class="token string">"20212223242526272829"</span>                                               <span class="token string">"30313233343536373839"</span>                                               <span class="token string">"40414243444546474849"</span>                                               <span class="token string">"50515253545556575859"</span>                                               <span class="token string">"60616263646566676869"</span>                                               <span class="token string">"70717273747576777879"</span>                                               <span class="token string">"80818283848586878889"</span>                                               <span class="token string">"90919293949596979899"</span><span class="token punctuation">;</span>    <span class="token comment">// char                         charArr[SIZE];  // 直接访问和通过函数获取速度到底差多少呢，这个类应该是用来快速格式化数字的，所以改成接口问题不大</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CustomStr.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"fmt/core.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Str<span class="token operator">&lt;</span><span class="token number">10</span><span class="token operator">></span> str<span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">fromi</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> size_t RECORD <span class="token operator">=</span> <span class="token number">100'000'000'000</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span>         time1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RECORD<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        fmt<span class="token double-colon punctuation">::</span>string_view <span class="token function">strv</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">Ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">auto</span>   time2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> span <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"str.Ptr() cost &#123;:.1f&#125; ns\n"</span><span class="token punctuation">,</span> span <span class="token operator">*</span> <span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> time3 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RECORD<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        fmt<span class="token double-colon punctuation">::</span>string_view <span class="token function">strv</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>charArr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">auto</span> time4 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    span <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>duration<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span>time4 <span class="token operator">-</span> time3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fmt<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"str.charArr cost &#123;:.1f&#125; ns\n"</span><span class="token punctuation">,</span> span <span class="token operator">*</span> <span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h5><pre class="line-numbers language-none"><code class="language-none">str.Ptr() cost 50.0 nsstr.charArr cost 35.0 ns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 自定义字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode之插件 c++ Insights</title>
      <link href="/article/vscode-extension-cppinsights/"/>
      <url>/article/vscode-extension-cppinsights/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode之插件c-Insights"><a href="#VSCode之插件c-Insights" class="headerlink" title="VSCode之插件c++ Insights"></a>VSCode之插件c++ Insights</h1><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>扩展市场搜索安装插件，插件只是前段，还需要后端</p></li><li><p>到 <a href="https://github.com/andreasfertig/cppinsights">andreasfertig&#x2F;cppinsights: C++ Insights - See your source code with the eyes of a compiler (github.com)</a>下载Release版本或者源码编译，Release 下的预编译版本可能有问题，本机发现是关于系统头文件的问题，<a href="https://github.com/andreasfertig/cppinsights/issues/186">这里</a>有讨论，主要是确保根目录下的 CMakeLists.txt 里面的 llvm_config 函数在非windows下必须执行 “string(REGEX REPLACE “-I” “-isystem” CONFIG_OUTPUT “${CONFIG_OUTPUT}”)”，不过现在已经修复了；但是源码编译时需要 llvm_config，Mac 的 CommandLineTools 只有 llvm，没有 llvm_config，我是去 <a href="https://releases.llvm.org/">Download LLVM releases</a>下载的完整安装包，添加到环境变量后(注意 <code>export PATH=&quot;/xxx/xx:$PATH&quot; &gt;&gt; ~/.zshrc</code>只是临时在本终端内有效)，使用如下命令进行编译</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cmake  -DCMAKE_CXX_COMPILER&#x3D;&#x2F;xxx&#x2F;clang++  -DCMAKE_BUILD_TYPE&#x3D;Release .make -j8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>至于怎样在 CommandLineTools 里添加完整的 llvm 还待研究</li><li>下载的 llvm 添加到 ~&#x2F;.zshrc 后为什么在 vscode 里面检测不到这个编译环境，需要退出全部 vscode 后重新启动 vscode 就可以扫描到了</li></ul></li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>配置页检索 c++ Insights 就可以看到配置项，填上上面生成的 insights 的完整路径</li><li>其余几项看描述也就知道怎么选了</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>注意需要用到 compile_commands.json，所以必须先配置完工程才能使用</p><ul><li>按下 F1，show C++ Insights diff with original，显示差异位置</li><li>按下 F1，show C++ Insights，不显示差异位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> clangd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊函数</title>
      <link href="/article/special_function/"/>
      <url>/article/special_function/</url>
      
        <content type="html"><![CDATA[<h1 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h1><p><a href="https://cppinsights.io/">C++ Insights (cppinsights.io)</a> 在线测试</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token keyword">class</span> <span class="token class-name">Obj</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">//Obj()= default;</span>  <span class="token comment">//Obj(int val)&#123;&#125;; // 带参构造不能是 default</span>    <span class="token comment">//Obj(const Obj &amp;)= default;</span><span class="token comment">//Obj(Obj &amp;&amp;)= default;</span><span class="token comment">//Obj &amp; operator=(const Obj &amp;)= default;</span><span class="token comment">//Obj &amp; operator=(Obj &amp;&amp;) = default;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> tmp1 <span class="token operator">=</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无参构造</span>    <span class="token comment">//auto tmp2 = Obj(1); // 有参构造</span>  <span class="token keyword">auto</span> tmp3 <span class="token operator">=</span> tmp1<span class="token punctuation">;</span><span class="token comment">// 拷贝构造</span>    tmp3 <span class="token operator">=</span> tmp1<span class="token punctuation">;</span><span class="token comment">// 赋值构造</span>    <span class="token keyword">auto</span> tmp4 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移动拷贝构造</span>    tmp4 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移动赋值构造</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token keyword">class</span> <span class="token class-name">Obj</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 默认应该是没有显示默认构造和析构函数</span>  <span class="token comment">// inline constexpr Obj(const Obj &amp;) noexcept = default;</span>  <span class="token comment">// inline constexpr Obj(Obj &amp;&amp;) noexcept = default;</span>  <span class="token comment">// inline constexpr Obj &amp; operator=(const Obj &amp;) noexcept = default;</span>  <span class="token comment">// inline constexpr Obj &amp; operator=(Obj &amp;&amp;) noexcept = default;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Obj tmp1 <span class="token operator">=</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Obj tmp3 <span class="token operator">=</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> Obj<span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tmp3<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> Obj<span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Obj tmp4 <span class="token operator">=</span> <span class="token function">Obj</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tmp4<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><table><thead><tr><th>有参构造函数</th><th>无参构造函数</th><th>拷贝构造函数</th><th>赋值构造函数</th><th>移动构造函数</th><th>移动赋值构造函数</th><th>析构函数</th></tr></thead><tbody><tr><td>不生成</td><td>生成</td><td>生成</td><td>生成</td><td>生成</td><td>生成</td><td>生成</td></tr><tr><td><strong>声明</strong></td><td>不生成</td><td>生成</td><td>生成</td><td>生成</td><td>生成</td><td>生成</td></tr><tr><td>不生成</td><td><strong>声明</strong></td><td>生成</td><td>生成</td><td>生成</td><td>生成</td><td>生成</td></tr><tr><td>不生成</td><td>不生成</td><td><strong>声明</strong></td><td>不生成</td><td>不生成</td><td>不生成</td><td>生成</td></tr><tr><td>不生成</td><td>生成</td><td>生成</td><td><strong>声明</strong></td><td>不生成</td><td>不生成</td><td>生成</td></tr><tr><td>不生成</td><td>不生成</td><td>不生成</td><td>不生成</td><td><strong>声明</strong></td><td>不生成</td><td>生成</td></tr><tr><td>不生成</td><td>生成</td><td>删除</td><td>删除</td><td></td><td><strong>声明</strong></td><td>生成</td></tr><tr><td>不生成</td><td>生成</td><td>生成</td><td>生成</td><td>不生成</td><td>不生成</td><td><strong>声明</strong></td></tr></tbody></table><ul><li>自己声明了，哪怕是 “&#x3D; default”，编译器就不再生成该构造函数或者析构函数</li><li>在编译器眼里，有参构造函数和无参构造函数都是普通构造函数，但是任何情况下编译器都不会生成有参构造函数，因为编译器认为这是高度自定义的行为</li><li>未声明任何构造函数时，编译器会根据代码对构造函数的使用情况生成相应的构造函数</li><li>只声明拷贝构造函数是不可取的，因为此时编译器不会自动生成无参构造函数，无法构建对象，更何谈拷贝？</li><li>只声明赋值构造函数时，编译器会自动生成无参构造函数和拷贝构造函数（可能和编译器有关）</li><li>只声明移动构造函数时，编译器不会生成任何其它构造函数</li><li>只声明移动赋值构造函数，编译器会自动生成无参构造函数，拷贝构造函数和赋值构造函数均被删除</li><li>声明析构函数后，编译器不会自动生成移动构造函数和移动赋值构造函数，因为编译器认为你想自己控制资源的释放</li><li>声明<strong>拷贝</strong>构造函数和<strong>赋值</strong>构造函数时，编译器会仍为你想拷贝对象而不是移动对象，所以不会自动生成<strong>移动</strong>构造函数和<strong>移动</strong>赋值构造函数</li><li>声明<strong>移动</strong>构造函数和<strong>移动</strong>赋值构造函数，编译器会仍为你想移动对象而不是拷贝对象，所以不会自动生成<strong>拷贝</strong>构造函数和<strong>赋值</strong>构造函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 特殊函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrfd</title>
      <link href="/article/scrfd/"/>
      <url>/article/scrfd/</url>
      
        <content type="html"><![CDATA[<h1 id="scrfd"><a href="#scrfd" class="headerlink" title="scrfd"></a>scrfd</h1><h3 id="代码存在的-bug"><a href="#代码存在的-bug" class="headerlink" title="代码存在的 bug"></a>代码存在的 bug</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span> 本接口的作用就是 Random Square Crop<span class="token punctuation">,</span> 随机抠取方形原图<span class="token punctuation">,</span> 输出图像长宽为原图短边的 crop_ratio 倍<span class="token punctuation">,</span> 记为 Lcrop_ratio <span class="token operator">&lt;=</span> <span class="token number">1</span> 时<span class="token punctuation">,</span> 是在原图上随机抠取 L x L<span class="token punctuation">,</span> 放到 L x L 的目标图像中crop_ratio <span class="token operator">></span> <span class="token number">1</span> 时<span class="token punctuation">,</span> 是将整个原图随机放到 L x L 的目标图像中<span class="token punctuation">,</span> 然后四周（右下）进行填充本操作图像不会发生形变<span class="token operator">-</span> 接下来执行 Resize训练时默认 keep_ratio<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> 执行普通缩放验证时默认 keep_ratio<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> 实际是执行小比例<span class="token punctuation">(</span>短边<span class="token punctuation">)</span>缩放若 input_size 为 <span class="token number">640</span> x <span class="token number">640</span>训练时 Resize 后输出为 <span class="token number">640</span> x <span class="token number">640</span><span class="token punctuation">,</span> 图片不会变形验证时 Resize 后输出为 <span class="token number">640</span> x <span class="token number">640</span><span class="token punctuation">,</span> 图像不会变形<span class="token punctuation">,</span> padding <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">(</span>左上右下<span class="token punctuation">)</span><span class="token punctuation">)</span> 后输出为 <span class="token number">640</span> x <span class="token number">640</span>若 input_size 为 <span class="token number">540</span> x <span class="token number">360</span>训练时 Resize 后输出为 <span class="token number">540</span> x <span class="token number">360</span><span class="token punctuation">,</span> 图片会变形<span class="token punctuation">,</span> 消除变形需和验证时一样保持 keep_ratio<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> 然后 padding验证时 Resize 后输出为 <span class="token number">360</span> x <span class="token number">360</span><span class="token punctuation">,</span> 图像不会变形<span class="token punctuation">,</span> padding <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">(</span>左上右下<span class="token punctuation">)</span><span class="token punctuation">)</span> 后输出为 <span class="token number">540</span> x <span class="token number">360</span>综上在输入宽高不一致的情况下，代码存在两处 bug<span class="token operator">-</span> geometric<span class="token punctuation">.</span>py Resize <span class="token number">138</span>行 的 rescale_size 无法处理 h <span class="token operator">></span> w 的情况应做如下修改<span class="token comment"># max_long_edge = max(scale)</span><span class="token comment"># max_short_edge = min(scale)</span><span class="token comment"># scale_factor = min(max_long_edge / max(h, w),</span><span class="token comment">#                    max_short_edge / min(h, w))</span>scale_factor <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> w<span class="token punctuation">,</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> h<span class="token punctuation">)</span><span class="token operator">-</span> transforms<span class="token punctuation">.</span>py Pad <span class="token number">536</span> 行的 shape 传参有误应做如下修改<span class="token comment"># padded_img = mmcv.impad(</span><span class="token comment">#     results[key], shape=self.size, pad_val=self.pad_val)</span>padded_img <span class="token operator">=</span> mmcv<span class="token punctuation">.</span>impad<span class="token punctuation">(</span>  results<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pad_val<span class="token operator">=</span>self<span class="token punctuation">.</span>pad_val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存对齐</title>
      <link href="/article/memory-align/"/>
      <url>/article/memory-align/</url>
      
        <content type="html"><![CDATA[<h1 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h1><blockquote><p>参考</p><ul><li>【理论】<a href="https://developer.aliyun.com/article/996348">https://developer.aliyun.com/article/996348</a></li><li>【实践】<a href="https://developer.aliyun.com/article/1068586">https://developer.aliyun.com/article/1068586</a></li><li>[C&#x2F;C++内存对齐详解 - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/30007037#:~:text=%E9%A6%96%E5%85%88%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%991%EF%BC%8C%E5%AF%B9%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%E5%AF%B9%E9%BD%90%EF%BC%9A">https://zhuanlan.zhihu.com/p/30007037#:~:text=首先使用规则1，对成员变量进行对齐：</a> sizeof (c1) %3D 1 &lt;%3D 4,(有效对齐位)，按照1字节对齐，占用第0单元； sizeof (i) %3D 4 &lt;%3D 4 (有效对齐位)，相对于结构体首地址的偏移要为4的倍数，占用第4，5，6，7单元；)</li></ul></blockquote><p>第二篇文章中给出了对齐规则</p><ol><li>结构体变量的起始地址能够被其有效对齐值整除；</li><li>每个成员相对于结构体首地址的偏移都能被有效对齐值整除，如不能则在前一个成员后填充字节；</li><li>结构体的总大小为有效对齐值的整数倍，如不能则在最后面填充字节</li></ol><p>第二点应该是</p><ul><li>结构体第一个成员的offset为0</li><li>以后每个成员相对于结构体首地址的 offset 都是<strong>该成员大小与有效对齐值中较小那个</strong>的整数倍</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span>  a<span class="token punctuation">;</span>  <span class="token comment">// 1 byte</span>              <span class="token comment">// padding 3 bytes</span>    <span class="token keyword">int</span>   b<span class="token punctuation">;</span>  <span class="token comment">// 4 bytes</span>    <span class="token keyword">short</span> c<span class="token punctuation">;</span>  <span class="token comment">// 2 bytes</span>              <span class="token comment">// no padding</span>    <span class="token keyword">char</span>  d<span class="token punctuation">;</span>  <span class="token comment">// 1 byte</span>              <span class="token comment">// padding 3 bytes</span><span class="token punctuation">&#125;</span> obj<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(Object): "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// output 12</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"alignof(Object): "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// output 12</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改labelme标签（scrfd）</title>
      <link href="/article/modify-labelme-scrfd/"/>
      <url>/article/modify-labelme-scrfd/</url>
      
        <content type="html"><![CDATA[<h1 id="修改labelme标签（scrfd）"><a href="#修改labelme标签（scrfd）" class="headerlink" title="修改labelme标签（scrfd）"></a>修改labelme标签（scrfd）</h1><ul><li><p>无效图片flag为-1，修改后直接放弃该图片</p></li><li><p>只有人脸没有关键点，人脸flag为1，修改后给该人脸添加无效关键点</p></li><li><p>修改代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> shutil<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">def</span> <span class="token function">process_one_folfer</span><span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_file_list <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>image_dir<span class="token punctuation">)</span> <span class="token keyword">if</span> p<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> img_file <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>img_file_list<span class="token punctuation">,</span> <span class="token string">"process.."</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img_path <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_dir<span class="token punctuation">,</span> img_file<span class="token punctuation">)</span><span class="token punctuation">)</span>        json_path <span class="token operator">=</span> img_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>        <span class="token comment"># 没有标注</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>json_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        label_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        shape_list <span class="token operator">=</span> label_dict<span class="token punctuation">[</span><span class="token string">"shapes"</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shape_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token string">"-1"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> label_dict<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token string">"1"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> label_dict<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"delete image.."</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>json_path<span class="token punctuation">)</span>            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> label_dict<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"-1"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 不要当前图片</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"drop image.."</span><span class="token punctuation">)</span>            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>json_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>        <span class="token keyword">elif</span> label_dict<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 只要人脸，不要关键点</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"drop all landmark.."</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> shaple <span class="token keyword">in</span> shape_list<span class="token punctuation">:</span>                <span class="token keyword">if</span> shaple<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"face"</span><span class="token punctuation">:</span>                    shaple<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.00000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.00000</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                    shaple<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>label_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            new_shape_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            wrong_face <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token comment"># 按顺序读每一个label</span>            total_shape_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shape_list<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_shape_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> shape_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"face"</span><span class="token punctuation">:</span>                    current_face <span class="token operator">=</span> shape_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>current_face<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>                        wrong_face <span class="token operator">=</span> <span class="token boolean">True</span>                        <span class="token keyword">break</span>                    new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_face<span class="token punctuation">)</span>  <span class="token comment"># 添加 face</span>                    <span class="token keyword">if</span> shape_list<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"face"</span><span class="token punctuation">:</span>  <span class="token comment"># 下一个也是人脸，说明当前这个没有关键点</span>                        current_face<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 人脸标记为 -1</span>                        <span class="token comment"># 添加五个关键点</span>                        landmark <span class="token operator">=</span> current_face<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 和当前id一致</span>                        landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"left_eye"</span>                        landmark<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.00000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.00000</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                        landmark<span class="token punctuation">[</span><span class="token string">"shape_type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"point"</span>                        <span class="token comment"># landmark.__setitem__("flags", &#123;"-1": True, "0": False, "1": False&#125;)</span>                        new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                        landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                        landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"right_eye"</span>                        new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                        landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                        landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"nose"</span>                        new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                        landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                        landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"left_mouse"</span>                        new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                        landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                        landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"right_mouse"</span>                        new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        current_face<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    current_landmark <span class="token operator">=</span> shape_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    current_landmark<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_landmark<span class="token punctuation">)</span>  <span class="token comment"># 添加 landmark</span>            <span class="token keyword">if</span> wrong_face<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"drop image.."</span><span class="token punctuation">)</span>                shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>                shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>json_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shape_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> shape_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"face"</span><span class="token punctuation">:</span>  <span class="token comment"># 最后一个是face</span>                last_face <span class="token operator">=</span> shape_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>last_face<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"drop image.."</span><span class="token punctuation">)</span>                    shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>                    shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>json_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>last_face<span class="token punctuation">)</span>                last_face<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 人脸标记为 -1</span>                <span class="token comment"># 添加五个关键点</span>                landmark <span class="token operator">=</span> last_face<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 和最后一个id一致</span>                landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"left_eye"</span>                landmark<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                landmark<span class="token punctuation">[</span><span class="token string">"shape_type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"point"</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"right_eye"</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"nose"</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"left_mouse"</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>                landmark <span class="token operator">=</span> landmark<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                landmark<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"right_mouse"</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                last_landmark <span class="token operator">=</span> shape_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                last_landmark<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                new_shape_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>last_landmark<span class="token punctuation">)</span>            label_dict<span class="token punctuation">[</span><span class="token string">"shapes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_shape_list            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>label_dict<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dir_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"0-10"</span><span class="token punctuation">,</span> <span class="token string">"11-20"</span><span class="token punctuation">,</span> <span class="token string">"21-30"</span><span class="token punctuation">,</span> <span class="token string">"31-40"</span><span class="token punctuation">,</span> <span class="token string">"41-50"</span><span class="token punctuation">,</span> <span class="token string">"51-61"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> dir_path <span class="token keyword">in</span> dir_path_list<span class="token punctuation">:</span>        folder_dir_list <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> one_folder_dir <span class="token keyword">in</span> folder_dir_list<span class="token punctuation">:</span>            img_json_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> one_folder_dir<span class="token punctuation">)</span>            invalid_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"invalid"</span><span class="token punctuation">,</span> dir_path<span class="token punctuation">,</span> one_folder_dir<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>invalid_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>invalid_dir<span class="token punctuation">)</span>            process_one_folfer<span class="token punctuation">(</span>img_json_dir<span class="token punctuation">,</span> invalid_dir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrfd 和 labelme 标签相互转化</title>
      <link href="/article/scrfd-labelme-convert/"/>
      <url>/article/scrfd-labelme-convert/</url>
      
        <content type="html"><![CDATA[<h1 id="scrfd-和-labelme-标签相互转化"><a href="#scrfd-和-labelme-标签相互转化" class="headerlink" title="scrfd 和 labelme 标签相互转化"></a>scrfd 和 labelme 标签相互转化</h1><ul><li><p>scrfd 转 labelme</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> json<span class="token keyword">import</span> base64<span class="token keyword">import</span> os<span class="token keyword">import</span> tqdm<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">def</span> <span class="token function">read_all_content</span><span class="token punctuation">(</span>txt_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_content <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    file_name <span class="token operator">=</span> <span class="token boolean">None</span>    content_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    is_first <span class="token operator">=</span> <span class="token boolean">True</span>    fr <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>txt_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 逐行读取，滤除空格等</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> is_first<span class="token punctuation">:</span>                img_content<span class="token punctuation">[</span>file_name<span class="token punctuation">]</span> <span class="token operator">=</span> content_list<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                content_list<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>            file_name <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            is_first <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            content_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    img_content<span class="token punctuation">[</span>file_name<span class="token punctuation">]</span> <span class="token operator">=</span> content_list  <span class="token comment"># 最后一段</span>    <span class="token keyword">return</span> img_content<span class="token comment">## 0--Parade/0_Parade_marchingband_1_849.jpg 1024 1385</span><span class="token comment"># 449.00000 330.00000 571.00000 479.00000 488.90601 373.64301 0.00000 542.08899 376.44199 0.00000 515.03101 412.82999 0.00000 485.17401 425.89301 0.00000 538.35699 431.49100 0.00000</span><span class="token keyword">def</span> <span class="token function">generate_json</span><span class="token punctuation">(</span>img_info<span class="token punctuation">,</span> mark_info<span class="token punctuation">,</span> is_landmark<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> face_id    face_id <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process face count: "</span><span class="token punctuation">,</span> face_id<span class="token punctuation">)</span>    im_path<span class="token punctuation">,</span> im_h<span class="token punctuation">,</span> im_w <span class="token operator">=</span> img_info<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    str_json <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    face_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    landmark_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    flags_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> mark_info<span class="token punctuation">:</span>        lineArr <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        face_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> is_landmark <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            landmark_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            flags_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>lineArr<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> face_info <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>face_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        face_shape <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        face_shape<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"face"</span>        face_shape<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span> <span class="token operator">=</span> face_info        face_shape<span class="token punctuation">[</span><span class="token string">"group_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx        face_shape<span class="token punctuation">[</span><span class="token string">"shape_type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"rectangle"</span>        face_shape<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        shapes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>face_shape<span class="token punctuation">)</span>        <span class="token keyword">if</span> is_landmark <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> landmark<span class="token punctuation">,</span> flags <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>landmark_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> flags_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                landmark_shape <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                landmark_shape<span class="token punctuation">[</span><span class="token string">"label"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"landmark"</span>                landmark_shape<span class="token punctuation">[</span><span class="token string">"points"</span><span class="token punctuation">]</span> <span class="token operator">=</span> landmark                landmark_shape<span class="token punctuation">[</span><span class="token string">"group_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx                landmark_shape<span class="token punctuation">[</span><span class="token string">"shape_type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"point"</span>                landmark_shape<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> flags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    landmark_shape<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"-1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">elif</span> flags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    landmark_shape<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">elif</span> flags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    landmark_shape<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error: flags[0]: "</span><span class="token punctuation">,</span> flags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                shapes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>landmark_shape<span class="token punctuation">)</span>    str_json<span class="token punctuation">[</span><span class="token string">"version"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"5.0.1"</span>    str_json<span class="token punctuation">[</span><span class="token string">"flags"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"-1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span>    str_json<span class="token punctuation">[</span><span class="token string">"shapes"</span><span class="token punctuation">]</span> <span class="token operator">=</span> shapes    str_json<span class="token punctuation">[</span><span class="token string">"imagePath"</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_root<span class="token punctuation">,</span> im_path<span class="token punctuation">)</span>    im <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>str_json<span class="token punctuation">[</span><span class="token string">"imagePath"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    str_json<span class="token punctuation">[</span><span class="token string">"imageHeight"</span><span class="token punctuation">]</span> <span class="token operator">=</span> im<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    str_json<span class="token punctuation">[</span><span class="token string">"imageWidth"</span><span class="token punctuation">]</span> <span class="token operator">=</span> im<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    str_json<span class="token punctuation">[</span><span class="token string">"imageData"</span><span class="token punctuation">]</span> <span class="token operator">=</span> base64encode_img<span class="token punctuation">(</span>str_json<span class="token punctuation">[</span><span class="token string">"imagePath"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> str_json<span class="token keyword">def</span> <span class="token function">base64encode_img</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        imageData <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        imageData <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>imageData<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> imageData<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    is_train <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> is_train<span class="token punctuation">:</span>        txt_path <span class="token operator">=</span> <span class="token string">r"..\scrfd_label\train\labelv2.txt"</span>        img_root <span class="token operator">=</span> <span class="token string">r"..\WIDER_train\images"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        txt_path <span class="token operator">=</span> <span class="token string">r"..\scrfd_label\val\labelv2.txt"</span>        img_root <span class="token operator">=</span> <span class="token string">r"..\WIDER_val\images"</span>    face_id <span class="token operator">=</span> <span class="token number">0</span>    img_content <span class="token operator">=</span> read_all_content<span class="token punctuation">(</span>txt_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> img_info<span class="token punctuation">,</span> mark_info <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span>img_content<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gen json"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mark_info<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>img_info<span class="token punctuation">&#125;</span></span><span class="token string"> don't have face."</span></span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        str_json <span class="token operator">=</span> generate_json<span class="token punctuation">(</span>img_info<span class="token punctuation">,</span> mark_info<span class="token punctuation">,</span> is_train<span class="token punctuation">)</span>        jsonfile_name <span class="token operator">=</span> str_json<span class="token punctuation">[</span><span class="token string">"imagePath"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">)</span>        json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>str_json<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>jsonfile_name<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>labelme 转 scrfd</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dir_path_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"0-10"</span><span class="token punctuation">,</span> <span class="token string">"11-20"</span><span class="token punctuation">,</span> <span class="token string">"21-30"</span><span class="token punctuation">,</span> <span class="token string">"31-40"</span><span class="token punctuation">,</span> <span class="token string">"41-50"</span><span class="token punctuation">,</span> <span class="token string">"51-61"</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"scrfd_label.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> dir_path <span class="token keyword">in</span> dir_path_list<span class="token punctuation">:</span>            folder_dir_list <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> one_folder_dir <span class="token keyword">in</span> folder_dir_list<span class="token punctuation">:</span>                img_json_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> one_folder_dir<span class="token punctuation">)</span>                json_file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_json_dir<span class="token punctuation">)</span>                <span class="token keyword">for</span> json_file <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>json_file_list<span class="token punctuation">,</span> <span class="token string">"progress..."</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> json_file<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">not</span> json_file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    json_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_json_dir<span class="token punctuation">,</span> json_file<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>json_file <span class="token operator">==</span> <span class="token string">"0_Parade_Parade_0_805.json"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>json_file<span class="token punctuation">)</span>                    label_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    label_info_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    height <span class="token operator">=</span> label_dict<span class="token punctuation">[</span><span class="token string">"imageHeight"</span><span class="token punctuation">]</span>                    width <span class="token operator">=</span> label_dict<span class="token punctuation">[</span><span class="token string">"imageWidth"</span><span class="token punctuation">]</span>                    loc_info_list <span class="token operator">=</span> label_dict<span class="token punctuation">[</span><span class="token string">"shapes"</span><span class="token punctuation">]</span>                    line <span class="token operator">=</span> <span class="token string">"# "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>one_folder_dir<span class="token punctuation">,</span> json_file<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span>                    label_info_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    face_line <span class="token operator">=</span> <span class="token string">""</span>                    <span class="token keyword">for</span> loc_info <span class="token keyword">in</span> loc_info_list<span class="token punctuation">:</span>                        obj_name <span class="token operator">=</span> loc_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> obj_name <span class="token operator">==</span> <span class="token string">"face"</span><span class="token punctuation">:</span>                            loc <span class="token operator">=</span> loc_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"points"</span><span class="token punctuation">)</span>                            x0<span class="token punctuation">,</span> y0 <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 左上角点</span>                            x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 右下角点</span>                            face_line <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">format</span><span class="token punctuation">(</span>y0<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">format</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span>                            label_info_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>face_line<span class="token punctuation">)</span>                        <span class="token keyword">elif</span> <span class="token punctuation">(</span>obj_name <span class="token operator">==</span> <span class="token string">"left_eye"</span> <span class="token keyword">or</span> obj_name <span class="token operator">==</span> <span class="token string">"right_eye"</span> <span class="token keyword">or</span> obj_name <span class="token operator">==</span> <span class="token string">"nose"</span> <span class="token keyword">or</span> obj_name <span class="token operator">==</span> <span class="token string">"left_mouse"</span> <span class="token keyword">or</span> obj_name <span class="token operator">==</span> <span class="token string">"right_mouse"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            loc <span class="token operator">=</span> loc_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"points"</span><span class="token punctuation">)</span>                            x<span class="token punctuation">,</span> y <span class="token operator">=</span> loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                            flags <span class="token operator">=</span> loc_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"flags"</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> flags<span class="token punctuation">[</span><span class="token string">"-1"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                                flags <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                            <span class="token keyword">elif</span> flags<span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                                flags <span class="token operator">=</span> <span class="token number">0</span>                            <span class="token keyword">elif</span> flags<span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                                flags <span class="token operator">=</span> <span class="token number">1</span>                            label_info_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">format</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">format</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> <span class="token string">'.5f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> line <span class="token keyword">in</span> label_info_list<span class="token punctuation">:</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrfd 数据集</title>
      <link href="/article/scrfd-dataset/"/>
      <url>/article/scrfd-dataset/</url>
      
        <content type="html"><![CDATA[<h1 id="scrfd-数据集"><a href="#scrfd-数据集" class="headerlink" title="scrfd 数据集"></a>scrfd 数据集</h1><ul><li><p>标签格式</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 图片名称 图片宽 图片高x1, y1, x2, y2, kps_x1, kps_y1, flag1, kps_x2, kps_y2, flag2, kps_x3, kps_y3, flag3, kps_x4, kps_y4, flag4, kps_x5, kps_y5, flag5 x1, y1, x2, y2, kps_x1, kps_y1, flag1, kps_x2, kps_y2, flag2, kps_x3, kps_y3, flag3, kps_x4, kps_y4, flag4, kps_x5, kps_y5, flag5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>landmarks的flags说明</p><ul><li><p>-1：没有关键点，此时关键点的坐标也全为-1.00000 </p></li><li><p>0：有关键点，人脸清晰</p></li><li><p>1：有关键点，人脸模糊或侧脸</p></li></ul></li></ul><p>​        特别注意，在scrfd源代码里面读取标签时不能有空行存在</p><ul><li><p>根据widerface标志清洗后得到的有效人脸，进一步清洗scrfd标签文件，代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">def</span> <span class="token function">read_scrfd</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    sub_content_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>        content<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">:</span>            <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># im_name, width, height = line[2:].split()</span>                im_name <span class="token operator">=</span> line                sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_content_map<span class="token keyword">def</span> <span class="token function">read_wider_face</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    sub_content_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>        content<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">:</span>            <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> line<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                im_name <span class="token operator">=</span> line                <span class="token comment"># im_name, width, height = line[2:].split()</span>                sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_content_map<span class="token keyword">def</span> <span class="token function">is_valid_face</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key <span class="token keyword">not</span> <span class="token keyword">in</span> content<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> val<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    sub_content <span class="token operator">=</span> content<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> sub_content<span class="token punctuation">:</span>        line <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">save_content</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> centent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> centent<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>k<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> v<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment"># widerface_label_path = 'train.txt'</span><span class="token comment"># scrfd_label_path = 'scrfd_label/train/labelv2.txt'</span><span class="token comment"># clean_label_path = 'labelv2_train.txt'</span>widerface_label_path <span class="token operator">=</span> <span class="token string">'val.txt'</span>scrfd_label_path <span class="token operator">=</span> <span class="token string">'scrfd_label/val/labelv2.txt'</span>clean_label_path <span class="token operator">=</span> <span class="token string">'labelv2_val.txt'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run path: '</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    valid_wider_face_content <span class="token operator">=</span> read_wider_face<span class="token punctuation">(</span>widerface_label_path<span class="token punctuation">)</span>    scrfd_content <span class="token operator">=</span> read_scrfd<span class="token punctuation">(</span>scrfd_label_path<span class="token punctuation">)</span>    total_cnt <span class="token operator">=</span> <span class="token number">0</span>    invalid_cnt <span class="token operator">=</span> <span class="token number">0</span>    valid_content <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>scrfd_content<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        valid_content<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        m_name<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> v<span class="token punctuation">:</span>            ret <span class="token operator">=</span> is_valid_face<span class="token punctuation">(</span>m_name<span class="token punctuation">,</span> line<span class="token punctuation">,</span> valid_wider_face_content<span class="token punctuation">)</span>            <span class="token keyword">if</span> ret<span class="token punctuation">:</span>                valid_content<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                invalid_cnt <span class="token operator">+=</span> <span class="token number">1</span>            total_cnt <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'valid_cnt: '</span><span class="token punctuation">,</span> total_cnt <span class="token operator">-</span> invalid_cnt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'invalid_cnt: '</span><span class="token punctuation">,</span> invalid_cnt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'total_cnt: '</span><span class="token punctuation">,</span> total_cnt<span class="token punctuation">)</span>        save_content<span class="token punctuation">(</span>clean_label_path<span class="token punctuation">,</span> valid_content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="从scrfd数据里制作大头贴数据集"><a href="#从scrfd数据里制作大头贴数据集" class="headerlink" title="从scrfd数据里制作大头贴数据集"></a>从scrfd数据里制作大头贴数据集</h3><ul><li><p>这里简单的通过人脸面积来筛选，其实还应该加上扣取的大头贴里是否还包含其它人脸</p></li><li><p>对人脸的patch大小比较值得推敲，原先希望将四个方向的patch设为宽高的0~0.5倍数，实际测试发现不行，基本上都是抠太多了，也就是系数还是太大，未再进一步测试，沿用原有的在四个方向均随机扣取0～50个像素</p></li><li><p>数据集制作代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> shutil<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">read_scrfd</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    sub_content_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>        content<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">:</span>            <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">'end'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># im_name, width, height = line[2:].split()</span>                im_name <span class="token operator">=</span> line                sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_content_map<span class="token keyword">def</span> <span class="token function">split_content</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    totoal_line <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    sub_content_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> totoal_line<span class="token punctuation">:</span>        im_name <span class="token operator">=</span> content<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        bbox_num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bbox_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            bbox_num <span class="token operator">=</span> <span class="token number">1</span>        bbox_info <span class="token operator">=</span> content<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>idx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> bbox_num<span class="token punctuation">]</span>        idx <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> bbox_num        sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span> <span class="token operator">=</span> bbox_info    <span class="token keyword">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_content_map<span class="token keyword">def</span> <span class="token function">read_label_info</span><span class="token punctuation">(</span>labelfile<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>labelfile<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>        <span class="token keyword">return</span> split_content<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">compute_iou</span><span class="token punctuation">(</span>rec1<span class="token punctuation">,</span> rec2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    computing IoU    :param rec1: (y0, x0, y1, x1), which reflects            (top, left, bottom, right)    :param rec2: (y0, x0, y1, x1)    :return: scala value of IoU    """</span>    <span class="token comment"># computing area of each rectangles</span>    S_rec1 <span class="token operator">=</span> <span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> rec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> rec1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    S_rec2 <span class="token operator">=</span> <span class="token punctuation">(</span>rec2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> rec2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rec2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> rec2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># computing the sum_area</span>    sum_area <span class="token operator">=</span> S_rec1 <span class="token operator">+</span> S_rec2    <span class="token comment"># find the each edge of intersect rectangle</span>    left_line <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rec2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    right_line <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rec2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    top_line <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rec2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    bottom_line <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rec2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># judge if there is an intersect</span>    <span class="token keyword">if</span> left_line <span class="token operator">>=</span> right_line <span class="token keyword">or</span> top_line <span class="token operator">>=</span> bottom_line<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        intersect <span class="token operator">=</span> <span class="token punctuation">(</span>right_line <span class="token operator">-</span> left_line<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bottom_line <span class="token operator">-</span> top_line<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>intersect <span class="token operator">/</span> <span class="token punctuation">(</span>sum_area <span class="token operator">-</span> intersect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token keyword">def</span> <span class="token function">is_only_one_face</span><span class="token punctuation">(</span>face<span class="token punctuation">,</span> patch<span class="token punctuation">,</span> face_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> face_list<span class="token punctuation">:</span>        line <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> face<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>compute_iou<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">save_label_to_txt</span><span class="token punctuation">(</span>sava_file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>sava_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> content<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>k<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run path: '</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># img_dir = '/Users/huzh/Documents/dataset/face/wider-face/original'</span>    img_dir <span class="token operator">=</span> <span class="token string">'/Users/huzh/Documents/dataset/face/wider-face/gaoyun-clean-train-2023-02-01'</span>    is_train <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># is_train = False</span>    <span class="token keyword">if</span> is_train<span class="token punctuation">:</span>        label_path <span class="token operator">=</span> <span class="token string">'file/train-clean-2023-02-01.txt'</span>        sava_file <span class="token operator">=</span> <span class="token string">'file/train-clean-2023-02-01-bigface.txt'</span>        save_dir <span class="token operator">=</span> <span class="token string">'file/DTT_train'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        label_path <span class="token operator">=</span> <span class="token string">'file/val-clean-2023-02-01.txt'</span>        sava_file <span class="token operator">=</span> <span class="token string">'file/val-clean-2023-02-01-bigface.txt'</span>        save_dir <span class="token operator">=</span> <span class="token string">'file/DTT_val'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>save_dir<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>save_dir<span class="token punctuation">)</span>    scrfd_content <span class="token operator">=</span> read_scrfd<span class="token punctuation">(</span>label_path<span class="token punctuation">)</span>    sigal_face <span class="token operator">=</span> <span class="token number">0</span>    total_cnt <span class="token operator">=</span> <span class="token number">0</span>    valid_cnt <span class="token operator">=</span> <span class="token number">0</span>    valid_content <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>scrfd_content<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            sigal_face <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 挑选最大人脸</span>        max_face_line <span class="token operator">=</span> <span class="token number">0</span>        max_face_area <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> v<span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            line <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            face_area <span class="token operator">=</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> face_area <span class="token operator">></span> max_face_area<span class="token punctuation">:</span>                max_face_area <span class="token operator">=</span> face_area                max_face_line <span class="token operator">=</span> line        <span class="token comment"># 过滤小面积人脸</span>        <span class="token keyword">if</span> max_face_area <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment"># 坐标为负</span>        <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> max_face_line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> max_face_line<span class="token punctuation">[</span>                <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        dir_name<span class="token punctuation">,</span> im_name <span class="token operator">=</span> k<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        dir_name <span class="token operator">=</span> dir_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        im_name <span class="token operator">=</span> im_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'process image: '</span><span class="token punctuation">,</span> im_name<span class="token punctuation">)</span>        <span class="token keyword">if</span> is_train<span class="token punctuation">:</span>            im <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_dir<span class="token punctuation">,</span> dir_name<span class="token punctuation">,</span> im_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_dir<span class="token punctuation">,</span> dir_name<span class="token punctuation">,</span> im_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> _ <span class="token operator">=</span> im<span class="token punctuation">.</span>shape        <span class="token comment"># 坐标超过宽高</span>        <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> width <span class="token keyword">or</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> height <span class="token keyword">or</span> max_face_line<span class="token punctuation">[</span>                <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> width <span class="token keyword">or</span> max_face_line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment"># cut face</span>        patch <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>            expand <span class="token operator">=</span> <span class="token number">50</span>            left_expand <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span>expand<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            height_expand <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span>expand<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            right_expand <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> expand<span class="token punctuation">)</span>            bottom_expand <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> expand<span class="token punctuation">)</span>            patch <span class="token operator">=</span> patch <span class="token operator">+</span> <span class="token punctuation">(</span>left_expand<span class="token punctuation">,</span> height_expand<span class="token punctuation">,</span> right_expand<span class="token punctuation">,</span> bottom_expand<span class="token punctuation">)</span>            patch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> patch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            patch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> patch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token operator">=</span>width<span class="token punctuation">)</span>            patch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> patch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token operator">=</span>height<span class="token punctuation">)</span>            <span class="token comment"># 实际的expand</span>            left_expand <span class="token operator">=</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> patch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            height_expand <span class="token operator">=</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> patch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            left_expand <span class="token operator">=</span> <span class="token number">0</span>            height_expand <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># patch 里只包含一个人脸</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> is_only_one_face<span class="token punctuation">(</span>max_face_line<span class="token punctuation">,</span> patch<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        valid_cnt <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> is_train<span class="token punctuation">:</span>            bbox_info <span class="token operator">=</span> <span class="token punctuation">[</span>                left_expand<span class="token punctuation">,</span>                height_expand<span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> left_expand<span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> height_expand<span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                left_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                height_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                left_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                height_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                left_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                height_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                left_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                height_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                left_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                height_expand <span class="token keyword">if</span> max_face_line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            bbox_info <span class="token operator">=</span> <span class="token punctuation">[</span>                left_expand<span class="token punctuation">,</span>                height_expand<span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> left_expand<span class="token punctuation">,</span>                max_face_line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> max_face_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> height_expand<span class="token punctuation">,</span>            <span class="token punctuation">]</span>        face <span class="token operator">=</span> im<span class="token punctuation">[</span>patch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>patch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> patch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>patch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment"># for debug</span>        <span class="token comment"># face = cv.rectangle(face, (bbox_info[0], bbox_info[1]),</span>        <span class="token comment">#                     (bbox_info[2], bbox_info[3]), (0, 0, 255), 2)</span>        <span class="token comment"># if bbox_info[4] >= 0:</span>        <span class="token comment">#     face = cv.circle(face, (bbox_info[4], bbox_info[5]), 2, (0, 255, 0), -1)</span>        <span class="token comment">#     face = cv.circle(face, (bbox_info[7], bbox_info[8]), 2, (0, 255, 0), -1)</span>        <span class="token comment">#     face = cv.circle(face, (bbox_info[10], bbox_info[11]), 2, (0, 255, 0), -1)</span>        <span class="token comment">#     face = cv.circle(face, (bbox_info[13], bbox_info[14]), 2, (0, 255, 0), -1)</span>        <span class="token comment">#     face = cv.circle(face, (bbox_info[16], bbox_info[17]), 2, (0, 255, 0), -1)</span>        save_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>im_name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">-4]</span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span></span><span class="token string">.jpg'</span></span><span class="token punctuation">)</span>        cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>save_name<span class="token punctuation">,</span> face<span class="token punctuation">)</span>        bbox_info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> bbox_info<span class="token punctuation">]</span>        bbox_info_str <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>bbox_info<span class="token punctuation">)</span>        h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> _ <span class="token operator">=</span> face<span class="token punctuation">.</span>shape        bigface_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'# </span><span class="token interpolation"><span class="token punctuation">&#123;</span>save_name<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>w<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>h<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>        valid_content<span class="token punctuation">[</span>bigface_name<span class="token punctuation">]</span> <span class="token operator">=</span> bbox_info_str        total_cnt <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>valid_cnt<span class="token punctuation">,</span> total_cnt<span class="token punctuation">)</span>    save_label_to_txt<span class="token punctuation">(</span>sava_file<span class="token punctuation">,</span> valid_content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wider-face 数据集</title>
      <link href="/article/wider-face/"/>
      <url>/article/wider-face/</url>
      
        <content type="html"><![CDATA[<h1 id="wider-face-数据集"><a href="#wider-face-数据集" class="headerlink" title="wider-face 数据集"></a>wider-face 数据集</h1><ul><li><p><a href="http://shuoyang1213.me/WIDERFACE/index.html">官网地址</a></p></li><li><p><a href="https://blog.csdn.net/qq_37541097/article/details/118961546">第三方说明地址</a></p></li><li><p>总共有 <strong>32203</strong> 张图片（训练集12880、验证集3226、测试集16097），<strong>393,703</strong> 个人脸</p></li><li><p>总共有61个类别，每个类别里面随机选取 40%、10%、50% 作为训练集、验证集、测试集</p></li><li><p>wider_face_split 为原始标签、scrfd_label 为 scrfd修改后的标签（对格式进行了修改，训练集加上了landmarks）</p></li><li><p>训练集中没有人脸目标的样本：</p><pre class="line-numbers language-none"><code class="language-none"># 无效图片0--Parade&#x2F;0_Parade_Parade_0_452.jpg2--Demonstration&#x2F;2_Demonstration_Political_Rally_2_444.jpg39--Ice_Skating&#x2F;39_Ice_Skating_iceskiing_39_380.jpg46--Jockey&#x2F;46_Jockey_Jockey_46_576.jpg# 部分人脸无效54--Rescue&#x2F;54_Rescue_rescuepeople_54_29.jpg7--Cheering&#x2F;7_Cheering_Cheering_7_17.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证集中没有人脸目标的样本：</p><pre class="line-numbers language-none"><code class="language-none">0--Parade&#x2F;0_Parade_Parade_0_275.jpg7--Cheering&#x2F;7_Cheering_Cheering_7_426.jpg37--Soccer&#x2F;37_Soccer_soccer_ball_37_281.jpg50--Celebration_Or_Party&#x2F;50_Celebration_Or_Party_houseparty_50_715.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>标签说明</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">File nameNumber of bounding boxx1, y1, w, h, blur, expression, illumination, invalid, occlusion, pose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际抠出来看发现只有 blur 和 occlusion 比较准确，通过这两项可以过滤掉2&#x2F;3的无效人脸</p></li><li><p>人脸清洗代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">def</span> <span class="token function">split_content</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    totoal_line <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    sub_content_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> totoal_line<span class="token punctuation">:</span>        im_name <span class="token operator">=</span> content<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        bbox_num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bbox_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            bbox_num <span class="token operator">=</span> <span class="token number">1</span>        bbox_info <span class="token operator">=</span> content<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>idx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> bbox_num<span class="token punctuation">]</span>        idx <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> bbox_num        sub_content_map<span class="token punctuation">[</span>im_name<span class="token punctuation">]</span> <span class="token operator">=</span> bbox_info    <span class="token keyword">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    <span class="token keyword">return</span> sub_content_map<span class="token keyword">def</span> <span class="token function">read_label_info</span><span class="token punctuation">(</span>labelfile<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>labelfile<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>        <span class="token keyword">return</span> split_content<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filt_face</span><span class="token punctuation">(</span>label_info<span class="token punctuation">,</span> image_path<span class="token punctuation">,</span> fiter_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    invalid_im_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    valid_img_face_map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    total_face_num <span class="token operator">=</span> <span class="token number">0</span>    valid_face_num <span class="token operator">=</span> <span class="token number">0</span>    small_face_cnt <span class="token operator">=</span> <span class="token number">0</span>    invalid_ratio_cnt <span class="token operator">=</span> <span class="token number">0</span>    inval_face_cnt <span class="token operator">=</span> <span class="token number">0</span>    heavy_blur <span class="token operator">=</span> <span class="token number">0</span>    heavy_occlusion <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>label_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'process image: '</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>        im <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        dir_name<span class="token punctuation">,</span> im_name <span class="token operator">=</span> k<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        save_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>fiter_dir<span class="token punctuation">,</span> dir_name<span class="token punctuation">)</span>        idx <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 当前图片中的第几个人脸</span>        valid_face_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> origin_face_info <span class="token keyword">in</span> v<span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            face_info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> origin_face_info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token comment"># 宽高为0</span>            <span class="token keyword">if</span> face_info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> face_info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                invalid_im_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token comment"># 根据规则过滤一些不要的人脸</span>            <span class="token comment"># # 面积过滤</span>            <span class="token comment"># if face_info[2] * face_info[3] &lt; 100:</span>            <span class="token comment">#     small_face_cnt += 1</span>            <span class="token comment">#     continue</span>            <span class="token comment"># 宽高比过滤</span>            <span class="token keyword">if</span> face_info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> face_info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0.3</span><span class="token punctuation">:</span>                invalid_ratio_cnt <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>                            <span class="token comment"># invalid 过滤</span>            <span class="token keyword">if</span> face_info<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                inval_face_cnt <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token comment"># 过滤严重遮挡</span>            <span class="token keyword">if</span> face_info<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                heavy_occlusion <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token comment"># 过滤严重模糊</span>            <span class="token keyword">if</span> face_info<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                heavy_blur <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token comment"># 将对应类别人脸保存起来</span>            <span class="token comment"># if not os.path.exists(save_dir):</span>            <span class="token comment">#     os.makedirs(save_dir)</span>            <span class="token comment"># cut face</span>            <span class="token comment"># face = im[face_info[1]:face_info[1] + face_info[3], face_info[0]:face_info[0] + face_info[2]]</span>            <span class="token comment"># # blur</span>            <span class="token comment"># if face_info[4] == 0:</span>            <span class="token comment">#     clear_path = os.path.join(save_dir, 'blur', 'clear')</span>            <span class="token comment">#     if not os.path.exists(clear_path):</span>            <span class="token comment">#         os.makedirs(clear_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(clear_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[4] == 1:</span>            <span class="token comment">#     normal_blur_path = os.path.join(save_dir, 'blur', 'normal_blur')</span>            <span class="token comment">#     if not os.path.exists(normal_blur_path):</span>            <span class="token comment">#         os.makedirs(normal_blur_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(normal_blur_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[4] == 2:</span>            <span class="token comment">#     heavy_blur_path = os.path.join(save_dir, 'blur', 'heavy_blur')</span>            <span class="token comment">#     if not os.path.exists(heavy_blur_path):</span>            <span class="token comment">#         os.makedirs(heavy_blur_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(heavy_blur_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># # expression</span>            <span class="token comment"># expression_dir = os.path.join(save_dir, 'expression')</span>            <span class="token comment"># if not os.path.exists(expression_dir):</span>            <span class="token comment">#     os.makedirs(expression_dir)</span>            <span class="token comment"># if face_info[5] == 0:</span>            <span class="token comment">#     typical_expression_path = os.path.join(save_dir, 'expression', 'typical')</span>            <span class="token comment">#     if not os.path.exists(typical_expression_path):</span>            <span class="token comment">#         os.makedirs(typical_expression_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(typical_expression_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[5] == 1:</span>            <span class="token comment">#     atypical_expression_path = os.path.join(save_dir, 'expression', 'atypical')</span>            <span class="token comment">#     if not os.path.exists(atypical_expression_path):</span>            <span class="token comment">#         os.makedirs(atypical_expression_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(atypical_expression_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># # illumination</span>            <span class="token comment"># illumination_dir = os.path.join(save_dir, 'illumination')</span>            <span class="token comment"># if not os.path.exists(illumination_dir):</span>            <span class="token comment">#     os.makedirs(illumination_dir)</span>            <span class="token comment"># if face_info[6] == 0:</span>            <span class="token comment">#     normal_illumination_path = os.path.join(save_dir, 'illumination', 'normal')</span>            <span class="token comment">#     if not os.path.exists(normal_illumination_path):</span>            <span class="token comment">#         os.makedirs(normal_illumination_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(normal_illumination_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[6] == 1:</span>            <span class="token comment">#     extreme_illumination_path = os.path.join(save_dir, 'illumination', 'extreme')</span>            <span class="token comment">#     if not os.path.exists(extreme_illumination_path):</span>            <span class="token comment">#         os.makedirs(extreme_illumination_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(extreme_illumination_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># # invalid</span>            <span class="token comment"># if face_info[7] == 0:</span>            <span class="token comment">#     false_invalid_path = os.path.join(save_dir, 'invalid', 'false')</span>            <span class="token comment">#     if not os.path.exists(false_invalid_path):</span>            <span class="token comment">#         os.makedirs(false_invalid_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(false_invalid_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[7] == 1:</span>            <span class="token comment">#     true_invalid_path = os.path.join(save_dir, 'invalid', 'true')</span>            <span class="token comment">#     if not os.path.exists(true_invalid_path):</span>            <span class="token comment">#         os.makedirs(true_invalid_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(true_invalid_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># # occlusion</span>            <span class="token comment"># if face_info[8] == 0:</span>            <span class="token comment">#     no_occlusion__path = os.path.join(save_dir, 'occlusion', 'no')</span>            <span class="token comment">#     if not os.path.exists(no_occlusion__path):</span>            <span class="token comment">#         os.makedirs(no_occlusion__path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(no_occlusion__path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[8] == 1:</span>            <span class="token comment">#     partial_occlusion__path = os.path.join(save_dir, 'occlusion', 'partial')</span>            <span class="token comment">#     if not os.path.exists(partial_occlusion__path):</span>            <span class="token comment">#         os.makedirs(partial_occlusion__path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(partial_occlusion__path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[8] == 2:</span>            <span class="token comment">#     heavy_occlusion__path = os.path.join(save_dir, 'occlusion', 'heavy')</span>            <span class="token comment">#     if not os.path.exists(heavy_occlusion__path):</span>            <span class="token comment">#         os.makedirs(heavy_occlusion__path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(heavy_occlusion__path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># # pose</span>            <span class="token comment"># if face_info[9] == 0:</span>            <span class="token comment">#     typical_pose_path = os.path.join(save_dir, 'pose', 'typical')</span>            <span class="token comment">#     if not os.path.exists(typical_pose_path):</span>            <span class="token comment">#         os.makedirs(typical_pose_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(typical_pose_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            <span class="token comment"># elif face_info[9] == 1:</span>            <span class="token comment">#     atypical_pose_path = os.path.join(save_dir, 'pose', 'atypical')</span>            <span class="token comment">#     if not os.path.exists(atypical_pose_path):</span>            <span class="token comment">#         os.makedirs(atypical_pose_path)</span>            <span class="token comment">#     cv.imwrite(os.path.join(atypical_pose_path, f'&#123;im_name[:-4]&#125;-&#123;idx&#125;.jpg'), face)</span>            valid_face_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>face_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>face_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            valid_face_num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>valid_face_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            invalid_im_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>  <span class="token comment"># 没有人脸</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            valid_img_face_map<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> valid_face_list        total_face_num <span class="token operator">+=</span> idx    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'valid_face_num: '</span><span class="token punctuation">,</span> valid_face_num<span class="token punctuation">,</span> <span class="token string">'total_face_num: '</span><span class="token punctuation">,</span> total_face_num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'small_face_cnt: '</span><span class="token punctuation">,</span> small_face_cnt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'invalid_ratio_cnt: '</span><span class="token punctuation">,</span> invalid_ratio_cnt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inval_face_cnt: '</span><span class="token punctuation">,</span> inval_face_cnt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'heavy_blur: '</span><span class="token punctuation">,</span> heavy_blur<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'heavy_occlusion: '</span><span class="token punctuation">,</span> heavy_occlusion<span class="token punctuation">)</span>        <span class="token keyword">return</span> valid_img_face_map<span class="token keyword">def</span> <span class="token function">save_label</span><span class="token punctuation">(</span>save_name<span class="token punctuation">,</span> img_face_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> img_face_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>k<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> v<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run path: '</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># label_info = read_label_info('wider_face_split/wider_face_train_bbx_gt.txt')</span>    <span class="token comment"># img_face_map = filt_face(label_info, 'WIDER_train/images', 'fiter_dir')</span>    <span class="token comment"># save_label('train.txt', img_face_map)</span>    label_info <span class="token operator">=</span> read_label_info<span class="token punctuation">(</span><span class="token string">'wider_face_split/wider_face_val_bbx_gt.txt'</span><span class="token punctuation">)</span>    img_face_map <span class="token operator">=</span> filt_face<span class="token punctuation">(</span>label_info<span class="token punctuation">,</span> <span class="token string">'WIDER_val/images'</span><span class="token punctuation">,</span> <span class="token string">'fiter_dir'</span><span class="token punctuation">)</span>    save_label<span class="token punctuation">(</span><span class="token string">'val.txt'</span><span class="token punctuation">,</span> img_face_map<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kalman</title>
      <link href="/article/kalman/"/>
      <url>/article/kalman/</url>
      
        <content type="html"><![CDATA[<h1 id="卡尔曼滤波算法详解"><a href="#卡尔曼滤波算法详解" class="headerlink" title="卡尔曼滤波算法详解"></a>卡尔曼滤波算法详解</h1><ul><li><p>OpenCV 源码详解</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"precomp.hpp"</span></span><span class="token keyword">namespace</span> cv<span class="token punctuation">&#123;</span><span class="token class-name">KalmanFilter</span><span class="token double-colon punctuation">::</span><span class="token function">KalmanFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">KalmanFilter</span><span class="token double-colon punctuation">::</span><span class="token function">KalmanFilter</span><span class="token punctuation">(</span><span class="token keyword">int</span> dynamParams<span class="token punctuation">,</span> <span class="token keyword">int</span> measureParams<span class="token punctuation">,</span> <span class="token keyword">int</span> controlParams<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span>dynamParams<span class="token punctuation">,</span> measureParams<span class="token punctuation">,</span> controlParams<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">KalmanFilter</span><span class="token double-colon punctuation">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> DP<span class="token punctuation">,</span> <span class="token keyword">int</span> MP<span class="token punctuation">,</span> <span class="token keyword">int</span> CP<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">CV_Assert</span><span class="token punctuation">(</span> DP <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> MP <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CV_Assert</span><span class="token punctuation">(</span> type <span class="token operator">==</span> CV_32F <span class="token operator">||</span> type <span class="token operator">==</span> CV_64F <span class="token punctuation">)</span><span class="token punctuation">;</span>    CP <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>CP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    statePre <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    statePost <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    transitionMatrix <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">eye</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    processNoiseCov <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">eye</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    measurementMatrix <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>MP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    measurementNoiseCov <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">eye</span><span class="token punctuation">(</span>MP<span class="token punctuation">,</span> MP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    errorCovPre <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    errorCovPost <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    gain <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> MP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> CP <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>        controlMatrix <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> CP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        controlMatrix<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp1<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>DP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp3<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MP<span class="token punctuation">,</span> MP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp4<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MP<span class="token punctuation">,</span> DP<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp5<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MP<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> <span class="token class-name">KalmanFilter</span><span class="token double-colon punctuation">::</span><span class="token function">predict</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> control<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">CV_INSTRUMENT_REGION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// update the state: x'(k) = A*x(k)</span>    statePre <span class="token operator">=</span> transitionMatrix<span class="token operator">*</span>statePost<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>control<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token comment">// x'(k) = x'(k) + B*u(k)</span>        statePre <span class="token operator">+=</span> controlMatrix<span class="token operator">*</span>control<span class="token punctuation">;</span>    <span class="token comment">// update error covariance matrices: temp1 = A*P(k)</span>    temp1 <span class="token operator">=</span> transitionMatrix<span class="token operator">*</span>errorCovPost<span class="token punctuation">;</span>    <span class="token comment">// P'(k) = temp1*At + Q</span>    <span class="token function">gemm</span><span class="token punctuation">(</span>temp1<span class="token punctuation">,</span> transitionMatrix<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> processNoiseCov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> errorCovPre<span class="token punctuation">,</span> GEMM_2_T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// handle the case when there will be no measurement before the next predict.</span>    statePre<span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>statePost<span class="token punctuation">)</span><span class="token punctuation">;</span>    errorCovPre<span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>errorCovPost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> statePre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> <span class="token class-name">KalmanFilter</span><span class="token double-colon punctuation">::</span><span class="token function">correct</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mat<span class="token operator">&amp;</span> measurement<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">CV_INSTRUMENT_REGION</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// temp2 = H*P'(k)</span>    temp2 <span class="token operator">=</span> measurementMatrix <span class="token operator">*</span> errorCovPre<span class="token punctuation">;</span>    <span class="token comment">// temp3 = temp2*Ht + R</span>    <span class="token function">gemm</span><span class="token punctuation">(</span>temp2<span class="token punctuation">,</span> measurementMatrix<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> measurementNoiseCov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> temp3<span class="token punctuation">,</span> GEMM_2_T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// temp4 = inv(temp3)*temp2 = Kt(k)</span>    <span class="token function">solve</span><span class="token punctuation">(</span>temp3<span class="token punctuation">,</span> temp2<span class="token punctuation">,</span> temp4<span class="token punctuation">,</span> DECOMP_SVD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// K(k)</span>    gain <span class="token operator">=</span> temp4<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// temp5 = z(k) - H*x'(k)</span>    temp5 <span class="token operator">=</span> measurement <span class="token operator">-</span> measurementMatrix<span class="token operator">*</span>statePre<span class="token punctuation">;</span>    <span class="token comment">// x(k) = x'(k) + K(k)*temp5</span>    statePost <span class="token operator">=</span> statePre <span class="token operator">+</span> gain<span class="token operator">*</span>temp5<span class="token punctuation">;</span>    <span class="token comment">// P(k) = P'(k) - K(k)*temp2</span>    errorCovPost <span class="token operator">=</span> errorCovPre <span class="token operator">-</span> gain<span class="token operator">*</span>temp2<span class="token punctuation">;</span>    <span class="token keyword">return</span> statePost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python-代码"><a href="#Python-代码" class="headerlink" title="Python 代码"></a>Python 代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token triple-quoted-string string">''' Description  :  Version      : 1.0 Author       : huzhenhong Date         : 2022-12-19 14:37:44 LastEditors  : huzhenhong LastEditTime : 2022-12-20 10:59:12 FilePath     : \\tracker\\tracker\\kalman_tracker.py Copyright (C) 2022 huzhenhong. All rights reserved.'''</span><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">KalmanTracker</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dynam_params<span class="token punctuation">,</span> measure_params<span class="token punctuation">,</span> control_params<span class="token punctuation">,</span> measurement<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> dynam_params <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> measure_params <span class="token operator">></span> <span class="token number">0</span>        <span class="token keyword">assert</span> dtype <span class="token operator">==</span> np<span class="token punctuation">.</span>float32 <span class="token keyword">or</span> dtype <span class="token operator">==</span> np<span class="token punctuation">.</span>float64        self<span class="token punctuation">.</span>__dynam_params <span class="token operator">=</span> dynam_params        self<span class="token punctuation">.</span>__measure_params <span class="token operator">=</span> measure_params        self<span class="token punctuation">.</span>__control_params <span class="token operator">=</span> control_params <span class="token keyword">if</span> control_params <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>__dtype <span class="token operator">=</span> dtype        self<span class="token punctuation">.</span>__kf <span class="token operator">=</span> cv<span class="token punctuation">.</span>KalmanFilter<span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> measure_params<span class="token punctuation">,</span> control_params<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CV_32F <span class="token keyword">if</span> dtype <span class="token operator">==</span> np<span class="token punctuation">.</span>float32 <span class="token keyword">else</span> cv<span class="token punctuation">.</span>CV_64F<span class="token punctuation">)</span>        <span class="token comment"># KalmanFilter 内部自己创建的矩阵无法部分修改，不知为何，下面直接进行替换</span>        <span class="token comment"># 预测用</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>transitionMatrix <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> dynam_params<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>processNoiseCov <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> dynam_params<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>errorCovPost <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> dynam_params<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__control_params <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>controlMatrix <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> control_params<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        <span class="token comment"># 修正用</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>measurementMatrix <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>measure_params<span class="token punctuation">,</span> dynam_params<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>measurementNoiseCov <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>measure_params<span class="token punctuation">,</span> measure_params<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePre <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>errorCovPre <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>dynam_params<span class="token punctuation">,</span> dynam_params<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">)</span>        <span class="token comment"># 手动初始化</span>        <span class="token comment"># 状态转移矩阵添加观测变量</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__measure_params<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>transitionMatrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__measure_params <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>measurementMatrix <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>measure_params<span class="token punctuation">,</span> dynam_params<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>  <span class="token comment"># 默认全是0，必须手动初始化</span>        self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">20</span>        self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">160</span>        self<span class="token punctuation">.</span>__set_state_post<span class="token punctuation">(</span>measurement<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__set_error_cov_post<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__set_state_post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> measurement<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__dynam_params <span class="token operator">-</span> self<span class="token punctuation">.</span>__measure_params<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> measurement<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__set_error_cov_post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        h <span class="token operator">=</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        std <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> h<span class="token punctuation">,</span>            <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> h<span class="token punctuation">,</span>            <span class="token number">1e-2</span><span class="token punctuation">,</span>            <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> h<span class="token punctuation">,</span>            <span class="token number">10</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">*</span> h<span class="token punctuation">,</span>            <span class="token number">10</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">*</span> h<span class="token punctuation">,</span>            <span class="token number">1e-5</span><span class="token punctuation">,</span>            <span class="token number">10</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">*</span> h<span class="token punctuation">,</span>        <span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>errorCovPost <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>__dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 对角线上为方差，反对角线上为协方差</span>    <span class="token keyword">def</span> <span class="token function">__set_process_noise_cov</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        std_pos <span class="token operator">=</span> <span class="token punctuation">[</span>            self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token number">1e-2</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        std_vel <span class="token operator">=</span> <span class="token punctuation">[</span>            self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token number">1e-5</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>__std_weight_velocity <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>processNoiseCov <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>r_<span class="token punctuation">[</span>std_pos<span class="token punctuation">,</span> std_vel<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>__dtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__set_measurement_noise_cov</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        std <span class="token operator">=</span> <span class="token punctuation">[</span>            self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token number">1e-1</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>__std_weight_position <span class="token operator">*</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>statePre<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>measurementNoiseCov <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>std<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>__dtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> control<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__set_process_noise_cov<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__control_params <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>control<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> measurement<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__set_measurement_noise_cov<span class="token punctuation">(</span><span class="token punctuation">)</span>        measurement <span class="token operator">=</span> measurement<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dtype<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__kf<span class="token punctuation">.</span>correct<span class="token punctuation">(</span>measurement<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kf<span class="token punctuation">.</span>statePost<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token triple-quoted-string string">''' Description  :  Version      : 1.0 Author       : huzhenhong Date         : 2022-12-19 13:53:58 LastEditors  : huzhenhong LastEditTime : 2022-12-20 10:59:38 FilePath     : \\tracker\\test.py Copyright (C) 2022 huzhenhong. All rights reserved.'''</span><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tracker<span class="token punctuation">.</span>kalman_tracker <span class="token keyword">import</span> KalmanTrackerdraw_frame <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment"># 初始化测量坐标和鼠标运动预测的数组</span>last_measurement <span class="token operator">=</span> current_measurement <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>last_prediction <span class="token operator">=</span> current_prediction <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>frame_cnt <span class="token operator">=</span> <span class="token number">0</span>kalman <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">mousemove</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> draw_frame<span class="token punctuation">,</span> current_measurement<span class="token punctuation">,</span> measurements<span class="token punctuation">,</span> last_measurement<span class="token punctuation">,</span> current_prediction<span class="token punctuation">,</span> last_prediction<span class="token punctuation">,</span> frame_cnt<span class="token punctuation">,</span> kalman    frame_cnt <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> frame_cnt <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> frame_cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> kalman <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            kalman <span class="token operator">=</span> KalmanTracker<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            last_prediction <span class="token operator">=</span> current_prediction  <span class="token comment"># 把当前预测存储为上一次预测</span>            last_measurement <span class="token operator">=</span> current_measurement  <span class="token comment"># 把当前测量存储为上一次测量</span>            current_prediction <span class="token operator">=</span> kalman<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 计算卡尔曼预测值，作为当前预测</span>            cpx<span class="token punctuation">,</span> cpy<span class="token punctuation">,</span> cph<span class="token punctuation">,</span> cpw <span class="token operator">=</span> current_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_prediction<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_prediction<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_prediction<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment"># 当前预测坐标</span>            cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>draw_frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>cpx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>cpx <span class="token operator">+</span> cpw<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cpy <span class="token operator">+</span> cph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cpx, cpy, cph, cpw: "</span><span class="token punctuation">,</span> cpx<span class="token punctuation">,</span> cpy<span class="token punctuation">,</span> cph<span class="token punctuation">,</span> cpw<span class="token punctuation">)</span>            <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>                <span class="token comment"># 生成 bbox</span>                h <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>                w <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>                current_measurement <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                cmx<span class="token punctuation">,</span> cmy<span class="token punctuation">,</span> cmh<span class="token punctuation">,</span> cmw <span class="token operator">=</span> current_measurement<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_measurement<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_measurement<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current_measurement<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment"># 当前测量坐标</span>                cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>draw_frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>cmx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cmy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>cmx <span class="token operator">+</span> cmw<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cmy <span class="token operator">+</span> cmh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cmx, cmy, cmh, cmw: "</span><span class="token punctuation">,</span> cmx<span class="token punctuation">,</span> cmy<span class="token punctuation">,</span> cmh<span class="token punctuation">,</span> cmw<span class="token punctuation">)</span>                correct_result <span class="token operator">=</span> kalman<span class="token punctuation">.</span>update<span class="token punctuation">(</span>current_measurement<span class="token punctuation">)</span>                crx<span class="token punctuation">,</span> cry<span class="token punctuation">,</span> crh<span class="token punctuation">,</span> crw <span class="token operator">=</span> correct_result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> correct_result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> correct_result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> correct_result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>draw_frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>crx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>crx <span class="token operator">+</span> crw<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cry <span class="token operator">+</span> crh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"crx, cry, crh, crw: "</span><span class="token punctuation">,</span> crx<span class="token punctuation">,</span> cry<span class="token punctuation">,</span> crh<span class="token punctuation">,</span> crw<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"current_prediction: "</span><span class="token punctuation">,</span> current_prediction<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"correct_result    : "</span><span class="token punctuation">,</span> correct_result<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cv<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">"kalman_tracker"</span><span class="token punctuation">)</span>    cv<span class="token punctuation">.</span>setMouseCallback<span class="token punctuation">(</span><span class="token string">"kalman_tracker"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"kalman_tracker"</span><span class="token punctuation">,</span> draw_frame<span class="token punctuation">)</span>        key <span class="token operator">=</span> cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> image algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标跟踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS</title>
      <link href="/article/MacOS/"/>
      <url>/article/MacOS/</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h1><h3 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 登陆官网 https:&#x2F;&#x2F;brew.sh&#x2F;，赫然醒目安装指令如下&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)# 可能会很慢，换中科大源安装&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;ineo6&#x2F;homebrew-install&#x2F;install)# 切换国内源&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)# 卸载&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;HomebrewUninstall.sh)# 更多参考 https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1853162<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="挂载移动硬盘"><a href="#挂载移动硬盘" class="headerlink" title="挂载移动硬盘"></a>挂载移动硬盘</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">diskutil listsudo umount &#x2F;dev&#x2F;disk2s1# 默认开机会以只读方式挂载sudo mount_ntfs -o auto,rw,nobrowse &#x2F;dev&#x2F;disk2s1 ~&#x2F;Desktop&#x2F;mnt# 实测无效sudo &#x2F;etc&#x2F;fstab #添加：LABEL&#x3D;要挂载的磁盘名 none ntfs rw,auto,nobrowsesudo ln -s &#x2F;Volumes ~&#x2F;Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除开机自启"><a href="#删除开机自启" class="headerlink" title="删除开机自启"></a>删除开机自启</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 打开访达按 command + shift + G 分别进到以下几个文件夹中找到要删除的开机启动项删除即可~&#x2F;Library&#x2F;LaunchAgents&#x2F;Library&#x2F;LaunchAgents&#x2F;Library&#x2F;LaunchDaemons&#x2F;System&#x2F;Library&#x2F;LaunchAgents&#x2F;System&#x2F;Library&#x2F;LaunchDaemons<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 安装，网络问题可以将github换成giteegit clone https:&#x2F;&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git ~&#x2F;.oh-my-zshcp ~&#x2F;.oh-my-zsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc# 更改默认shellchsh -s &#x2F;bin&#x2F;zsh# 安装高亮插件git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting# 安装智能提示插件git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions# 修改配置vim ~&#x2F;.zshrc # 开头添加或者取消注释export PATH&#x3D;$HOME&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:$PATH # source $HOME&#x2F;.bashrc # 有的话source $HOME&#x2F;.bash_profile# 修改主题，参考链接https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;wiki&#x2F;ThemesZSH_THEME&#x3D;&quot;ys&quot; # 修改插件plugins&#x3D;(git zsh-syntax-highlighting zsh-autosuggestions) plugins&#x3D;(git brew z extract cp web-search zsh-syntax-highlighting zsh-autosuggestions)source ~&#x2F;.zshrc# conda相关命令不能用解决办法cd &#x2F;xx&#x2F;xx&#x2F;miniconda&#x2F;bin.&#x2F;conda init zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker开发环境搭建</title>
      <link href="/article/docker-dev-env/"/>
      <url>/article/docker-dev-env/</url>
      
        <content type="html"><![CDATA[<h1 id="docker开发环境搭建"><a href="#docker开发环境搭建" class="headerlink" title="docker开发环境搭建"></a>docker开发环境搭建</h1><p>在deepin v20.6 下测试</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 以下命令为了能安装 nvidia-container-toolkit# deepin 执行下面命令（deepin v20.6 对应 debian11）distribution&#x3D;debian11# 其它执行distribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID)curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add -curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.listsudo apt updateapt install docker-ce docker-ce-cli containerd.io nvidia-container-toolkitdocker version# 验证是否安装成功systemctl enable docker.service # 设置开机自启（未知是否默认开启了）# 将当前用户添加到docker组，否则在vscode中docker插件无法连接，报以下错误# Failed to connect. Is Docker running# Error: connect EACCES &#x2F;var&#x2F;run&#x2F;docker.socksudo groupadd dockersudo gpasswd -a $USER dockernewgrp docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF&#123;&quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],&quot;graph&quot;: &quot;&#x2F;home&#x2F;docker_storage&quot;,&quot;log-driver&quot;: &quot;json-file&quot;,&quot;log-opts&quot;: &#123;&quot;max-size&quot;: &quot;100m&quot;&#125;,&quot;storage-driver&quot;: &quot;overlay2&quot;,&quot;storage-opts&quot;: [&quot;overlay2.override_kernel_check&#x3D;true&quot;],&quot;insecure-registries&quot; : [&quot;172.16.4.17:8090&quot;],&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;g427vmjy.mirror.aliyuncs.com&quot;],&quot;live-restore&quot;: true&#125;EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>graph：镜像保存地址</li><li>insecure-registries：使用http的仓库地址</li></ul><p>配置后需要执行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo service docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启docker，随后登录指定仓库，拉去镜像创建容器</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo docker login 172.16.4.17:8090# 输入账户密码后拉去指定镜像sudo docker pull 172.16.4.17:8090&#x2F;algorithm&#x2F;ai_compile_1:v8# 172.16.4.17:8090&#x2F;algorithm&#x2F;ai_compile_1:v8 自定义修改# 创建容器支持gui转发及cuda计算的容器（直接从远端获取镜像）,注意加上“--network&#x3D;host”，否则默认为桥接模式，无法使用宿主机VPNsudo docker run -itd --name docker_on_deepin --privileged&#x3D;true -u root --ipc&#x3D;host --network&#x3D;host --gpus all -v &#x2F;home&#x2F;xxx&#x2F;job:&#x2F;root&#x2F;job -v &#x2F;tmp&#x2F;.X11-unix:&#x2F;tmp&#x2F;.X11-unix -e DISPLAY&#x3D;:0 172.16.4.17:8090&#x2F;algorithm&#x2F;ai_compile_1:v8 &#x2F;usr&#x2F;sbin&#x2F;init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GUI转发"><a href="#GUI转发" class="headerlink" title="GUI转发"></a>GUI转发</h3><ul><li><p>Gtk-WARNING **: 15:48:09.315: Locale not supported by C library</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export LC_ALL&#x3D;C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Gtk-WARNING **: 15:48:09.315: cannot open display: :0.0</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 本地执行env | grep DISPLAY# 查询显示端口# DISPLAY&#x3D;:0xhost +# 使所有用户都能访问Xserver，重启后需要再次执行# 容器内执行，注销重新登录后需要再次执行export DISPLAY&#x3D;:0# 本地容器，测试通过export DISPLAY&#x3D;宿主机ip:0# 远端容器，测试未通过，可能网络配置有点问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul><li><p>unable to find user root: no matching entries in passwd file</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker stop xxdocker start xxdocker exec -it xx bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件变量和信号量</title>
      <link href="/article/condition-semaphore/"/>
      <url>/article/condition-semaphore/</url>
      
        <content type="html"><![CDATA[<h1 id="条件变量和信号量"><a href="#条件变量和信号量" class="headerlink" title="条件变量和信号量"></a>条件变量和信号量</h1><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>一般用在生产者和消费者模型里面</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::queue&lt;int&gt;     g_numQue;std::mutex              g_mtx;std::condition_variable g_cdv;&#123;                std::unique_lock&lt;std::mutex&gt; ulk(m_mtx);  &#x2F;&#x2F; 获得锁，准备生产                while (m_imgQue.size() &gt; m_threshold)                &#123;                    m_cdv.wait(ulk);  &#x2F;&#x2F; 释放锁，等待消费，必须再由消费线程唤醒                &#125;                cv::Mat image;                cv::cvtColor(tmp, image, cv::COLOR_YUV2BGR_NV12);                m_imgQue.emplace(image);                m_cdv.notify_one();  &#x2F;&#x2F; 通知消费            &#125;int main()&#123;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"(^\d+$)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// camera index</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"(^rtsp://.+)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// rtsp</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"(([\w\/\-:]+[\w-]&#123;1&#125;\.(mp4|h264|avi|rmvb|mkv)$)|(([\w\/-:]+%\d+d\.(jpg|png|bmp))$))"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token double-colon punctuation">::</span>icase<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// video，忽略后缀大小写</span>    <span class="token comment">// "path/to/imgs/xxx_%04d.jpg" ：文件夹内所有图片按规律命名，也可以用 VideoCapture 来读取，貌似图片太少不行？下载的数据集可以</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"([\w\/\-:]+)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// image folder</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"([\w\/\-:]+[\w-]&#123;1&#125;\.(jpg|png|bmp)$)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// image</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">// unkown</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/coolcpp/p/cpp-regex.html">C++正则表达式 - cpluspluser - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/i_chaoren/article/details/79230773">(57条消息) C++11–正则表达式_学习使我快乐-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin那些事</title>
      <link href="/article/test/"/>
      <url>/article/test/</url>
      
        <content type="html"><![CDATA[<h1 id="DeepinV20-6-CV-开发环境搭建"><a href="#DeepinV20-6-CV-开发环境搭建" class="headerlink" title="DeepinV20.6 CV 开发环境搭建"></a>DeepinV20.6 CV 开发环境搭建</h1><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><ul><li><p>有普通模式和 <code>safe graphics</code>模式可选，后者标识禁用显卡，采用CPU绘制图像，防止有些显卡在安装时花瓶、闪烁等，选择<code>safe graphics</code>即可，随后需要单独安装显卡驱动</p></li><li><p>手动安装时只需挂载以下内容即可：</p><ul><li><p><code>/boot</code>：启动位置</p></li><li><p><code>/</code>：根目录，也即系统需要安装的位置</p></li><li><p><code>/home</code>：用户数据存放位置</p></li></ul><p>全盘安装则全部交给安装器就好，注意调整系统分区大小，默认15G可能不够用</p></li></ul><h3 id="显卡驱动-amp-CUDA安装"><a href="#显卡驱动-amp-CUDA安装" class="headerlink" title="显卡驱动&amp;CUDA安装"></a>显卡驱动&amp;CUDA安装</h3><ul><li><p>禁用系统自带开源驱动，其实都不用进入系统，直接按 <code>ctrl+alt+f2</code>，输入账户密码后执行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo vim &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf # 会自动创建<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>填入如下内容</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">blacklist nouveauoptions nouveau modeset&#x3D;0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行 <code>sudo update-initramfs -u</code> 使禁用生效，重启后再次按<code>ctrl+alt+f2</code>，输入账户密码后执行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">lspci|grep -i nouveau       # 没有输出说明禁用成功sudo service lightdm stop   # 关闭图形界面显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装驱动，提前插上U 盘或者移动硬盘（当然也可以先拷贝到&#x2F;home&#x2F;）</p><p>进入根目录（U 盘和者移动硬盘挂载点）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;cd &#x2F;your_user_namesudo chmod 777 cuda_xx_xxx.runsudo bash cuda_xx_xxx.run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>稍后输入 <code>accept</code>后根据需要选择安装 Driver、CUDA Tookit 等，在CUDA Tookit的option中更改安装路径到&#x2F;home&#x2F;xxx下，否则默认安装到系统根目录下可能会因为空间不足而失败，会自动创建软连接 &#x2F;usr&#x2F;local&#x2F;cuda</p></li></ul><h3 id="cuDNN安装"><a href="#cuDNN安装" class="headerlink" title="cuDNN安装"></a>cuDNN安装</h3><ul><li><p>解压后直接拷贝到cuda安装下即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar cudnn-xxx.tgz -C cuDNN_dirsudo cp cuDNN_dir&#x2F;include&#x2F;cudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;sudo cp cuDNN_dir&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="TensorRT安装"><a href="#TensorRT安装" class="headerlink" title="TensorRT安装"></a>TensorRT安装</h3><ul><li><p>TensorRT</p><p>解压后在创建软连接&#x2F;usr&#x2F;local&#x2F;tensorrt</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar TensorRT-xxx.tar.gz -C TensorRT_dirsudo ln -s TensorRT_dir &#x2F;usr&#x2F;local&#x2F;tensorrt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="OpenCV源码安装"><a href="#OpenCV源码安装" class="headerlink" title="OpenCV源码安装"></a>OpenCV源码安装</h3><p>​    通过命令行 <code>sudo apt install libopencv-dev</code>安装的版本为3.2，这里采用源码安装</p><ul><li><p>安装必要的构建工具</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo apt updatesudo install build-essential# 20.6 有个bug，有gcc没有g++，此命令会重新安装sudo apt install cmakesudo apt install cmake-qt-gui# 比较习惯用GUI，毕竟那些命令记不住，以前记了一份搞丢了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装 FFmpeg</p><ul><li><p>命令行安装</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 系统自带了 pkg-config 和 ffmpeg，但是 ffmpeg 只是运行时库，还需要头文件sudo apt install pkg-config ffmpeg# 通过 libxxx-dev安装相应的头文件，以便configure时可以找到ffmpeg及其依赖模块sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavutil-dev libavfilter-dev libavresample-dev libswresample-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>源码安装（未测试）</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git clone https:&#x2F;&#x2F;git.ffmpeg.org&#x2F;ffmpeg.git ffmpeg.&#x2F;configure --enable-shared --enable-avresample --prefix&#x3D;&#x2F;usr&#x2F;make -j$(nproc)sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>剩下的就没啥可说的了，不要 build test 和 doc可以加快编译，不要勾选dnn等，否则会提示需要下很多东西，以前详细记录过，<a href="https://www.cnblogs.com/huluwa508/p/10142718.html">opencv源码安装</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE \-D CMAKE_C_COMPILER&#x3D;&#x2F;opt&#x2F;rh&#x2F;devtoolset-7&#x2F;root&#x2F;bin&#x2F;gcc \-D CMAKE_CXX_COMPILER&#x3D;&#x2F;opt&#x2F;rh&#x2F;devtoolset-7&#x2F;root&#x2F;bin&#x2F;g++ \-D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local \-D OPENCV_EXTRA_MODULES_PATH&#x3D;..&#x2F;opencv_contrib-4.5.5&#x2F;modules \-D WITH_FREETYPE&#x3D;ON \-D WITH_CUDNN&#x3D;ON \-D WITH_CUDA&#x3D;ON \-D WITH_FFMPEG&#x3D;ON \-D BUILD_opencv_video&#x3D;ON \-D BUILD_opencv_videoio&#x3D;ON \-D BUILD_opencv_videostab&#x3D;ON \-D OPENCV_ENABLE_NONFREE&#x3D;ON \-D BUILD_PERF_TESTS&#x3D;OFF \-D BUILD_TESTS&#x3D;OFF \-D BUILD_opencv_python_tests&#x3D;OFF \-D BUILD_opencv_python3&#x3D;OFF \c-D BUILD_opencv_python2&#x3D;OFF \-D BUILD_DOCS&#x3D;OFF \-D BUILD_opencv_world&#x3D;OFF \-D BUILD_opencv_dnn&#x3D;OFF \-D OPENCV_DNN_CUDA&#x3D;OFF \-D OPENCV_DNN_OPENCL&#x3D;OFF \-D BUILD_opencv_dnn_objdetect&#x3D;OFF \-D BUILD_opencv_dnn_superres&#x3D;OFF \-D WITH_IPP&#x3D;OFF \-D BUILD_EXAMPLES&#x3D;OFF \-D INSTALL_TESTS&#x3D;OFF \  -D WITH_VTK&#x3D;OFF \-D BUILD_opencv_gpu&#x3D;OFF \-D BUILD_DOCS&#x3D;OFF \-D BUILD_PERF_TESTS&#x3D;OFF \-D BUILD_TESTS&#x3D;OFF \-D BUILD_WITH_DEBUG_INFO&#x3D;OFF \-D BUILD_opencv_apps&#x3D;OFF \-D BUILD_opencv_calib3d&#x3D;OFF \-D BUILD_opencv_contrib&#x3D;OFF \-D BUILD_opencv_features2d&#x3D;OFF \-D BUILD_opencv_flann&#x3D;OFF \-D BUILD_opencv_gpu&#x3D;OFF \-D BUILD_opencv_ml&#x3D;OFF \-D BUILD_opencv_nonfree&#x3D;OFF \-D BUILD_opencv_objdetect&#x3D;OFF \-D BUILD_opencv_photo&#x3D;OFF \-D BUILD_opencv_stitching&#x3D;OFF \-D BUILD_opencv_superres&#x3D;OFF \-D BUILD_opencv_ts&#x3D;OFF \-D BUILD_opencv_video&#x3D;OFF \-D BUILD_opencv_highgui&#x3D;OFF \-D BUILD_opencv_videostab&#x3D;OFF \..&#x2F;opencv-4.5.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译安装</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;buildmake -j12 # 数字自己随意，代表线程数# FFmpeg5.1，OpenCV4.5.5 提示错误：&#39;CODEC_ID_H264&#39; was not declared in this scope # 解决方法：https:&#x2F;&#x2F;github.com&#x2F;opencv&#x2F;opencv&#x2F;commit&#x2F;496eed950f6d0e7fd92619d47e3cec8f06e96acesudo make install# 如果 configure 没有修改安装路径的话会安装到 &#x2F;user&#x2F;local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行错误</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">terminate called after throwing an instance of &#39;cv::Exception&#39;  what():  OpenCV(4.5.5) &#x2F;media&#x2F;huzh&#x2F;data_storage&#x2F;library &#x2F;opencv&#x2F;opencv-4.5.5&#x2F;modules&#x2F;highgui&#x2F;src&#x2F;window.cpp:1251: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function &#39;cvNamedWindow&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="PyTorch安装"><a href="#PyTorch安装" class="headerlink" title="PyTorch安装"></a>PyTorch安装</h3><ul><li><p>前提当然是安装 python 环境，推荐 <a href="https://docs.conda.io/en/latest/miniconda.html">miniconda3</a></p></li><li><p>在线安装，网络好可以试试</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">conda install pytorch torchvision torchaudio cudatoolkit&#x3D;11.3 -c pytorch [-c conda-forge]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>离线安装</p><p><a href="https://download.pytorch.org/whl/torch_stable.html">pytorch离线镜像</a></p><p>下载对应版本后通过如下命令安装即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pip install .\torch-xxx.whl pip install .\torchvision-xxx.whl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证安装是否成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>device_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>version<span class="token punctuation">.</span>cuda<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/article/heap-sort/"/>
      <url>/article/heap-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>原理部分先空着，回头有空好好研究下，以下参考自<a href="https://www.bilibili.com/video/BV1AF411G7cA/?spm_id_from=333.337.search-card.all.click&vd_source=7faf2234dcca50c8ce101cc5b4f29dc0">堆排序</a></p><p>简单来说分为</p><ul><li>大根堆（又叫大顶堆），根节点大于左右子节点（右子节点可能没有）</li><li>小根堆（又叫小顶堆），根节点小于左右子节点（右子节点可能没有）</li></ul><p><img src="/article/img/heap-sort-1.jpg"></p><p>以大根堆为例，其在堆化后在内存中的存储方式如下图所示</p><ul><li>父节点索引为 ：(i - 1) &#x2F; 2</li><li>左子节点索引为：2 * i + 1</li><li>右子节点索引为：2 * i + 2</li><li>最后一个非子节点索引为：size &#x2F; 2 - 1</li></ul><p><img src="/article/img/heap-sort-2.jpg"></p><p>堆排序分两步走，先堆化，再排序</p><h3 id="堆化及排序"><a href="#堆化及排序" class="headerlink" title="堆化及排序"></a>堆化及排序</h3><p>从最后一个非子节点开始调整每一个非子节点，整个过程保证每一个非子结点都比其左右子结点大，从下往上调整，大值上浮，小值下沉</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/************************************************************************************* * Description  : * Version      : 1.0 * Author       : huzhenhong * Date         : 2022-07-01 10:53:22 * LastEditors  : huzhenhong * LastEditTime : 2023-03-08 16:47:30 * FilePath     : \\cplusplus\\src\\data-and-algorithm\\heap-sort.cpp * Copyright (C) 2022 huzhenhong. All rights reserved. *************************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;type_traits></span></span><span class="token comment">/* 当数组中有相等元素时，堆排序算法对这些元素的处理方法不止一种，故是不稳定的。 */</span><span class="token comment">// 递归调整当前节点以及其叶子结点，找到最大元素并放在该节点（递归可能栈溢出吧）</span><span class="token keyword">void</span> <span class="token function">HeapifyWithRecursion</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> maxIdx        <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> leftChildIdx  <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 当前节点的第一个左孩子</span>    <span class="token keyword">int</span> rightChildIdx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 当前节点的第一个右孩子（最后一个非叶子结点不一定有）</span>    <span class="token comment">// leftChildIdx &lt; size 是因为下一轮递归时，maxIdx = size - 1，那么 leftChildIdx 会越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChildIdx <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>leftChildIdx<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        maxIdx <span class="token operator">=</span> leftChildIdx<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// rightChildIdx &lt; size 是因为下一轮递归时，maxIdx = size - 1，那么 rightChildIdx 会越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChildIdx <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>rightChildIdx<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        maxIdx <span class="token operator">=</span> rightChildIdx<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdx <span class="token operator">!=</span> idx<span class="token punctuation">)</span>  <span class="token comment">// 当前节点比孩子节点小</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 交换当前节点和最大叶子节点</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// maxIdx 现在为 leftChildIdx 或者 rightChildIdx，所以不一定是沿着一条直线一直下沉</span>        <span class="token function">HeapifyWithRecursion</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> maxIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">HeapifyWithLoop</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> curRootIdx    <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token keyword">int</span> leftChildIdx  <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 当前节点的第一个左孩子</span>    <span class="token keyword">int</span> rightChildIdx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 当前节点的第一个右孩子（最后一个非叶子结点不一定有）</span>    <span class="token keyword">int</span> bigChildIdx   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// int arr[8]&#123;8, 1, 14, 3, 21, 5, 7, 10&#125;;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftChildIdx <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 有右孩子且右孩子比左孩子大</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChildIdx <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>rightChildIdx<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>leftChildIdx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            bigChildIdx <span class="token operator">=</span> rightChildIdx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            bigChildIdx <span class="token operator">=</span> leftChildIdx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 已经有序则无需继续下沉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>curRootIdx<span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>bigChildIdx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>curRootIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>bigChildIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curRootIdx    <span class="token operator">=</span> bigChildIdx<span class="token punctuation">;</span>            leftChildIdx  <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> curRootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            rightChildIdx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> curRootIdx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// build heap</span>    <span class="token comment">// 从最后一个非叶子节点（size / 2 - 1）开始调整每一个非叶子节点</span>    <span class="token comment">// 整个过程保证每一个非叶子结点都比其叶子结点大</span>    <span class="token comment">// 从下往上调整，大值上浮</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HeapifyWithRecursion</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// HeapifyWithLoop(arr, size, i);</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// sort</span>    <span class="token comment">// 将当前根节点的最大元素放到数组末尾（从小到大排序）</span>    <span class="token comment">// 破坏了堆结构，重新找到最大元素并放在根节点，如此往复直到只剩下一个未排序元素</span>    <span class="token comment">// 从上往下调整，小值下沉</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HeapifyWithRecursion</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// HeapifyWithLoop(arr, i, 0);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// int arr[8]&#123;8, 1, 14, 3, 21, 5, 7, 10&#125;;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"before sort"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> arr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token function">HeapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// HeapSort(arr, 8);</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"after sort"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> arr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/huzhenhong/study-notes/blob/master/cplusplus/src/data-and-algorithm/BinaryHeap.hpp">自己写的二叉堆</a></p><p><a href="https://github.com/huzhenhong/study-notes/blob/master/cplusplus/src/data-and-algorithm/STLheap.cpp">基于标准库的堆操作</a></p>]]></content>
      
      
      <categories>
          
          <category> data&amp;algotirhm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algotirhm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode之插件clangd</title>
      <link href="/article/vscode-extension-clangd/"/>
      <url>/article/vscode-extension-clangd/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode之插件clangd"><a href="#VSCode之插件clangd" class="headerlink" title="VSCode之插件clangd"></a>VSCode之插件clangd</h1><h2 id="clangd"><a href="#clangd" class="headerlink" title="clangd"></a>clangd</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>安装后根据提示就好，clangd 的安装路径不在环境变量里</p></li><li><p>disable <code>C_Cpp.intelliSenseEngine</code>，会自动提示关闭，关闭后就不会和微软的智能提示产生冲突了</p></li><li><p>disable <code>C_Cpp.intelliSenseEngine</code>，会自动提示关闭，关闭后就不会和微软的智能提示产生冲突了，此时如果无法通过 <code>.clang-format</code> 文件进行格式化，修改格式化默认工具</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"[cpp]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// "editor.defaultFormatter": "ms-vscode.cpptools"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>本地安装会在 setting.josn 中自动添加 clangd.path 字段，并设置好对应路径</p></li><li><p>ssh-remote 远程安装则会在 .vscode-server&#x2F;data&#x2F;Machine&#x2F;settings.json 中自动添加 clangd.path 字段，并设置好对应路径</p></li><li><p>clangd -h 检测是否安装成功</p></li><li><p>找到全路径执行<code>xxx/xxx/clangd -h</code> 检测是否安装成功</p><ul><li><p>报错 &#x2F;lib64&#x2F;libc.so.6: version &#96;GLIBC_2.18’ not found</p><p>可能是glibc库版本太低，执行如下代码更新</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;usr&#x2F;localwget http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;gnu&#x2F;libc&#x2F;glibc-2.18.tar.gztar -xzvf glibc-2.18.tar.gzcd glibc-2.18mkdir -p build cd build&#x2F;..&#x2F;configure --prefix&#x3D;&#x2F;usr --disable-profile --enable-add-ons --with-headers&#x3D;&#x2F;usr&#x2F;include --with-binutils&#x3D;&#x2F;usr&#x2F;binmake -j4make installldd --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>Cmake: Export Compile Commands File</code> 勾选上，相当于</p><ul><li>构建时添加<code>-DCMAKE_EXPORT_COMPILE_COMMANDS=1</code> 参数</li><li>当然也可以在 CMakeLists.txt 里添加 <code>set(CMAKE_EXPORT_COMPILECOMMANDS ON)</code></li></ul><p>会在build目录下生成 compile_commands.json，这个就是clangd跳转时需要的索引文件</p></li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"clangd.arguments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">// 在后台自动分析文件（基于complie_commands)</span>        <span class="token string">"--background-index"</span><span class="token punctuation">,</span>        <span class="token comment">// 标记compelie_commands.json文件的目录位置</span>        <span class="token string">"--compile-commands-dir=build"</span><span class="token punctuation">,</span>        <span class="token comment">// 同时开启的任务数量</span>        <span class="token string">"-j=12"</span><span class="token punctuation">,</span>        <span class="token comment">// 告诉clangd用那个clang进行编译，路径参考which clang++的路径</span>        <span class="token comment">// "--query-driver=/usr/bin/clang++",</span>        <span class="token comment">// clang-tidy功能</span>        <span class="token string">"--clang-tidy"</span><span class="token punctuation">,</span>        <span class="token string">"--clang-tidy-checks=performance-*,bugprone-*"</span><span class="token punctuation">,</span>        <span class="token comment">// 全局补全（会自动补充头文件）</span>        <span class="token string">"--all-scopes-completion"</span><span class="token punctuation">,</span>        <span class="token comment">// 更详细的补全内容</span>        <span class="token string">"--completion-style=detailed"</span><span class="token punctuation">,</span> <span class="token comment">// bundled</span>        <span class="token comment">// 补充头文件的形式</span>        <span class="token string">"--header-insertion=iwyu"</span><span class="token punctuation">,</span>        <span class="token string">"--enable-config"</span><span class="token punctuation">,</span>        <span class="token comment">// 默认格式化风格: 谷歌开源项目代码指南（可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU 等）</span>        <span class="token string">"--fallback-style=LLVM"</span><span class="token punctuation">,</span>        <span class="token comment">// 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末</span>        <span class="token comment">// 我选择禁用</span>        <span class="token string">"--function-arg-placeholders=false"</span><span class="token punctuation">,</span>        <span class="token comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span>        <span class="token string">"--header-insertion-decorators"</span><span class="token punctuation">,</span>        <span class="token comment">// 让 Clangd 生成更详细的日志</span>        <span class="token string">"--log=verbose"</span><span class="token punctuation">,</span>        <span class="token comment">// pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能)</span>        <span class="token string">"--pch-storage=memory"</span><span class="token punctuation">,</span>        <span class="token comment">// 输出的 JSON 文件更美观</span>        <span class="token string">"--pretty"</span><span class="token punctuation">,</span>        <span class="token comment">// 建议排序模型</span>        <span class="token string">"--ranking-model=heuristics"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Preferences: Open Settings (JSON)</code> 打开配置文件添加如下内容</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"clangd.arguments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">// 在后台自动分析文件（基于complie_commands)</span>        <span class="token string">"--background-index"</span><span class="token punctuation">,</span>        <span class="token comment">// 标记compelie_commands.json文件的目录位置</span>        <span class="token string">"--compile-commands-dir=build"</span><span class="token punctuation">,</span>        <span class="token comment">// 同时开启的任务数量</span>        <span class="token string">"-j=12"</span><span class="token punctuation">,</span>        <span class="token comment">// 告诉clangd用那个clang进行编译，路径参考which clang++的路径</span>        <span class="token comment">// "--query-driver=/usr/bin/clang++",</span>        <span class="token comment">// clang-tidy功能</span>        <span class="token string">"--clang-tidy"</span><span class="token punctuation">,</span>        <span class="token string">"--clang-tidy-checks=performance-*,bugprone-*"</span><span class="token punctuation">,</span>        <span class="token comment">// 全局补全（会自动补充头文件）</span>        <span class="token string">"--all-scopes-completion"</span><span class="token punctuation">,</span>        <span class="token comment">// 更详细的补全内容</span>        <span class="token string">"--completion-style=detailed"</span><span class="token punctuation">,</span> <span class="token comment">// bundled</span>        <span class="token comment">// 补充头文件的形式</span>        <span class="token string">"--header-insertion=iwyu"</span><span class="token punctuation">,</span>        <span class="token string">"--enable-config"</span><span class="token punctuation">,</span>        <span class="token comment">// 默认格式化风格: 谷歌开源项目代码指南（可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU 等）</span>        <span class="token string">"--fallback-style=LLVM"</span><span class="token punctuation">,</span>        <span class="token comment">// 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末</span>        <span class="token comment">// 我选择禁用</span>        <span class="token string">"--function-arg-placeholders=false"</span><span class="token punctuation">,</span>        <span class="token comment">// 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分</span>        <span class="token string">"--header-insertion-decorators"</span><span class="token punctuation">,</span>        <span class="token comment">// 让 Clangd 生成更详细的日志</span>        <span class="token string">"--log=verbose"</span><span class="token punctuation">,</span>        <span class="token comment">// pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能)</span>        <span class="token string">"--pch-storage=memory"</span><span class="token punctuation">,</span>        <span class="token comment">// 输出的 JSON 文件更美观</span>        <span class="token string">"--pretty"</span><span class="token punctuation">,</span>        <span class="token comment">// 建议排序模型</span>        <span class="token string">"--ranking-model=heuristics"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>clangd: Open project configuration file</code>，打开.clangd，配置如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">CompileFlags</span><span class="token punctuation">:</span>                                 <span class="token key atrule">Add</span><span class="token punctuation">:</span>       <span class="token punctuation">[</span>        <span class="token punctuation">-</span>std=c++17<span class="token punctuation">,</span>        <span class="token punctuation">-</span>Wno<span class="token punctuation">-</span>documentation<span class="token punctuation">,</span>        <span class="token punctuation">-</span>Wno<span class="token punctuation">-</span>missing<span class="token punctuation">-</span>prototypes<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token key atrule">Diagnostics</span><span class="token punctuation">:</span>  <span class="token key atrule">ClangTidy</span><span class="token punctuation">:</span>    <span class="token key atrule">Add</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span>    <span class="token key atrule">Remove</span><span class="token punctuation">:</span>      <span class="token punctuation">[</span>        abseil*<span class="token punctuation">,</span>        altera*<span class="token punctuation">,</span>        fuchsia*<span class="token punctuation">,</span>        llvmlib*<span class="token punctuation">,</span>        zircon*<span class="token punctuation">,</span>        google<span class="token punctuation">-</span>readability<span class="token punctuation">-</span>todo<span class="token punctuation">,</span>        readability<span class="token punctuation">-</span>braces<span class="token punctuation">-</span>around<span class="token punctuation">-</span>statements<span class="token punctuation">,</span>        hicpp<span class="token punctuation">-</span>braces<span class="token punctuation">-</span>around<span class="token punctuation">-</span>statements<span class="token punctuation">,</span>        modernize<span class="token punctuation">-</span>use<span class="token punctuation">-</span>trailing<span class="token punctuation">-</span>return<span class="token punctuation">-</span>type      <span class="token punctuation">]</span><span class="token key atrule">Index</span><span class="token punctuation">:</span>  <span class="token key atrule">Background</span><span class="token punctuation">:</span> Build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> clangd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AddressSanitizer</title>
      <link href="/article/AddressSanitizer/"/>
      <url>/article/AddressSanitizer/</url>
      
        <content type="html"><![CDATA[<h1 id="AddressSanitizer"><a href="#AddressSanitizer" class="headerlink" title="AddressSanitizer"></a><strong>AddressSanitizer</strong></h1><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install devtoolset-7-libasan-devel libasan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="二、CMake-配置"><a href="#二、CMake-配置" class="headerlink" title="二、CMake 配置"></a>二、CMake 配置</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># -fsanitize=address</span><span class="token comment"># -fno-omit-frame-pointer     #打印函数调用路径</span><span class="token comment"># -fsanitize-recover=address  #AddressSanitizer遇到错误时能够继续</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS_DEBUG</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS_DEBUG</span><span class="token punctuation">&#125;</span></span> -O0 -fsanitize=address -fno-omit-frame-pointer"</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_FLAGS_DEBUG</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_C_FLAGS_DEBUG</span><span class="token punctuation">&#125;</span></span> -O0 -fsanitize=address -fno-omit-frame-pointer"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、检测"><a href="#三、检测" class="headerlink" title="三、检测"></a>三、检测</h4><p>目前只能直接执行 .&#x2F;xxx.out 进行检测，debug还不知道怎么弄</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 之快捷键</title>
      <link href="/article/vscode-shortcuts/"/>
      <url>/article/vscode-shortcuts/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode-之快捷键"><a href="#VSCode-之快捷键" class="headerlink" title="VSCode 之快捷键"></a>VSCode 之快捷键</h1><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">F1<span class="token comment"># 显示命令面板</span>F2 <span class="token comment"># 重命名符号(不用再搜索替换)</span>F3/Shift + F3 <span class="token comment"># 查找下/上一个</span>F5/Shift + F5<span class="token comment"># 开始/停止调试</span>F8/Shift + F8<span class="token comment"># 转到下/上一个错误或警告</span>F9<span class="token comment"># 打断点</span>F12/Shift + F12<span class="token comment"># 转到定义(不一定准)/转到引用</span>Alt + Z<span class="token comment"># 自动换行以适应当前窗口(word wrap)</span>Alt + K<span class="token comment"># 标记书签</span>Alt + P<span class="token comment"># 跳到上一个书签</span>Alt + N<span class="token comment"># 跳到下一个书签</span>Alt + ↑/↓<span class="token comment"># 向上/向下移动行</span>Alt + ←/→<span class="token comment"># 返回/前进</span>Alt + PgUp/PgDown<span class="token comment"># 向上/向下翻页, 光标仍在原位</span>Shift + Del<span class="token comment"># 删除行</span>Shift + PgUp/PgDown<span class="token comment"># 向上/向下滚动页面 </span>Shift + ↑/↓<span class="token comment"># 上下微调选定内容</span>Shift + ←/→ <span class="token comment"># 左右微调选定内容</span>Shift + Alt + A<span class="token comment"># 多行注释</span>Shift + Alt + ←/→<span class="token comment"># 缩小/展开选择(比如光标在单词中间时,选定当前单词特别有用)</span>Shift + Alt + ↑/↓<span class="token comment"># 向上/向下复制行</span>Shift + Alt + F12<span class="token comment"># 查找所有引用</span>Ctrl + `<span class="token comment"># 显示集成终端</span>Ctrl + /<span class="token comment"># 单行注释</span>Ctrl + \<span class="token comment"># 拆分编辑器(当前文档在右边打开)</span>Ctrl + Alt + ←/→<span class="token comment"># 当前文档移动到左/右边</span>Ctrl + Alt + ↑/↓<span class="token comment"># 在上/下插入光标(常用于批量修改)</span>Ctrl + <span class="token punctuation">]</span>/<span class="token punctuation">[</span><span class="token comment"># 添加/减少缩进</span>Ctrl + B <span class="token comment"># 隐藏左侧栏</span>Ctrl + N <span class="token comment"># 隐藏底边栏(默认为 Ctrl + J)</span>Ctrl + J <span class="token comment"># 智能提示(默认为 Ctrl + Space)</span>Ctrl + P <span class="token comment"># 转到文件(当前目录下的所有可选文件及活动的配置页面)</span>Ctrl + G <span class="token comment"># 转到行</span>Ctrl + T <span class="token comment"># 转到工作区中的符号xx</span>Ctrl + F <span class="token comment"># 查找</span>Ctrl + H<span class="token comment"># 替换</span>Ctrl + F2<span class="token comment"># 选择当前字的所有出现</span>Ctrl + ↑/↓<span class="token comment"># 向上/向下滚动, 光标仍在原位</span>Ctrl + PgUp/PgDown<span class="token comment"># 切换活动文件</span>Ctrl + W/F4<span class="token comment"># 关闭当前文档</span>Ctrl + K U<span class="token comment"># 组合关闭已保存</span>Ctrl + K W<span class="token comment"># 组合关闭全部</span>Ctrl + K Shift + Enter <span class="token comment"># 组合固定当前文档</span>Ctrl + Shift + O<span class="token comment"># 转到当前编辑区中的符号xx</span>Ctrl + Shift + <span class="token punctuation">[</span><span class="token comment"># 折叠区域</span>Ctrl + Shift + <span class="token punctuation">]</span><span class="token comment"># 展开区域</span>Ctrl + Shift + 5<span class="token comment"># 拆分终端</span>Ctrl + Shift + `<span class="token comment"># 创建新终端</span>Ctrl + Shift + M<span class="token comment"># 切换到输出窗口</span>Ctrl + Shift + Y<span class="token comment"># 切换到调试窗口</span>Ctrl + Shift + N<span class="token comment"># 新建实例</span>Ctrl + Shift + W<span class="token comment"># 关闭当前实例</span>Ctrl + Shift + Tab<span class="token comment"># 打开文档的历史记录</span>Ctrl + Shift + \<span class="token comment"># 跳到对应括号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">F1<span class="token comment"># 显示命令面板</span>F2 <span class="token comment"># 重命名符号(不用再搜索替换)</span>F3/Shift + F3 <span class="token comment"># 查找下/上一个</span>F5/Shift + F5<span class="token comment"># 开始/停止调试</span>F8/Shift + F8<span class="token comment"># 转到下/上一个错误或警告</span>F9<span class="token comment"># 打断点</span>F12/Option + F12<span class="token comment"># 转到定义(不一定准)/转到引用</span>Option + Z<span class="token comment"># 自动换行以适应当前窗口(word wrap)</span>Option + \<span class="token comment"># 标记书签</span>Option + <span class="token punctuation">[</span><span class="token comment"># 跳到上一个书签</span>Option + <span class="token punctuation">]</span><span class="token comment"># 跳到下一个书签</span>Option + ↑/↓<span class="token comment"># 向上/向下移动行</span>Option + ←/→<span class="token comment"># 在单词间跳动，等效于Windows的 Ctrl + ←/→</span>Option + <span class="token punctuation">-</span>/+<span class="token comment"># 返回/前进</span>Command + PgUp/PgDown<span class="token comment"># 向上/向下翻页, 光标仍在原位</span>Shift + Del<span class="token comment"># 删除行</span>Command + PgUp/PgDown<span class="token comment"># 向上/向下滚动页面, 光标仍在原位</span>Shift + PgUp/PgDown<span class="token comment"># 选定区域</span>Shift + ↑/↓<span class="token comment"># 上下微调选定内容</span>Option + ←/→ <span class="token comment"># 左右微调选定内容</span>Shift + Option + A<span class="token comment"># 多行注释</span>Ctrl + Shift + ←/→<span class="token comment"># 缩小/展开选择(比如光标在单词中间时,选定当前单词特别有用)</span>Shift + Alt + ↑/↓<span class="token comment"># 向上/向下复制行</span>Command + Option  + F12<span class="token comment"># 查找所有引用</span>Ctrl + `<span class="token comment"># 显示集成终端</span>Command + /<span class="token comment"># 单行注释</span>Command + \<span class="token comment"># 拆分编辑器(当前文档在右边打开)</span>Ctrl + Command + ←/→<span class="token comment"># 当前文档移动到左/右边</span>Command + Option + ↑/↓<span class="token comment"># 在上/下插入光标(常用于批量修改)</span>Command + <span class="token punctuation">]</span>/<span class="token punctuation">[</span><span class="token comment"># 添加/减少缩进</span>Command + B <span class="token comment"># 隐藏左侧栏</span>Command + N <span class="token comment"># 隐藏底边栏(默认为 Command + J)</span>Command + J <span class="token comment"># 智能提示(默认为 Command + Space)</span>Command + P <span class="token comment"># 转到文件(当前目录下的所有可选文件及活动的配置页面)</span>Ctrl + G <span class="token comment"># 转到行</span>Command + T <span class="token comment"># 转到工作区中的符号xx</span>Command + F <span class="token comment"># 查找</span>Command + H<span class="token comment"># 替换</span>Command + F2<span class="token comment"># 选择当前字的所有出现</span>Ctrl + PgUp/PgDown <span class="token comment"># 向上/向下滚动行, 光标仍在原位</span>Command + Shift + <span class="token punctuation">[</span>/<span class="token punctuation">]</span>    切换活动文件Command + W<span class="token comment"># 关闭当前文档</span>Command + Option + T<span class="token comment"># 关闭其它文档</span>Ctrl + K U<span class="token comment"># 组合关闭已保存</span>Ctrl + K W<span class="token comment"># 组合关闭全部</span>Command + K Shift + Enter <span class="token comment"># 组合固定当前文档</span>Command + Shift + O<span class="token comment"># 转到当前编辑区中的符号xx</span>Command + Option + <span class="token punctuation">[</span><span class="token comment"># 折叠区域</span>Command + Option + <span class="token punctuation">]</span><span class="token comment"># 展开区域</span>Ctrl + Shift + 5<span class="token comment"># 拆分终端 Command + \</span>Ctrl + Shift + `<span class="token comment"># 创建新终端</span>Command + Shift + M<span class="token comment"># 切换到问题窗口</span>Command + Shift + U<span class="token comment"># 切换到输出窗口</span>Command + Shift + Y<span class="token comment"># 切换到调试窗口</span>Command + Shift + N<span class="token comment"># 新建实例</span>Command + Shift + W<span class="token comment"># 关闭当前实例</span>Ctrl + 【Shift】 + Tab <span class="token comment"># 打开文档的历史记录</span>Command + Shift + \<span class="token comment"># 跳到对应括号</span>Command + Option + S<span class="token comment"># 保存全部</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>耗时统计</title>
      <link href="/article/time-cost/"/>
      <url>/article/time-cost/</url>
      
        <content type="html"><![CDATA[<h1 id="耗时统计"><a href="#耗时统计" class="headerlink" title="耗时统计"></a>耗时统计</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Func</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> funcName<span class="token punctuation">,</span> <span class="token keyword">const</span> Func<span class="token operator">&amp;</span> func<span class="token punctuation">,</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    timeval start<span class="token punctuation">;</span>    timeval finish<span class="token punctuation">;</span>    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>finish<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> duartion <span class="token operator">=</span> <span class="token punctuation">(</span>finish<span class="token punctuation">.</span>tv_sec <span class="token operator">-</span> start<span class="token punctuation">.</span>tv_sec<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span>finish<span class="token punctuation">.</span>tv_usec <span class="token operator">-</span> start<span class="token punctuation">.</span>tv_usec<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s cost: %.4f \n"</span><span class="token punctuation">,</span> funcName<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> duartion<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span> <span class="token keyword">bool</span> isSay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> res <span class="token operator">=</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">,</span> <span class="token string">"tidy"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.527000</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++和python结果对齐排查</title>
      <link href="/article/cpp-and-python-inference-debug/"/>
      <url>/article/cpp-and-python-inference-debug/</url>
      
        <content type="html"><![CDATA[<h1 id="C-和-python-推理结果对齐排查"><a href="#C-和-python-推理结果对齐排查" class="headerlink" title="C++ 和 python 推理结果对齐排查"></a>C++ 和 python 推理结果对齐排查</h1><p>思路是将 C++ 和 python 预处理后的数据和后处理前的数据直接保存到文件，然后对文件内容进行比较以确定问题环节，数据保存代码如下</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">outFile</span><span class="token punctuation">(</span><span class="token string">"cppdata.txt"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>size_t saveDataSize <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">640</span> <span class="token operator">*</span> <span class="token number">640</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> saveDataSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    outFile <span class="token operator">&lt;&lt;</span> pInputMemory<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// pInputMemory 为 float*</span><span class="token punctuation">&#125;</span>outFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># savetxt 只能保存一维和二维数组</span><span class="token comment"># flatten 返回一维数组</span><span class="token comment"># 根据实际情况选择以整数方式保存，还是以浮点数方式保存</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'pythonData.txt'</span><span class="token punctuation">,</span> blob<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">'%d'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdb支持pretty-print</title>
      <link href="/article/linux-gdb-pretty-print/"/>
      <url>/article/linux-gdb-pretty-print/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下gdb支持pretty-print"><a href="#linux下gdb支持pretty-print" class="headerlink" title="linux下gdb支持pretty-print"></a>linux下gdb支持pretty-print</h1><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>网上教程好像都是一个出处，步骤如下</p><ul><li><p>下载 <a href="https://gcc.gnu.org/git/?p=gcc.git;a=tree;f=libstdc++-v3/python;hb=HEAD">gcc.gnu.org Git - gcc.git&#x2F;tree - libstdc++-v3&#x2F;python&#x2F; </a> 这个目录下的 libstdcxx，然后放到一个地方 you&#x2F;path&#x2F;save&#x2F;libstdcxx</p></li><li><p>在~目录新建 .gdbinit 文件，内如如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'/you/path/save/'</span><span class="token punctuation">)</span><span class="token keyword">from</span> libstdcxx<span class="token punctuation">.</span>v6<span class="token punctuation">.</span>printers <span class="token keyword">import</span> register_libstdcxx_printersregister_libstdcxx_printers <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是python代码，告知 printers 模块所在位置，然后每次 gdb 启动时都会首先加载 .gdbinit，做一些初始化工作，这里就是初始化 pretty-print，接下来在VSCode中配置一下即可</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span> <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"enable pretty printing"</span><span class="token punctuation">,</span> <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="遇到的问题如下"><a href="#遇到的问题如下" class="headerlink" title="遇到的问题如下"></a>遇到的问题如下</h3><ul><li><p>按照上述方案操作完成，没有效果，起初以为是 .gdbinit 放置位置的愿意，因为我的目标环境为 docker，用户为 root，不存在网上说的 &#x2F;home&#x2F;xxx&#x2F;，实际上只要放在 root&#x2F;.gdbinit 就行。总是纠结这样的问题，浪费了太多的时间，实际上执行 gdb命令，会输出如下错误</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&#x2F;root&#x2F;.gdbinit:6: Error in sourced command file:Scripting in the &quot;Python&quot; language is not supported in this copy of GDB.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>意思就是当前的 gdb 不支持 python，但是 pretty-print 又需要 python</p><blockquote><p>好像 gdb 6以后的版本自带 pretty-print，只是没有开启，我的 docker 里的 gdb 可能时源码编译安装的，不知道官方 gdb 安装包是不是可以直接解决这个问题？</p></blockquote></li><li><p>百度发现一个帖子 <a href="https://github.com/microsoft/vscode-cpptools/issues/4568">The option -enable-pretty-printing doesn’t work for remote debugging with gdbserver · Issue #4568 · microsoft&#x2F;vscode-cpptools (github.com)</a> ，通过源码重新安装集成了 python 的 gdb </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">readelf -d $(which gdb) | grep python# 查看gdb目录下是否有python文件，没有说明没有集成pythonapt install python libpython-dev# 安装python开发包.&#x2F;configure --with-python# 集成pythonmake all -j16# 编译make install -j16# 安装，默认安装到 &#x2F;usr&#x2F;local&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本以为只要把 apt 缓存 yum 就可以了，毕竟通过</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install python libpython-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有报错，并提示</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Package python-2.7.5-90.el7.x86_64 already installed and latest version# 当时没细看，充分说明这个包不对No package libpython-dev available.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是make时报错</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">linux configure: error: python is missing or unusable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找不到&#x2F;没有可用的 python，<a href="https://stackoverflow.com/questions/26910649/unable-to-install-gdb-with-python-support">Unable to install GDB with python support - Stack Overflow</a> 这里得知可以</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;configure --with-python&#x3D;&#x2F;usr&#x2F;bin&#x2F;python2.7# 或者export LDFLAGS&#x3D;-L&#x2F;usr&#x2F;lib&#x2F;python2.7.&#x2F;configure --with-python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果还是在make事报上面一样的错误</p></li><li><p>怀疑是 python 开发包没安装好，最后发现应该通过下面的命令安装 python 开发包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install python python-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++代码风格指南</title>
      <link href="/article/cplusplus-code-style-guide/"/>
      <url>/article/cplusplus-code-style-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="C-代码风格指南"><a href="#C-代码风格指南" class="headerlink" title="C++代码风格指南"></a>C++代码风格指南</h1><ul><li><p>命名需简短、且需达到顾名思义的效果</p></li><li><p>代码风格追求整洁对齐</p><ul><li>逻辑块或语句块之间用两个左右的<strong>空行进行物理分割</strong></li><li>函数体代码不超过20行</li><li>单行代码宽度不超过80</li><li>函数参数过多时拆分为每个参数单独一行</li></ul></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>基本遵循驼峰命名法</p><ul><li><p>命名空间名尽量简短，全部小写</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> cvkit <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>类、结构体、函数都以大写字母开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">StructName</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 或者以 s 开头 struct sStructName &#123;&#125;;</span><span class="token keyword">void</span> FunctionName <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>枚举以 e 开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">eEnumName</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>bool 变量以 is 开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> isAgoodName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>char、int、float、double 等变量以小写字母开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span>varName<span class="token punctuation">;</span><span class="token keyword">int</span>varName<span class="token punctuation">;</span><span class="token keyword">float</span>varName<span class="token punctuation">;</span><span class="token keyword">double</span>varName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>裸指针以p开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> pPointName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>智能指针以 Ptr 结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SmartPointPtr smartPointPtr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>容器变量以容器类型简写结束，map 写成 xx2xx的形式</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> nameQue<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> nameDeq<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> nameVec<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> id2name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>成员变量以 <code>m_</code> 开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span>              m_isName<span class="token punctuation">;</span><span class="token keyword">char</span>m_varName<span class="token punctuation">;</span><span class="token keyword">int</span>                 m_varName<span class="token punctuation">;</span><span class="token keyword">float</span>m_varName<span class="token punctuation">;</span><span class="token keyword">double</span>              m_varName<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span>m_pPointName<span class="token punctuation">;</span>SmartPointPtr     m_smartPointPtr<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_nameQue<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_nameDeq<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_nameVec<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_id2name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全局变量以g_开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string g_globalName <span class="token operator">=</span> <span class="token string">"global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>静态变量以s_开头 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> s_staticName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>回调函数以On开头</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">OnCallBackFuncName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建议头文件添加说明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/************************************************************************************* * Description  : 最好是添加一些当前文档必要的说明信息 * Author       : huzhenhong * Date         : 2021-08-19 11:20:00 * LastEditors  : huzhenhong * LastEditTime : 2022-03-23 14:04:46 *************************************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口添加详细说明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/************************************************************************************** @brief   检测接口* @param   [img]     检测帧* @param   [res]     检测结果* @return  [bool]    检测是否成功*************************************************************************************/</span><span class="token keyword">virtual</span> <span class="token keyword">bool</span>  <span class="token function">Detect</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> eDetectResult<span class="token operator">&amp;</span> res<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单行注释，语句和注释之间添加一个缩进， 双斜杆注释后追加空格</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// one line comment</span><span class="token keyword">int</span> varName<span class="token punctuation">;</span><span class="token comment">// one line comment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>多行注释</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** multi* lines* comment*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件名和类名相同</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ClassName.h</span><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数体内代码不超过20行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">FuncName</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*    * no    * more    * than    * 20    * lines    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>形参可以加 <code>const</code> 和 <code>&amp;</code> 就加上</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">DrawResult</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> drawImg<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> winname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义头文件在前，系统头文件在后，或者相反</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usrhead1.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usrhead2.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syshead1.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syshead2.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="格式化说明"><a href="#格式化说明" class="headerlink" title="格式化说明"></a>格式化说明</h3><p>​    使用 <strong>clang-format</strong> 进行代码的格式化</p><ul><li><p>格式化配置文件 <strong>.clang-format</strong>，放在项目根目录即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># reference from https://clang.llvm.org/docs/ClangFormatStyleOptions.html</span><span class="token key atrule">DisableFormat</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                  <span class="token comment"># 关闭格式化</span><span class="token key atrule">BasedOnStyle</span><span class="token punctuation">:</span> LLVM                    <span class="token comment"># 基础格式化方案</span><span class="token key atrule">Language</span><span class="token punctuation">:</span> Cpp                         <span class="token comment"># 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto</span><span class="token key atrule">Standard</span><span class="token punctuation">:</span> c++17                       <span class="token comment"># 标准: Auto, Latest, c++03, c++11, c++17, c++20</span><span class="token key atrule">UseTab</span><span class="token punctuation">:</span> Never                         <span class="token comment"># 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always</span><span class="token key atrule">TabWidth</span><span class="token punctuation">:</span> <span class="token number">4</span>                           <span class="token comment"># tab宽度</span><span class="token key atrule">IndentWidth</span><span class="token punctuation">:</span> <span class="token number">4</span>                        <span class="token comment"># 缩进宽度</span><span class="token key atrule">ConstructorInitializerIndentWidth</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token comment"># 构造函数的初始化列表的缩进宽度</span><span class="token key atrule">ContinuationIndentWidth</span><span class="token punctuation">:</span> <span class="token number">4</span>            <span class="token comment"># 延续的行的最小缩进宽度</span><span class="token key atrule">AccessModifierOffset</span><span class="token punctuation">:</span> <span class="token number">-2</span>              <span class="token comment"># 访问说明符(public、private等)的偏移</span><span class="token key atrule">IndentWrappedFunctionNames</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment"># 函数返回类型换行时，缩进函数声明或函数定义的函数名</span><span class="token key atrule">NamespaceIndentation</span><span class="token punctuation">:</span> All             <span class="token comment"># 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All</span><span class="token key atrule">IndentPPDirectives</span><span class="token punctuation">:</span> BeforeHash        <span class="token comment"># 预处理缩进, None, AfterHash, BeforeHash</span><span class="token key atrule">IndentCaseLabels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                <span class="token comment"># 缩进case标签</span><span class="token comment">#AlignEscapedNewlines: Right           # 对齐逃脱换行</span><span class="token comment">#AlignEscapedNewlinesLeft: true        # 左对齐逃脱换行(使用反斜杠换行)的反斜杠</span><span class="token comment">#DerivePointerAlignment: false         # 继承最常用的指针和引用的对齐方式</span><span class="token key atrule">AlignOperands</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                   <span class="token comment"># 水平对齐二元和三元表达式的操作数</span><span class="token key atrule">AlignTrailingComments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>           <span class="token comment"># 对齐连续的尾随的注释</span><span class="token key atrule">PointerAlignment</span><span class="token punctuation">:</span> Left                <span class="token comment"># 指针和引用的对齐: Left, Right, Middle</span><span class="token key atrule">AlignAfterOpenBracket</span><span class="token punctuation">:</span> Align          <span class="token comment"># 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)</span><span class="token key atrule">AlignConsecutiveAssignments</span><span class="token punctuation">:</span> AcrossComments               <span class="token comment"># 连续赋值时，对齐所有等号[AcrossEmptyLinesAndComments][AcrossComments]</span><span class="token key atrule">AlignConsecutiveDeclarations</span><span class="token punctuation">:</span> AcrossEmptyLinesAndComments <span class="token comment"># 连续声明时，对齐所有声明的变量名[AcrossEmptyLinesAndComments][AcrossComments]</span><span class="token key atrule">BinPackArguments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                                 <span class="token comment"># false表示函数实参要么都在同一行，要么都各自一行</span><span class="token key atrule">BinPackParameters</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                                <span class="token comment"># false表示所有形参要么都在同一行，要么都各自一行</span><span class="token key atrule">AllowAllParametersOfDeclarationOnNextLine</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment"># 允许函数声明的所有参数在放在下一行</span><span class="token key atrule">AllowAllArgumentsOnNextLine</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                      <span class="token comment"># 允许函数调用的所有参数在放在下一行,即使BinPackParameters为false</span><span class="token key atrule">AllowShortBlocksOnASingleLine</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                     <span class="token comment"># 允许短的块放在同一行</span><span class="token key atrule">AllowShortCaseLabelsOnASingleLine</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                 <span class="token comment"># 允许短的case标签放在同一行</span><span class="token key atrule">AllowShortFunctionsOnASingleLine</span><span class="token punctuation">:</span> Empty                 <span class="token comment"># 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All</span><span class="token key atrule">AllowShortIfStatementsOnASingleLine</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>              <span class="token comment"># 允许短的if语句保持在同一行</span><span class="token key atrule">AllowShortLoopsOnASingleLine</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                     <span class="token comment"># 允许短的循环保持在同一行</span><span class="token comment">#AlwaysBreakAfterDefinitionReturnType: None              # 总是在定义返回类型后换行(deprecated)</span><span class="token key atrule">AlwaysBreakAfterReturnType</span><span class="token punctuation">:</span> None                        <span class="token comment"># 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)</span><span class="token key atrule">AlwaysBreakBeforeMultilineStrings</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                <span class="token comment"># 总是在多行string字面量前换行</span><span class="token key atrule">AlwaysBreakTemplateDeclarations</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                   <span class="token comment"># 总是在template声明后换行</span><span class="token key atrule">ConstructorInitializerAllOnOneLineOrOnePerLine</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 构造函数的初始化列表要么都在同一行，要么都各自一行</span><span class="token key atrule">BreakConstructorInitializers</span><span class="token punctuation">:</span> BeforeComma               <span class="token comment"># 构造函数的初始化列表的逗号在前</span><span class="token comment">#ExperimentalAutoDetectBinPacking: true                  # 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)</span><span class="token key atrule">Cpp11BracedListStyle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                              <span class="token comment"># 去除C++11的列表初始化的大括号&#123;后和&#125;前的空格</span><span class="token comment"># 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),</span><span class="token comment">#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),</span><span class="token comment">#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom</span><span class="token comment">#   注：这里认为语句块也属于函数</span><span class="token key atrule">BreakBeforeBraces</span><span class="token punctuation">:</span> Allman<span class="token key atrule">BraceWrapping</span><span class="token punctuation">:</span>                  <span class="token comment"># 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效</span>  <span class="token key atrule">AfterClass</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>              <span class="token comment"># class定义后面</span>  <span class="token key atrule">AfterControlStatement</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 控制语句后面</span>  <span class="token key atrule">AfterEnum</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>               <span class="token comment"># enum定义后面</span>  <span class="token key atrule">AfterFunction</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>           <span class="token comment"># 函数定义后面</span>  <span class="token key atrule">AfterNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token comment"># 命名空间定义后面</span>  <span class="token key atrule">AfterObjCDeclaration</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># ObjC定义后面</span>  <span class="token key atrule">AfterStruct</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># struct定义后面</span>  <span class="token key atrule">AfterUnion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>              <span class="token comment"># union定义后面</span>  <span class="token key atrule">AfterExternBlock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment"># extern "C" 后面</span>  <span class="token key atrule">BeforeCatch</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># catch之前</span>  <span class="token key atrule">BeforeElse</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>              <span class="token comment"># else之前</span>  <span class="token key atrule">IndentBraces</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 缩进大括号</span>  <span class="token key atrule">SplitEmptyFunction</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment"># 空函数体换行</span>  <span class="token key atrule">SplitEmptyRecord</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment"># 空类换行</span>  <span class="token key atrule">SplitEmptyNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 空命名空间换行</span><span class="token key atrule">BreakBeforeBinaryOperators</span><span class="token punctuation">:</span> None            <span class="token comment"># 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)</span><span class="token key atrule">BreakBeforeTernaryOperators</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token comment"># 在三元运算符前换行</span><span class="token key atrule">BreakStringLiterals</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                   <span class="token comment"># 字符串字面值换行</span><span class="token key atrule">ColumnLimit</span><span class="token punctuation">:</span> <span class="token number">0</span>                              <span class="token comment"># 每行字符的限制，0表示没有限制，等到了14.0版本再修改为80</span><span class="token key atrule">PenaltyBreakAssignment</span><span class="token punctuation">:</span> <span class="token number">80</span>                  <span class="token comment"># 赋值对齐换行的penalty</span><span class="token key atrule">PenaltyBreakBeforeFirstCallParameter</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token comment"># 在call(后对函数调用换行的penalty</span><span class="token key atrule">PenaltyBreakComment</span><span class="token punctuation">:</span> <span class="token number">80</span>                     <span class="token comment"># 在一个注释中引入换行的penalty</span><span class="token key atrule">PenaltyBreakFirstLessLess</span><span class="token punctuation">:</span> <span class="token number">80</span>               <span class="token comment"># 第一次在&lt;&lt;前换行的penalty</span><span class="token comment"># PenaltyBreakOpenParenthesis: 80             # ( 后的惩罚 14.0 后的版本才有</span><span class="token key atrule">PenaltyBreakString</span><span class="token punctuation">:</span> <span class="token number">80</span>                      <span class="token comment"># 在一个字符串字面量中引入换行的penalty</span><span class="token key atrule">PenaltyBreakTemplateDeclaration</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">PenaltyExcessCharacter</span><span class="token punctuation">:</span> <span class="token number">800</span>                 <span class="token comment"># 最多能超出ColumnLimit多少个字符</span><span class="token key atrule">PenaltyIndentedWhitespace</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token key atrule">PenaltyReturnTypeOnItsOwnLine</span><span class="token punctuation">:</span> <span class="token number">1000</span>         <span class="token comment"># 将函数的返回类型放到它自己的行的penalty</span><span class="token key atrule">SpaceAfterCStyleCast</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                 <span class="token comment"># 在C风格类型转换后添加空格</span><span class="token key atrule">SpaceAfterTemplateKeyword</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 在模板 template 关键字后面添加空格</span><span class="token key atrule">SpaceBeforeAssignmentOperators</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment"># 在赋值运算符之前添加空格</span><span class="token key atrule">SpaceBeforeParens</span><span class="token punctuation">:</span> ControlStatements        <span class="token comment"># 开圆括号之前添加一个空格: Never, ControlStatements, Always</span><span class="token key atrule">SpacesBeforeTrailingComments</span><span class="token punctuation">:</span> <span class="token number">2</span>             <span class="token comment"># 在尾随的评论前添加的空格数(只适用于//)</span><span class="token key atrule">SpacesInAngles</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                       <span class="token comment"># 在尖括号的&lt;后和>前添加空格</span><span class="token key atrule">SpacesInContainerLiterals</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格</span><span class="token key atrule">SpacesInCStyleCastParentheses</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment"># 在C风格类型转换的括号中添加空格</span><span class="token key atrule">SpacesInParentheses</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                  <span class="token comment"># 在圆括号的(后和)前添加空格</span><span class="token key atrule">SpaceInEmptyParentheses</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>              <span class="token comment"># 在空的圆括号中添加空格</span><span class="token key atrule">SpacesInSquareBrackets</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>               <span class="token comment"># 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响</span><span class="token key atrule">PenaltyIndentedWhitespace</span><span class="token punctuation">:</span> <span class="token number">10</span>               <span class="token comment"># 单行最多允许的连续空格?</span><span class="token key atrule">CommentPragmas</span><span class="token punctuation">:</span> <span class="token string">'^ IWYU pragma:'</span>            <span class="token comment"># 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变</span><span class="token key atrule">CompactNamespaces</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                    <span class="token comment"># 连续 namespace</span><span class="token key atrule">FixNamespaceComments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                  <span class="token comment"># namespace 后添加 // namespace xxx</span><span class="token key atrule">KeepEmptyLinesAtTheStartOfBlocks</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment"># 保留在块开始处的空行</span><span class="token key atrule">MaxEmptyLinesToKeep</span><span class="token punctuation">:</span> <span class="token number">2</span>                      <span class="token comment"># 连续空行的最大数量</span><span class="token key atrule">ReflowComments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                        <span class="token comment"># 允许重新排版注释</span><span class="token key atrule">SpacesInLineCommentPrefix</span><span class="token punctuation">:</span>  <span class="token key atrule">Minimum</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">Maximum</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">SortIncludes</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                         <span class="token comment"># 允许排序#include</span><span class="token comment"># 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，</span><span class="token comment"># 可以定义负数优先级从而保证某些#include永远在最前面</span><span class="token key atrule">IncludeCategories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">Regex</span><span class="token punctuation">:</span> <span class="token string">'^"(llvm|llvm-c|clang|clang-c)/'</span>    <span class="token key atrule">Priority</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token punctuation">-</span> <span class="token key atrule">Regex</span><span class="token punctuation">:</span> <span class="token string">'^(&lt;|"(gtest|isl|json)/)'</span>    <span class="token key atrule">Priority</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token punctuation">-</span> <span class="token key atrule">Regex</span><span class="token punctuation">:</span> <span class="token string">'.*'</span>    <span class="token key atrule">Priority</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>VSCode配置说明</p><ul><li><p>在设置栏搜索</p><ul><li><code>C_Cpp: Formatting</code>选择 <code>clangFormat</code></li><li><code>Editor: Format On Save Mode</code> 选择 file</li><li><code>Editor: Format On Paste</code> 勾选则粘贴时自动格式化</li><li><code>Editor: Format On Save</code> 勾选则保存时自动格式化</li></ul></li><li><p>或者安装 <code>clang-format</code>，执行命令进行批量格式化</p><ul><li><code>clang g-format -style=/path/to/.clang-format -i /path/to/file </code></li></ul></li></ul></li></ul><h3 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usrhead1.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usrhead2.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syshead1.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syshead2.h></span></span><span class="token comment">// 命名空间名尽量简短，全部小写</span><span class="token keyword">namespace</span> cvkit <span class="token punctuation">&#123;</span><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EnumName</span>     <span class="token punctuation">&#123;</span>        RES_NONE<span class="token punctuation">,</span>        RES_SUCCES<span class="token punctuation">,</span>        RES_FAILED<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">StructName</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> y<span class="token punctuation">;</span>        EnumName res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 定义接口类</span>    <span class="token keyword">class</span> <span class="token class-name">IClassName</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">virtual</span> <span class="token keyword">bool</span>  <span class="token function">FuncName1</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> StructName<span class="token operator">&amp;</span> res<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> <span class="token keyword">bool</span>  <span class="token function">FuncName2</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> StructName<span class="token operator">&amp;</span> res<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> IClassNamePtr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>IClassName<span class="token operator">></span><span class="token punctuation">;</span>        <span class="token comment">// 定义实现类</span>    <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IClassName</span></span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment">// 所有 override 的接口按顺序放在一起</span>        <span class="token keyword">bool</span>  <span class="token function">FuncName1</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> StructName<span class="token operator">&amp;</span> res<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span>  <span class="token function">FuncName2</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> img<span class="token punctuation">,</span> StructName<span class="token operator">&amp;</span> res<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>                <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token comment">// 当前自定义的公共接口放在一起，添加必要的说明</span>        <span class="token keyword">bool</span>  <span class="token function">FuncName3</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> myName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加必要的函数说明，单行注释建议放在语句后</span>                    <span class="token comment">/*******************************            * @brief   多行注释放在语句上，最好对参数及返回值加以介绍            * @param   [img]     检测帧            * @param   [res]     检测结果            * @return  [bool]    检测是否成功            *********************************/</span>        <span class="token keyword">bool</span>  <span class="token function">FuncName3</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span>  herName<span class="token punctuation">,</span>                           <span class="token keyword">int</span> varNmae1<span class="token punctuation">,</span>                            <span class="token keyword">float</span> varNmae2<span class="token punctuation">,</span>                            <span class="token keyword">double</span> varNmae3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">void</span>  <span class="token function">OnCallBackFuncName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token comment">// 私有接口放在 private 下对齐放好</span>        <span class="token keyword">void</span>  <span class="token function">InnerFuncName1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span>  <span class="token function">InnerFuncName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span><span class="token operator">:</span>            <span class="token keyword">bool</span>              m_isName<span class="token punctuation">;</span><span class="token comment">// bool变量以is开头</span>            <span class="token keyword">int</span>                 m_varName1<span class="token punctuation">;</span><span class="token comment">// int变量驼峰小写字母开头</span>            <span class="token keyword">float</span>m_varName2<span class="token punctuation">;</span><span class="token comment">// float变量驼峰小写字母开头</span>            <span class="token keyword">double</span>              m_varName3<span class="token punctuation">;</span><span class="token comment">// double变量驼峰小写字母开头</span>            <span class="token keyword">void</span><span class="token operator">*</span>m_pPointName<span class="token punctuation">;</span><span class="token comment">// 裸指针以p开头</span>            SmartPointPtr     m_smartPointPtr<span class="token punctuation">;</span><span class="token comment">// 智能指针以Ptr结尾</span>            std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_nameQue<span class="token punctuation">;</span><span class="token comment">// 容器变量以容器类型简写结束</span>            std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_nameDeq<span class="token punctuation">;</span><span class="token comment">// 容器变量以容器类型简写结束</span>            std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_nameVec<span class="token punctuation">;</span><span class="token comment">// 容器变量以容器类型简写结束</span>            std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m_id2name<span class="token punctuation">;</span><span class="token comment">// map 写成 xx2xx的形式</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//////////////////////////////////////////////////////////////////////////////////////////////////////</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"demo.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cvkit<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string g_globalName <span class="token operator">=</span> <span class="token string">"huzh"</span><span class="token punctuation">;</span><span class="token comment">// 全局变量以g_开头</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_staticName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 静态变量以s_开头   </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 局部变量</span>    <span class="token keyword">bool</span>              isName <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// bool变量以is开头</span>    <span class="token keyword">int</span>                 varName1 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// int变量驼峰小写字母开头</span>    <span class="token keyword">float</span>varName2 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// float变量驼峰小写字母开头</span>    <span class="token keyword">double</span>              varName3 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// double变量驼峰小写字母开头</span>    <span class="token keyword">void</span><span class="token operator">*</span>pPointName   <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 裸指针以p开头</span>    SmartPointPtr     smartPointPtr <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 智能指针以Ptr结尾</span>    std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> nameQue <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 容器变量以容器类型简写结束</span>    std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> nameDeq <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 容器变量以容器类型简写结束</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> nameVec <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 容器变量以容器类型简写结束</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> id2name <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// map 写成 xx2xx的形式</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">FuncName3</span><span class="token punctuation">(</span>g_globalName<span class="token punctuation">,</span>                  varNmae1<span class="token punctuation">,</span>                  varNmae2<span class="token punctuation">,</span>                  varNmae3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// do something you want</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码提交自动格式化及-bug-检查"><a href="#代码提交自动格式化及-bug-检查" class="headerlink" title="代码提交自动格式化及 bug 检查"></a>代码提交自动格式化及 bug 检查</h3><p>基于 pre-commit 的代码提交自动格式化方案</p><ul><li><p>安装 pre-commit 环境</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install pre-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当前项目安装 pre-commit </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 项目根目录下执行以下命令pre-commit install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>根目录下添加 .pre-commit-config.yaml文件, 内容如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">fail_fast</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">repos</span><span class="token punctuation">:</span><span class="token punctuation">-</span>   <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/huzhenhong/pre<span class="token punctuation">-</span>commit<span class="token punctuation">-</span>hooks<span class="token punctuation">-</span>cpp<span class="token punctuation">-</span>simple    <span class="token key atrule">rev</span><span class="token punctuation">:</span> master    <span class="token key atrule">hooks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span>   <span class="token key atrule">id</span><span class="token punctuation">:</span> clang<span class="token punctuation">-</span>format    <span class="token comment">#-   id: cppcheck # 安装后可用 yum install cppcheck</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来每次执行 <code>git commit -m &quot;say something&quot;</code> 都会自动对代码进行</p><ul><li>按照根目录的.clang-format 文件进行原地格式化</li><li>错误检查</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python代码风格指南</title>
      <link href="/article/python-code-style-guide/"/>
      <url>/article/python-code-style-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="python代码风格指南"><a href="#python代码风格指南" class="headerlink" title="python代码风格指南"></a>python代码风格指南</h1><ul><li><p>命名需简短、且需达到顾名思义的效果</p></li><li><p>代码风格追求整洁对齐</p><ul><li>逻辑块或语句块之间用两个左右的<strong>空行进行物理分割</strong></li><li>函数体代码不超过20行</li><li>单行代码不易过长</li><li>函数参数过多时拆分为每个参数单独一行</li></ul></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li><p>类名采用以大写字母开头驼峰命名，其它均采用全小写字母加下划线</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ClassName<span class="token comment"># 类</span>module_name<span class="token comment"># 模块</span>package_name<span class="token comment"># 包</span>GLOBAL_VAR_NAME<span class="token comment"># 全局变量（全部大写，以 GLOBAL_ 开头）</span>CONST_VAR_NAME<span class="token comment"># 常量（全部大写，以 CONST_ 开头）</span>function_name<span class="token comment"># 普通函数</span>parameter_name<span class="token comment"># 参数</span>local_var_name<span class="token comment"># 局部变量</span>var_list<span class="token comment"># list</span>var_tuple<span class="token comment"># tuple</span>xxx2xxx<span class="token comment"># dict</span>self<span class="token punctuation">.</span>function_name<span class="token comment"># 共有函数</span>self<span class="token punctuation">.</span>__function_name<span class="token comment"># 私有函数，两个下划线开头</span>self<span class="token punctuation">.</span>_var_name<span class="token comment"># 成员变量，单个下划线开头</span>self<span class="token punctuation">.</span>_var_list<span class="token comment"># list</span>self<span class="token punctuation">.</span>_var_tuple<span class="token comment"># tuple</span>self<span class="token punctuation">.</span>_xxx2xxx<span class="token comment"># dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件开头添加必要说明信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token triple-quoted-string string">''' Description  : 封装的一个日志类 Author       : huzhenhong Date         : 2019-10-24 13:32:14 LastEditors  : huzhenhong LastEditTime : 2020-10-14 20:56:25'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注释对齐，”#” 后加空格</p></li><li><p>文件名和类名（模块名）相同</p></li></ul><h3 id="格式化说明"><a href="#格式化说明" class="headerlink" title="格式化说明"></a>格式化说明</h3><p>​    使用 <strong>black</strong> 进行代码的格式化，需要先安装，命令如下</p><p>​    <code>pip install black  </code></p><ul><li><p>格式化配置文件 <strong>pyproject.toml</strong>，放在项目根目录即可</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[tool.black]# required-version &#x3D; &quot;22.1.0&quot;line-length &#x3D; 88skip-string-normalization &#x3D; trueinclude &#x3D; &#39;(\.pyi?|\.ipynb)$&#39;extend-exclude &#x3D; &#39;&#39;&#39;# &#x2F;foo.py&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>VSCode配置说明</p><ul><li><p>在设置栏搜索</p><ul><li><p><code>Python › Formatting: Provider</code>选择 <code>black</code></p></li><li><p><code>Format On Save</code> 勾选</p></li></ul></li><li><p>或者执行命令进行批量格式化</p><ul><li><code>python -m black --config /path/to/pyproject.toml /path/to/file </code></li></ul></li></ul></li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> var_name1<span class="token punctuation">,</span> var_name2<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_var_name1 <span class="token operator">=</span> var_name1        self<span class="token punctuation">.</span>_var_name2 <span class="token operator">=</span> var_name2        <span class="token comment"># 一些需要用到的成员变量最好一开始就定义赋空</span>        self<span class="token punctuation">.</span>_var_name <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 成员变量，单个下划线开头</span>        self<span class="token punctuation">.</span>_var_list <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># list</span>        self<span class="token punctuation">.</span>_var_tuple <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># tuple</span>        self<span class="token punctuation">.</span>_xxx2xxx <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># dict</span>                            <span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                       var_name<span class="token punctuation">,</span>                       var_list<span class="token punctuation">,</span>                       var_tuple<span class="token punctuation">,</span>                       xxx2xxx<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_var_name <span class="token operator">=</span> var_name        self<span class="token punctuation">.</span>_var_list <span class="token operator">=</span> var_list        self<span class="token punctuation">.</span>_var_tuple <span class="token operator">=</span> var_tuple        self<span class="token punctuation">.</span>_xxx2xxx <span class="token operator">=</span> xxx2xxx                self<span class="token punctuation">.</span>__function_name<span class="token punctuation">(</span>var_name<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">__function_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> var_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">pass</span>        <span class="token comment">#######################################################################################</span>GLOBAL_VAR_NAME<span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 全局变量（全部大写）</span>CONST_VAR_NAME <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token comment"># 常量（全部大写）</span>   <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parameter_name<span class="token comment"># 参数</span>    var_name<span class="token comment"># 局部变量</span>    var_list<span class="token comment"># list</span>    var_tuple<span class="token comment"># tuple</span>    xxx2xxx<span class="token comment"># dict</span>ClassName obj<span class="token punctuation">(</span>parameter_name<span class="token punctuation">,</span> local_var_name<span class="token punctuation">)</span>    obj<span class="token punctuation">.</span>function_name<span class="token punctuation">(</span>var_name<span class="token punctuation">,</span>                       var_list<span class="token punctuation">,</span>                       var_tuple<span class="token punctuation">,</span>                       xxx2xxx<span class="token punctuation">)</span>    <span class="token comment"># do something  you want</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/article/build-personal-blog/"/>
      <url>/article/build-personal-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h3 id="一、安装git和nodejs"><a href="#一、安装git和nodejs" class="headerlink" title="一、安装git和nodejs"></a>一、安装git和nodejs</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 验证是否安装成功git --versionnode -vnpm-v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、安装-hexo"><a href="#二、安装-hexo" class="headerlink" title="二、安装 hexo"></a>二、安装 hexo</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install -g hexo-cli# 验证是否安装成功hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、初始化博客文件夹"><a href="#三、初始化博客文件夹" class="headerlink" title="三、初始化博客文件夹"></a>三、初始化博客文件夹</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo init blog_foldercd blog_foldernpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成如下文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">├── node_modules<span class="token comment"># 用来存储已安装的各类依赖包</span>├── public<span class="token comment"># 存放生成的页面，用于部署</span>├── scaffolds<span class="token comment"># 模板文件夹</span>│   ├── draft.md<span class="token comment"># 草稿</span>│   ├── page.md<span class="token comment"># 页面</span>│   └── post.md<span class="token comment"># 文章</span>├── source<span class="token comment"># 资源文件夹，存放图片、视频、文档等</span>│   ├── _posts<span class="token comment"># 要发表的文章</span>│   ├── _drafts<span class="token comment"># 草稿</span>├── themes<span class="token comment"># 主题文件夹，里面的每个主题单独一个文件夹，默认主题为 landscape</span>├── _config.yml<span class="token comment"># 博客的配置文件</span>├── db.json├── package.json<span class="token comment"># 用来查看 Hexo 的版本以及相关依赖包的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、生成网页"><a href="#四、生成网页" class="headerlink" title="四、生成网页"></a>四、生成网页</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、部署到服务器"><a href="#五、部署到服务器" class="headerlink" title="五、部署到服务器"></a>五、部署到服务器</h3><ul><li><p>配置根目录下的 _config.yml 文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//xxx.github.io/article<span class="token comment"># 换成自己的</span><span class="token key atrule">root</span><span class="token punctuation">:</span> /article/<span class="token comment"># 这个不能搞错，很重要</span><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxx/article.git<span class="token comment"># 换成自己的</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建并编辑 <code>.github\workflows\gh_pages.yml</code> 如下</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Blog CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token comment"># check it to your workflow can access it</span>      <span class="token comment"># from: https://github.com/actions/checkout</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master          <span class="token comment"># from: https://github.com/actions/setup-node</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 14.x        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14.x"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Hexo Dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install hexo-cli -g          npm install --save hexo-deployer-git          npm i --save hexo-wordcount# 字数统计          npm install hexo-generator-search --save# 快捷搜索          npm install</span>                <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Deploy Private Key        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">HEXO_DEPLOY_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.PRIVATE_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># secrets.PRIVATE_KEY 是在仓库“Settings=》Secrets=》Actions”里面配置的私钥</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh/          echo "$HEXO_DEPLOY_PRIVATE_KEY" > ~/.ssh/id_rsa           chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com >> ~/.ssh/known_hosts</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Git Infomation        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git config --global user.name xxx           git config --global user.email 455879568@qq.com          git remote set-url origin git@github.com:xxx/article.git</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo clean          hexo generate           hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样每次提交到github就会自动部署到 <code>https://xxx.github.io/article/</code></p></li></ul><p>​    </p><h3 id="六、代码高亮"><a href="#六、代码高亮" class="headerlink" title="六、代码高亮"></a>六、代码高亮</h3><p>折腾了一天，hexo 自带的 highlight 好像没效果，可能是远程下载失败吧，使用 prismjs 代替</p><ul><li><p>到 <a href="https://prismjs.com/download.html#themes=prism&amp;amp;languages=markup+css+clike+javascript">https://prismjs.com/download.html#themes=prism&amp;amp;languages=markup+css+clike+javascript</a> 根据需要勾选 Languages 和 Plugins，然后拉到最下面下载对应的 js 和 css 文件，放到 <code>themes\halo\source\js\</code>  和 <code>themes\halo\source\css\</code> 路径下</p></li><li><p>修改 <code>themes\halo\layout\_partial\head.ejs</code> 文件，再末尾 <code>&lt;/head&gt;</code> 前添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;link rel="stylesheet" href="/article/js/prism.css"<span class="token punctuation">></span>&lt;script src="/article。js/prism.js" async<span class="token punctuation">></span>&lt;/script<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改 <code>themes\halo\_config.yml</code> 如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 显示行号</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token comment"># tab用空格替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过信号调试程序</title>
      <link href="/article/debug-by-signal/"/>
      <url>/article/debug-by-signal/</url>
      
        <content type="html"><![CDATA[<h1 id="通过信号调试程序"><a href="#通过信号调试程序" class="headerlink" title="通过信号调试程序"></a>通过信号调试程序</h1><h4 id="程序运行可以通过终端向其发送命令来达到开关日志等操作"><a href="#程序运行可以通过终端向其发送命令来达到开关日志等操作" class="headerlink" title="程序运行可以通过终端向其发送命令来达到开关日志等操作"></a>程序运行可以通过终端向其发送命令来达到开关日志等操作</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDebug<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       <span class="token comment">// do something</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">OnTrigger</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>signum <span class="token operator">!=</span> SIGUSR1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">bool</span> isDebug <span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isDebug<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        isStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        isStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGUSR1<span class="token punctuation">,</span> OnTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册信号处理函数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>kill -s SIGUSR1 PID </code> 来开关调试</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于expect和rsync的自动化拷贝脚本</title>
      <link href="/article/auto-sync/"/>
      <url>/article/auto-sync/</url>
      
        <content type="html"><![CDATA[<h1 id="基于expect和rsync的自动化拷贝脚本"><a href="#基于expect和rsync的自动化拷贝脚本" class="headerlink" title="基于expect和rsync的自动化拷贝脚本"></a>基于expect和rsync的自动化拷贝脚本</h1><h3 id="rsync-拷贝"><a href="#rsync-拷贝" class="headerlink" title="rsync 拷贝"></a>rsync 拷贝</h3><ul><li><code>rsync ssh -avuzP --exclude=&#123;.*,*.mp3,*.mp4,xx,xxx&#125; username@xxx.xxx.xxx.xxx:/you/src/path/ /you/dst/path/subdir1/</code><ul><li>不支持创建多级子目录，也即 <code>/you/dst/path/</code> 必须存在，然后命令会自动创建 <code>subdir1 </code></li><li>主要通过 –exclude 来排除相应的文件及文件夹，但是无法改变目标目录层级</li></ul></li><li><code>rsync -avuzP --exclude=&#123;.*,*.mp3,*.mp4,xx,xxx&#125; --rsync-path=&quot;mkdir -p /you/dst/path/subdir1/subdir2 &amp;&amp; rsync&quot; username@xxx.xxx.xxx.xxx:/you/src/path/xx/xx /you/dst/path/subdir1/subdir2</code><ul><li>–rsync-path 可以创建多级子目录，也即会自动创建 <code>/you/dst/path/subdir1/subdir2</code> ，可以灵活指定源路径和目标路径，更好的组织目标目录层级</li><li>shell 里直接执行就好</li><li>–exclude&#x3D;{.<em>,</em>.mp3,*.mp4,xx,xxx} 无效，必须分开写成 <code>--exclude=*.mp3 --exclude=*.mp4</code></li></ul></li></ul><h3 id="expect-自动输入密码"><a href="#expect-自动输入密码" class="headerlink" title="expect 自动输入密码"></a>expect 自动输入密码</h3><ul><li><p>rsync 是很方便，但是每次都需要输入密码，虽然可以通过配置 ssh 免密的方式拷贝，但是需要管理员权限</p></li><li><p>expect  安装命令 <code>sudo yum install expect </code> </p></li><li><p>通过 expect 自动输入密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">spawn &#x2F;you&#x2F;script&#x2F;path&#x2F;copy.sh $date $category $sub_category# shell 脚本使用绝对路径while &#123;1&#125; &#123;expect -re &quot;password&quot; &#123; send &quot;you-password\n&quot; &#125;puts &quot;running...&quot;sleep 0.1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>while 是因为需要连续输入密码</li><li>这里通过在 .exp 脚本里执行 .sh 文件（绝对路径），<strong>记得给 copy.sh 文件可执行权限</strong></li></ul></li></ul><h3 id="Crontab-定制执行脚本"><a href="#Crontab-定制执行脚本" class="headerlink" title="Crontab 定制执行脚本"></a>Crontab 定制执行脚本</h3><ul><li><code>crontab -e </code>打开自动执行配置，输入<ul><li><code>0 8,18 * * * /app/shangyu_data/sucai/run.exp + - -</code></li><li>每天8点和18点执行拷贝，<strong>记得给 run.exp 文件可执行权限</strong></li><li>其它自定义例子：[](<a href="https://www.jianshu.com/p/d93e2b177814">关于定时执行任务：Crontab的20个例子 - 简书 (jianshu.com)</a>)</li></ul></li><li><code>crontab -l </code>查看已有任务</li><li><code>crontab -r </code>删除已有任务（全部）</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>run.exp</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;usr&#x2F;bin&#x2F;expect -fset timeout 30set date [lindex $argv 0]  set category [lindex $argv 1]  set sub_category [lindex $argv 2]if &#123; &quot;$date&quot; &#x3D;&#x3D; &quot;-&quot;&#125; &#123;puts &quot;copy all days.&quot;sleep 3&#125; elseif &#123; &quot;$date&quot; &#x3D;&#x3D; &quot;+&quot;&#125; &#123;puts &quot;copy today.&quot;set date [exec date &quot;+%Y%m%d&quot;]sleep 3&#125; else &#123;puts &quot;copy $date&quot;sleep 3&#125;puts &quot;date: $date&quot;sleep 3spawn &#x2F;you&#x2F;script&#x2F;path&#x2F;copy.sh $date $category $sub_category# shell 脚本使用绝对路径#spawn &#x2F;you&#x2F;script&#x2F;path&#x2F;copy.python $date $category $sub_category# python 脚本使用绝对路径while &#123;1&#125; &#123;expect -re &quot;password&quot; &#123; send &quot;you-password\n&quot; &#125;puts &quot;running...&quot;sleep 0.1&#125;interact<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>copy.sh</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;usr&#x2F;bin&#x2F;bashSRC_ROOT&#x3D;&quot;&#x2F;you&#x2F;src&#x2F;path&quot;DST_ROOT&#x3D;&quot;&#x2F;you&#x2F;dst&#x2F;path&quot;DST_HOST&#x3D;&quot;xxx.xxx.xxx.xxx&quot;# 获取路径下的子目录function get_dir()&#123;echo &quot;-f: get_dir&quot; echo &quot;-1: &quot;$1for dir in $(ls $1)doif test -d $1&#x2F;$dirthenall_date&#x3D;($&#123;all_date[*]&#125; $dir)fidoneecho &quot;all_date: &quot;$&#123;all_date[@]&#125;&#125;function excute_copy()&#123;# $1: dates# $2: sub_category# $3: categoryecho &quot;-f: excute_copy&quot; echo &quot;-1: &quot;$1echo &quot;-2: &quot;$2echo &quot;-3: &quot;$3for date in $1dosrc_dir&#x3D;$SRC_ROOT&#x2F;$2&#x2F;$date&#x2F;$3&#x2F;dst_dir&#x3D;$DST_ROOT&#x2F;$3&#x2F;$2&#x2F;$date&#x2F;make_dir_cmd&#x3D;&quot;mkdir -p $dst_dir &amp;&amp; rsync&quot;rsync -avuzP -ssh --exclude&#x3D;&#123;.*,*.hikvision,*.dahua&#125; --rsync-path&#x3D;&quot;$&#123;make_dir_cmd&#125;&quot; $src_dir wuhan@$&#123;DST_HOST&#125;:$&#123;dst_dir&#125;done&#125;function copy_sub_category_data()&#123;# $1: sub_category# $2: category# $3: dateecho &quot;-f: copy_sub_category_data&quot; echo &quot;-1: &quot;$1echo &quot;-2: &quot;$2echo &quot;-3: &quot;$3# 未指定日期if [ &quot;$3&quot; &#x3D; &quot;-&quot; ]then# 拷贝全部日期echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy all date start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;get_dir $SRC_ROOT&#x2F;$1all_date&#x3D;$&#123;all_date[*]&#125;for date in $all_datedosrc_dir&#x3D;$SRC_ROOT&#x2F;$1&#x2F;$date&#x2F;$2&#x2F;dst_dir&#x3D;$DST_ROOT&#x2F;$2&#x2F;$1&#x2F;$date&#x2F;make_dir_cmd&#x3D;&quot;mkdir -p $dst_dir &amp;&amp; rsync&quot;rsync -avuzP --exclude&#x3D;&#123;.*,*.hikvision,*.dahua&#125; --rsync-path&#x3D;&quot;$&#123;make_dir_cmd&#125;&quot; $src_dir wuhan@$&#123;DST_HOST&#125;:$&#123;dst_dir&#125;doneall_date&#x3D;&quot;&quot;echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy all date finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;else# 拷贝指定日期echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy date $3 start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;for date in $3dosrc_dir&#x3D;$SRC_ROOT&#x2F;$1&#x2F;$date&#x2F;$2&#x2F;dst_dir&#x3D;$DST_ROOT&#x2F;$2&#x2F;$1&#x2F;$date&#x2F;make_dir_cmd&#x3D;&quot;mkdir -p $dst_dir &amp;&amp; rsync&quot;rsync -avuzP --exclude&#x3D;&#123;.*,*.hikvision,*.dahua&#125; --rsync-path&#x3D;&quot;$&#123;make_dir_cmd&#125;&quot; $src_dir wuhan@$&#123;DST_HOST&#125;:$&#123;dst_dir&#125;doneecho &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy date $3 finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;fi&#125;function copy_category_data()&#123;# $1: category# $2: sub_category# $3: dateecho &quot;-f: copy_category_data&quot; echo &quot;-1: &quot;$1echo &quot;-2: &quot;$2echo &quot;-3: &quot;$3# 未指定 sub_categoryif [ &quot;$2&quot; &#x3D; &quot;-&quot; ]then# 拷贝 class-1、class-2、class-3echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy all sub_category start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;copy_sub_category_data yewu $1 $3copy_sub_category_data shibie $1 $3copy_sub_category_data zhengque $1 $3echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy all sub_category finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;else# 拷贝指定echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy sub_category $2 start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;copy_sub_category_data $2 $1 $3echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy sub_category $2 finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;fi&#125;function copy_data()&#123;# $1: date# $2: category# $3: sub_categoryecho &quot;-f: copy_data&quot; echo &quot;-1: &quot;$1echo &quot;-2: &quot;$2echo &quot;-3: &quot;$3# 未指定 A、B、C、D、Eif [ &quot;$2&quot; &#x3D; &quot;-&quot; ]then# 拷贝全部种类echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy all category start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;copy_category_data A $3 $1copy_category_data B $3 $1copy_category_data C $3 $1copy_category_data D $3 $1copy_category_data E $3 $1echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy all category finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;else# 拷贝指定种类echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy $2 category start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;copy_category_data $2 $3 $1echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copy $2 category finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;fi&#125;#cur_date&#x3D;&quot;&#96;date +%Y%m%d&#96;&quot; #echo &quot;cur_date: &quot;$&#123;cur_date&#125;# 传递三个参数#echo $1#echo $2#echo $3echo &quot;&quot;echo &quot;&quot;date&#x3D;$1category&#x3D;$2# A、B、C、D、Esub_category&#x3D;$3# class-1、class-2、class-3echo &quot;date: $&#123;date&#125;&quot;echo &quot;category: $&#123;category&#125;&quot;echo &quot;sub_category: $&#123;sub_category&#125;&quot;copy_data $&#123;date&#125; $&#123;category&#125; $&#123;sub_category&#125;echo &quot;&quot;echo &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>copy.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment">#-*- coding: utf-8 -*-</span> <span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> pexpect<span class="token keyword">import</span> datetimeSRC_ROOT<span class="token operator">=</span><span class="token string">"/you/src/path"</span>DST_ROOT<span class="token operator">=</span><span class="token string">"/you/dst/path"</span>DST_USER<span class="token operator">=</span><span class="token string">"username"</span>DST_HOST<span class="token operator">=</span><span class="token string">"xxx.xxx.xxx.xxx"</span><span class="token keyword">def</span> <span class="token function">copy_category</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start copy &#123;&#125;...."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sub_category: &#123;&#125;, date: &#123;&#125;, category: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">)</span>src_path <span class="token operator">=</span> SRC_ROOT <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> sub_category <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> category <span class="token operator">+</span> <span class="token string">'/'</span><span class="token comment"># category 文件夹不拷贝</span>dst_path <span class="token operator">=</span> DST_ROOT <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> category <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> sub_category <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">'/'</span>cmd<span class="token operator">=</span><span class="token triple-quoted-string string">"""rsync -avuzP --exclude=&#123;.*,*.hikvision,*.dahua&#125; --rsync-path="mkdir -p """</span> <span class="token operator">+</span> dst_path <span class="token operator">+</span> <span class="token triple-quoted-string string">""" &amp;&amp; rsync" """</span> <span class="token operator">+</span> src_path <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> DST_USER <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> DST_HOST <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> dst_path<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>child <span class="token operator">=</span> pexpect<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>child<span class="token punctuation">.</span>expect<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>child<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'ytx@1234'</span><span class="token punctuation">)</span><span class="token comment">#print(os.system(cmd))</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop copy &#123;&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">copy_date</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start copy &#123;&#125;...."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sub_category: &#123;&#125;, date: &#123;&#125;, category: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> category <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span><span class="token comment"># 拷贝全部 category</span>category_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">dir</span> <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>SRC_ROOT <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> sub_category <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> date<span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>SRC_ROOT <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> sub_category <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 获取子目录</span><span class="token keyword">for</span> category <span class="token keyword">in</span> category_list<span class="token punctuation">:</span>copy_category<span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>copy_category<span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop copy &#123;&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">copy_sub_category</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start copy &#123;&#125;...."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sub_category: &#123;&#125;, date: &#123;&#125;, category: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> date <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span><span class="token comment"># 拷贝全部日期</span>date_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">dir</span> <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>SRC_ROOT <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> sub_category<span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>SRC_ROOT <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> sub_category <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 获取子目录</span><span class="token keyword">for</span> date <span class="token keyword">in</span> date_list<span class="token punctuation">:</span>copy_date<span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">elif</span> date <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span><span class="token comment"># 拷贝今天</span>date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span>copy_date<span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>copy_date<span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop copy &#123;&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sub_category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>date <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 20210521</span>category <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># A、B、C、D、E</span>sub_category <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment"># class-1、class-2、class-3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sub_category'</span><span class="token punctuation">,</span> sub_category<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 确定拷贝哪些 sub_category</span><span class="token keyword">if</span> sub_category <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span><span class="token comment"># 拷贝 class-1、class-2、class-3</span>copy_sub_category<span class="token punctuation">(</span><span class="token string">'class-1'</span><span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span>copy_sub_category<span class="token punctuation">(</span><span class="token string">'class-2'</span><span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span>copy_sub_category<span class="token punctuation">(</span><span class="token string">'class-3'</span><span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>copy_sub_category<span class="token punctuation">(</span>sub_category<span class="token punctuation">,</span> date<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode在docker中远程调试配置教程（支持在docker中使用CUDA）</title>
      <link href="/article/vscode-debug-in-docker-with-ssh/"/>
      <url>/article/vscode-debug-in-docker-with-ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode在docker中远程调试配置教程（支持在docker中使用CUDA）"><a href="#VSCode在docker中远程调试配置教程（支持在docker中使用CUDA）" class="headerlink" title="VSCode在docker中远程调试配置教程（支持在docker中使用CUDA）"></a>VSCode在docker中远程调试配置教程（支持在docker中使用CUDA）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>首先本机可以远程服务器、远程服务器又可以访问容器，所以用远程服务器做一下端口转发便可实现本机访问容器。但是实际操作中遇到了不少的坑</p><ul><li>Failed to get D-Bus connection: Operation not permitted</li><li>Unit ssh.service could not be found</li><li>Permission denied, please try again</li></ul><p>通过错误信息可以搜索到很多帖子，但是质量参差不齐，也鲜有把原因讲明白的，基本是不可能通过一篇博文配置成功，下面记录下自己的配置流程</p><h3 id="一、创建容器"><a href="#一、创建容器" class="headerlink" title="一、创建容器"></a>一、创建容器</h3><ul><li><p><del><code>sudo nvidia-docker run -it --name xxx --ipc=host -v /host/path:/docker/path -p 7777:22 imageID /bin/bash</code></del>  </p><ul><li><strong>从 docker 19 后通过 <code>nvidia-docker</code> 来运行命令，这样并不能使容器获取宿主机的GPU计算能力</strong></li></ul></li><li><p>centos</p><ul><li><code>sudo run -itd --name what-you-want --privileged=true --ipc=host --gpus all -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=compute,utility -v /host/path:/docker/path -p host-port:docker-port imageID /usr/sbin/init</code></li></ul></li><li><p>ubuntu</p><ul><li><code>sudo run -itd --name what-you-want --privileged=true --ipc=host --gpus all -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=compute,utility -v /host/path:/docker/path -p host-port:docker-port imageID /sbin/init</code><ul><li><code>-itd</code> ：i，交互模式运行；t，为容器重新分配一个伪输入终端；d，后台运行容器，并返回容器ID</li><li><code>--name what-you-want</code> ：自定义容器名字</li><li><code>--privileged=true</code> ：特权模式创建，获取宿主机 root 权限</li><li><code>--ipc=host</code>：和宿主机共享内存</li><li><code>--gpus all</code>： 访问所有可用GPU（可以指定GPU ‘“device&#x3D;1,2”‘、或者’ “device&#x3D;UUID-ABCDEF,1”‘，未实验，可以自行尝试）</li><li><code>-e NVIDIA_VISIBLE_DEVICES=all</code>：允许访问所有GPU，和上一条可能重复了，当时没发现可能重复也就没有试，可以自己试下</li><li><code>-e NVIDIA_DRIVER_CAPABILITIES=compute,utility</code>：允许使用的GPU的计算能力，默认情况下只能使用 utility，此时 <code>nvidia-smi</code> 看到 “CUDA Version：N&#x2F;A”，也就是不支持 CUDA 加速计算</li><li><code>-v /host/path:/docker/path</code>： 路径映射</li><li><code>-p host-port:docker-port</code> ：端口映射</li><li><code>imageID </code> ：容器镜像 ID</li><li><code>/usr/sbin/init</code>:  使用 systemctl 来启动服务了</li></ul></li></ul><p>eg：**<code>sudo docker run -itd --gpus all --privileged=true --name depoly_gpu --ipc=host -e NVIDIA_DRIVER_CAPABILITIES=compute,utility -e NVIDIA_VISIBLE_DEVICES=all -v /home/algorithm/huzh/deploy:/root/deploy -p 6666:22 imageID  /usr/sbin/init</code>**</p></li><li><p>设置容器密码（<strong>必须，因为ssh需要</strong>）</p><ul><li><code>passwd root</code></li></ul></li></ul><h3 id="二、安装-ssh-server"><a href="#二、安装-ssh-server" class="headerlink" title="二、安装 ssh-server"></a>二、安装 ssh-server</h3><p>需要通过 ssh 后台服务进行远程编辑和调试</p><ul><li><p>centos</p><ul><li><code>yum -y install openssh-server</code></li></ul></li><li><p>ubuntu</p><ul><li><code>apt install openssh-server</code></li></ul></li></ul><h3 id="三、修改-ssh-配置文件"><a href="#三、修改-ssh-配置文件" class="headerlink" title="三、修改 ssh 配置文件"></a>三、修改 ssh 配置文件</h3><p>容器默认账户就是 root，需要允许 root 账户远程登录</p><ul><li>vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<ul><li><p>centos</p><ul><li>PermitRootLogin yes 的注释去掉</li></ul></li><li><p>ubuntu</p><ul><li>PermitRootLogin 修改为 yes</li></ul></li></ul></li></ul><h3 id="四、启动-ssh-server"><a href="#四、启动-ssh-server" class="headerlink" title="四、启动 ssh-server"></a>四、启动 ssh-server</h3><ul><li>执行<code>systemctl restart sshd</code> 重启 ssh-server</li></ul><h3 id="五、VSCode-远程调试环境配置"><a href="#五、VSCode-远程调试环境配置" class="headerlink" title="五、VSCode 远程调试环境配置"></a>五、VSCode 远程调试环境配置</h3><ul><li>这个网上比较多就不写了，注意下远程 ip 为宿主机 ip，端口也为宿主机端口，密码为<strong>容器密码</strong></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>容器并不是一个完整的操作系统，只有一个文件系统，没有权限访问 Linux 内核，而且容器里面默认是不能运行后台服务的（设计理念如此），所以必须以特权模式创建容器，否则执行<code>systemctl restart sshd</code> 时会报 “Failed to get D-Bus connection: Operation not permitted” 的错误</li><li>如果尝试通过 <code>service restart sshd</code> 来启动 ssh-server 可能会报 “Unit ssh.service could not be found” 的错误，这是大坑，原因是 CentOS7、Ubuntu14 和之后已经用 systemctl 取代了 service 命令</li></ol>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5查看命令</title>
      <link href="/article/md5/"/>
      <url>/article/md5/</url>
      
        <content type="html"><![CDATA[<h1 id="md5查看命令"><a href="#md5查看命令" class="headerlink" title="md5查看命令"></a>md5查看命令</h1><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p><code>certutil -hashfile xx-file MD5</code></p><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><p><code>md5sum xx-file</code></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBook M1 搭建 C++开发环境</title>
      <link href="/article/MacBook-m1-build-cplusplus-env/"/>
      <url>/article/MacBook-m1-build-cplusplus-env/</url>
      
        <content type="html"><![CDATA[<h1 id="MacBook-M1-搭建-C-开发环境"><a href="#MacBook-M1-搭建-C-开发环境" class="headerlink" title="MacBook M1 搭建 C++开发环境"></a>MacBook M1 搭建 C++开发环境</h1><h3 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h3><ul><li><p>登陆官网 <a href="https://brew.sh/%EF%BC%8C%E8%B5%AB%E7%84%B6%E9%86%92%E7%9B%AE%E5%AE%89%E8%A3%85%E6%8C%87%E4%BB%A4%E5%A6%82%E4%B8%8B">https://brew.sh/，赫然醒目安装指令如下</a></p><p><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p></li><li><p>切换国内源</p><p><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</code></p></li><li><p>卸载</p><p><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)&quot;</code></p></li></ul><h3 id="使用-Clang调试"><a href="#使用-Clang调试" class="headerlink" title="使用 Clang调试"></a>使用 Clang调试</h3><ul><li><p>一切都好，但是 CMake Tools 的调试无法直接使用，报错如下</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Warning: Debuggee TargetArchitecture not detected, assuming x86_64.ERROR: Unable to start debugging. Unexpected LLDB output from command &quot;-exec-run&quot;. process exited with status -1 (attach failed ((os&#x2F;kern) invalid argument))The program &#39;&#x2F;Users&#x2F;huzh&#x2F;github&#x2F;SuperAI&#x2F;out&#x2F;bin&#x2F;003_background_subtraction&#39; has exited with code 42 (0x0000002a).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先警告调试器架构未检测到，假设其为 x86_64，然而 M1 是 arm 架构！</p><p>百度说是苹果不再官方支持 LLDB 调试（但是看其开发官网 <a href="https://developer.apple.com/download/all/">More - Downloads - Apple Developer</a> 看到Kernel Debug Kit 11.5.2 build 20G95的介绍里面可以用于LLDB远程调试，难道只是用于内核态调试？）</p><p>解决方法也简单，VSCode里安装CodeLLDB，实际启动调试时会提示需要安装 codelldb-aarch64-darwin.vsix，可以市场下场后离线安装就好了，但是仍然无法通过 CMake Tools 调试，可以配置 launch.json 自定义启动</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>    <span class="token comment">// Hover to view descriptions of existing attributes.</span>    <span class="token comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"defalt-debug"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;command:cmake.launchTargetPath&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token property">"customLaunchSetupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-target-attach"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"processId"</span><span class="token operator">:</span> <span class="token string">"$&#123;command.pickProcess&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Enable pretty-printing for gdb"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"osx"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                 <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"osx-debug"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"lldb"</span><span class="token punctuation">,</span>                <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>                <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;command:cmake.launchTargetPath&#125;"</span><span class="token punctuation">,</span>                <span class="token comment">// "coreDumpPath": ""</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"linux"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                 <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"linux-debug"</span><span class="token punctuation">,</span>                 <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>                <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>                <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;command:cmake.launchTargetPath&#125;"</span><span class="token punctuation">,</span>                <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>                <span class="token comment">// "coreDumpPath": ""</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"windows-debug"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppvsdbg"</span><span class="token punctuation">,</span>                <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>                <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;command:cmake.launchTargetPath&#125;"</span><span class="token punctuation">,</span>                <span class="token property">"symbolSearchPath"</span><span class="token operator">:</span> <span class="token string">"C:\\Symbols;C:\\SymbolDir2"</span><span class="token punctuation">,</span>                <span class="token comment">// "dumpPath": "",</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测  CMake Tools 调试是直接使用的 cppdbg 模式，故而在 OSX 上行不通</p></li><li><p>可以调试后又报错</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">dyld: library not loaded: @rpath&#x2F;libopencv_world.4.5.dylib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找不到动态库，rpath代表运行路径，这个可以配置，但是不想修改系统环境，希望可以直接在可执行文件夹下加载</p><ul><li><p>法一，CMake自动修改依赖库路径（推荐）</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">APPLE</span><span class="token punctuation">)</span>        <span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>TARGET <span class="token punctuation">$&#123;</span>Target<span class="token punctuation">&#125;</span> POST_BUILD        COMMAND install_name_tool -change @rpath/libopencv_world.<span class="token number">4.5</span>.dylib @executable_path/libopencv_world.<span class="token number">4.5</span>.dylib <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/out/bin/<span class="token punctuation">$&#123;</span>Target<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>法二，手动修改依赖库路径</p><p>查看当前可执行文件 xxx_runfile 的依赖</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(base) user@MacBookAir bin % otool -L xxx_runfile      xxx_runfile:@rpath&#x2F;libopencv_world.4.5.dylib (compatibility version 4.5.0, current version 4.5.3)&#x2F;usr&#x2F;lib&#x2F;libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)&#x2F;usr&#x2F;lib&#x2F;libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明 xxx_runfile 会去 rpath中查找 libopencv_world.4.5.dylib，修改其查找路径为当前执行路径</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo install_name_tool -change @rpath&#x2F;libopencv_world.4.5.dylib @executable_path&#x2F;libopencv_world.4.5.dylib xxx_runfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查看 xxx_runfile 的依赖</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(base) user@MacBookAir bin % otool -L xxx_runfile      xxx_runfile:@executable_path&#x2F;libopencv_world.4.5.dylib (compatibility version 4.5.0, current version 4.5.3)&#x2F;usr&#x2F;lib&#x2F;libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)&#x2F;usr&#x2F;lib&#x2F;libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>再调试运行就没问题了，当然也可以直接 <code>brew install opencv</code>，然后直接查找系统库的方式进行连接</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>当 clang 无法调试时想过换 gcc 试试，尝试官网下载载M1 版的 gcc 包解压后添加到 PATH，控制台是可以用了，但是VSCode里CMake还是探测不到，原因暂不明；直接<code>brew install gcc</code>就可以，但是仍然还是不能直接 CMake Tools 调试</p></li><li><p>install_name_tool 改变库依赖路径时犯了大错了，总是尝试直接作用于库本身，其实改的是执行文件查找目标库的路径</p></li><li><p>opencv 的编译做了很多次了，感觉也没必要非得在代码库里直接包含各个平台的库，反正部署环境里都带有opencv，所以本机直接安装 opencv 也未尝不可，以后上传代码就行</p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference">Configure launch.json for C&#x2F;C++ debugging in Visual Studio Code</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/article/linux-command/"/>
      <url>/article/linux-command/</url>
      
        <content type="html"><![CDATA[<h1 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h1><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 修改用户名，需要重启sudo hostname new_name# 查看CPU个数cat &#x2F;proc&#x2F;cpuinfo | grep &quot;physical id&quot; | uniq | wc -l # uniq 删除重复行，wc –l 统计行数# 查看CPU核数cat &#x2F;proc&#x2F;cpuinfo | grep &quot;cpu cores&quot; | uniq# 查看CPU型号cat &#x2F;proc&#x2F;cpuinfo | grep &#39;model name&#39; |uniq# 查看内存总数cat &#x2F;proc&#x2F;meminfo | grep MemTotal# 查看硬盘大小fdisk -l | grep Disk# 查看内核版本uname -acat &#x2F;etc&#x2F;redhat-release # 这种方法只适合Redhat系的Linux# 更新源列表sudo apt update# 更新已安装的包sudo apt upgrade# 更新软件、升级系统sudo apt dist-upgrade# 手动更新系统sudo apt full-upgrade# 安装 C++ 构建套件，包括 gcc、g++ 和 makesudo apt install build-essential# 查看 CUDA 版本nvcc --version# 查看 cuDNN 版本cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2cat &#x2F;usr&#x2F;local&#x2F;cuda-10.2&#x2F;targets&#x2F;x86_64-linux&#x2F;include&#x2F;cudnn_version.h  | grep CUDNN_MAJOR -A 2# 查看TensorRT版本dpkg -l | grep TensorRT # 适用于ubuntu# 添加环境变量vim ~&#x2F;.bashrc# 在末尾添加 export PATH&#x3D;$PATH:&#x2F;need&#x2F;add&#x2F;pathsource ~&#x2F;.bashrc# 立即生效# 查找进程# a：显示所有用户启动的进程# u：以用户为主的格式来显示 # x：显示当前用户启动的进程ps -aux | grep xxx # USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND# 批量匹配 kill 进程ps -ux | grep xxx | grep -v grep | awk &#39;&#123;print &quot;kill -9 &quot;$2&#125;&#39;# 查看所有进程ps -ef # kill 当前用户的所有进程killall -u username# 查看进程信息top [-d number] | top [-bnp]-d numbernumber代表秒数，表示top命令显示的页面更新一次的间隔 (default&#x3D;5s)-b以批次的方式执行 top-n与-b配合使用，表示需要进行几次top命令的输出结果-p指定特定的 pid 进程号进行观察top 命令显示的页面还可以输入以下按键执行相应的功能（注意大小写区分的）参数含义？显示在top当中可以输入的命令P以CPU的使用资源排序显示M以内存的使用资源排序显示N以pid排序显示T由进程使用的时间累计排序显示k给某一个pid一个信号,可以用来杀死进程(9)r给某个pid重新定制一个nice值（即优先级)q退出top（用ctrl+c也可以退出top）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ln -s src link # 创建软连接rm -rf  link # 创建软连接ln -snf src link # 修改软连接# 自适应单位显示文件大小ls -lh# 查看指定路径剩余空间df -hl [dir]# 全部du -sh .&#x2F;*# 各个子文件夹大小du -sh [dir]# 查看当前目录总大小# 查找文件find &#x2F; -name httpd.conf # 名字要完整，或者*匹配locatexxx# 名字要完整，或者*匹配，可能需要提前 updatedb# 文件拷贝cp [-r] &#x2F;src&#x2F;path&#x2F; &#x2F;dst&#x2F;path&#x2F;# 简单拷贝scp username@127.0.0.1:&#x2F;src&#x2F;path D:\dst\path# 拷贝到windowsrsync -avuzP [--exclude&#x3D;&#123;.*,*.a,*.b, c&#125; user@x.x.x.x:&#x2F;src&#x2F;path&#x2F; &#x2F;dst&#x2F;path&#x2F;# linux之间拷贝# 删除目录下的指定文件find &#x2F;root&#x2F; -type f -name &quot;*.txt&quot; | xargs rmfind &#x2F;root&#x2F; -type f -name &quot;*.txt&quot; -exec rm &#123;&#125; \# 统计输出信息的行数wc -l# 统计指定后缀文件个数find dir &#39;*.jpg&#39; | wc -l# 统计文件&#x2F;文件夹数量ls -l | grep &quot;^-&quot;| wc -l# 查看当前目录下的文件数量（不包含子目录中的文件）ls -lR | grep &quot;^-&quot;| wc -l# 查看当前目录下的文件数量（包含子目录中的文件, R代表子目录）ls -lR xxx*&#x2F; | grep &quot;^-&quot;| wc -l# 查询当前路径下的指定前缀名的目录下的所有文件数量ls -l | grep &quot;^d&quot;| wc -l# 查看当前目录下的文件夹目录个数（不包含子目录中的目录）ls -lR | grep &quot;^d&quot;| wc -l# 查看当前目录下的文件夹目录个数（包含子目录中的目录, R代表子目录）ls -lR xxx*&#x2F; | grep &quot;^d&quot;| wc -l# 查询当前路径下的指定前缀名的目录下的所有目录数量# 统计目录文件数量脚本，bash count.sh xxx，输出总数及各个子目录中文件数#!&#x2F;bin&#x2F;shnumOfArgs&#x3D;$#if [ $numOfArgs -ne 1 ]; thenecho -e &quot;Usage: \nbash $0 dirForCount&quot;exit -1fi# argsROOTDIR&#x3D;$1# core partfind $ROOTDIR -maxdepth 1 -type d | sort | while read dir; docount&#x3D;$(find &quot;$dir&quot; -type f | wc -l)echo &quot;$dir: $count&quot;done# 反向删除rm -rf !(FileName)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 返回上次目录cd -# 执行命令your-command&amp;# 后台执行nohup your-command  # 不挂断执行，追加 [&gt;what-you-want.log 2&gt;&amp;1] 输出重定向到文件jobs  [-l] # 查看当前终端后台运行的任务kill %jobID  # 结束任务fg %jobID  # 调至前台运行Crtl + z # 前台任务暂停至后台bg %jobID  # 后台暂停任务继续执行# 执行脚本. &#x2F;path&#x2F;to&#x2F;script.sh# 在当前 shell 中执行source &#x2F;path&#x2F;to&#x2F;script.sh# 在当前 shell 中执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo -s# 进入Single User模式mkdir &#x2F;Volumes&#x2F;EFI# 在Volumes下创建EFI文件夹diskutil list# 一般的EFI分区会在disk0s1mount -t msdos &#x2F;dev&#x2F;disk0s1 &#x2F;Volumes&#x2F;EFI# 挂载分区diskutil unmount &#x2F;dev&#x2F;disk0s1 # 卸载分区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">config-manager --add-repo https:&#x2F;&#x2F;xx.repo # 添加源rm -f $&#123;文件名&#125;.repo# 删除源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p>wget 提示文件名过长</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget -c -O out.zip &quot;http:&#x2F;&#x2F;blog.is36.com&#x2F;abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz.zip&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gperftools之CPU性能分析</title>
      <link href="/article/gperftools-cpu-profiler/"/>
      <url>/article/gperftools-cpu-profiler/</url>
      
        <content type="html"><![CDATA[<h1 id="Gperftools之CPU性能分析"><a href="#Gperftools之CPU性能分析" class="headerlink" title="Gperftools之CPU性能分析"></a>Gperftools之CPU性能分析</h1><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install gperftoolsyum install pprof # 来生成可视化结果yum install ghostscript # 视化支持pdf# 测试发现下面两个不装也行yum install gperftools-devel  yum install libunwind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>linux内核版本2.6之后支持检测所有线程，否则只检测主线程</p></li><li><p>支持检测子进程</p></li></ul><h4 id="二、生成性能记录文件"><a href="#二、生成性能记录文件" class="headerlink" title="二、生成性能记录文件"></a>二、生成性能记录文件</h4><p>​    这边有个前提就是自己的 app 必须链接 profiler 库</p><ul><li><p>法1</p><p><code>CPUPROFILE=user-defined.prof /your/app</code>，等待结束</p></li><li><p>法2</p><p><code>CPUPROFILE=user-defined.prof CPUPROFILESIGNAL=12 /your/app &amp;</code>，最后的&amp;表示后台执行，这样才能给进程发命令，任选如下一种方式即可</p><ul><li><p>killall 发送信号</p><p>需要先安装 ： <code>yum -y  install psmisc</code></p><p><code>killall -12 /your/app</code> ，启动记录</p><p><code>killall -12 /your/app</code> ，停止记录</p></li><li><p>kill 命令信号</p><p>先获取进程id：<code>pgrep /your/app</code></p><p><code>kill -12 pid</code>，启动记录</p><p><code>kill -12 pid</code>，停止记录</p></li></ul><p>生成的profile文件为 user-defined.prof.0、user-defined.prof.1的形式</p></li><li><p>法3</p><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;google/profiler.h></span></span><span class="token keyword">void</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100'000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">200'000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1'000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ProfilerStart</span><span class="token punctuation">(</span><span class="token string">"test.prof"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定所生成的 profile 文件名</span>        <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ProfilerStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="三、文件可视化"><a href="#三、文件可视化" class="headerlink" title="三、文件可视化"></a>三、文件可视化</h4><p>默认采样频率 CPUPROFILE_FREQUENCY &#x3D; 100，也就是说单位样本时间为 10ms，这个是可以自行修改的。</p><p>.&#x2F;out&#x2F;bin&#x2F;Test是目标程序，test.prof 是 生成的 profile 文件</p><ul><li><p>文本：<code>pprof --text ./out/bin/Test my.prof &gt; profile.txt</code></p><pre class="line-numbers language-none"><code class="language-none">Total: 380 samples     301  79.2%  79.2%      301  79.2% Func      36   9.5%  88.7%       63  16.6% _mcount      27   7.1%  95.8%       27   7.1% __mcount_internal      10   2.6%  98.4%      112  29.5% Func1       6   1.6% 100.0%      205  53.9% Func2       0   0.0% 100.0%      317  83.4% Test       0   0.0% 100.0%      317  83.4% __libc_start_main       0   0.0% 100.0%      317  83.4% _start       0   0.0% 100.0%      317  83.4% main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>总共采样380次</p></li><li><p>每行依次为:</p><ol><li>函数运行时间（不包含被调函数）</li><li>函数运行时间占总运行时间的百分比（不包含被调函数）</li><li>目前为止已分析的函数运行时间占总运行时间的百分比（不包含被调函数）</li><li>函数运行时间（包含被调函数）</li><li>函数运行时间占总运行时间的百分比（包含被调函数）</li><li>函数&#x2F;操作名</li></ol></li></ul></li><li><p>图形:<code>pprof --pdf ./out/bin/Test my.prof &gt; profile.pdf</code></p><p><img src="C:\Users\huzh\AppData\Roaming\Typora\typora-user-images\image-20210929170140334.png" alt="image-20210929170140334"></p><ul><li><p>左上角元信息从上到下依次为：</p><ol><li>分析目标</li><li>总采样次数</li><li>用到了的采样数（可以指定哪些用哪些不用，见下）</li><li>丢掉时间小于等于 1 的节点（自动完成，防止图形过于混乱）</li><li>丢掉时间小于等于 0 的有向边（自动完成，防止图形过于混乱）</li></ol></li><li><p>每条边上的数字表示被调用者所消耗的CPU时间</p></li><li><p>每个节点的信息从上到下依次为：</p><ol><li>函数名&#x2F;类名加函数名</li><li>不包含被调函数的运行时间（此时函数运行时间占总运行时间的百分比）</li><li>包含被调函数的运行时间（此时函数运行时间占总运行时间的百分比）【如果内部不再继续调用其它函数则这一项数据不显示】</li></ol></li></ul></li><li><p>可以通过设置 focus 或者 ignore 来集中显示、过滤某个函数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pprof proc test.prof --gv --focus&#x3D;Func1   # 只关注某个函数pprof proc test.prof --gv --ignore&#x3D;Func1  # 过滤掉某个函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 笔记</title>
      <link href="/article/git-note/"/>
      <url>/article/git-note/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-笔记"><a href="#Git-笔记" class="headerlink" title="Git 笔记"></a>Git 笔记</h1><h3 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改用户信息"><a href="#修改用户信息" class="headerlink" title="修改用户信息"></a>修改用户信息</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git config --global user.name &quot;your-name&quot;git config --global user.email &quot;your-email&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="当前工程添加到远程仓库"><a href="#当前工程添加到远程仓库" class="headerlink" title="当前工程添加到远程仓库"></a>当前工程添加到远程仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git initgit remote add origin git@github.com:huzhenhong&#x2F;CMakeProjectFramework.gitit add .git commit -m &quot;job done&quot;git push --set-upstream origin mastergit pull origin master# 尝试拉取验证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="git-push-报错：“No-configured-push-destination”"><a href="#git-push-报错：“No-configured-push-destination”" class="headerlink" title="git push 报错：“No configured push destination”"></a>git push 报错：“No configured push destination”</h5><ul><li><p>显然提示意思是不知道应该推送到哪里去，因为还没有配置仓库，通过如下命令关联到远程仓库</p><ul><li><code>git remote add origin https://github.com/huzhenhong/job.git</code></li></ul></li></ul><h5 id="fatal-unable-to-access-‘https-github-com-huzhenhong-job-git-39-OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#fatal-unable-to-access-‘https-github-com-huzhenhong-job-git-39-OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="fatal: unable to access ‘https://github.com/huzhenhong/job.git/&#39;:  OpenSSL SSL_read: Connection was reset, errno 10054"></a>fatal: unable to access ‘<a href="https://github.com/huzhenhong/job.git/&#39;">https://github.com/huzhenhong/job.git/&#39;</a>:  OpenSSL SSL_read: Connection was reset, errno 10054</h5><ul><li><p>法一、取消 http 和 https 的代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global --unset http.proxygit config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>法二、改为 ssh </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git remote rm origingit remote add origin git@github.com:huzhenhong&#x2F;job.gitgit branch --set-upstream-to&#x3D;origin&#x2F;master master若报 “fatal: branch &#39;master&#39; does not exist”，则执行git checkout master 将本地仓库切换到 master 后重试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git clone http:&#x2F;&#x2F;xxx.git --recursivegit submodule update --init --recursive# 重置所有子模块git submodule foreach --recursive git reset --hard# 添加新子模块git submodule add http:&#x2F;&#x2F;xxx.git dst_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git remote -v# 查看当前项目地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="乱码处理"><a href="#乱码处理" class="headerlink" title="乱码处理"></a>乱码处理</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># comment 不要用引号就行#git config --global i18n.commitencoding utf-8# commitgit config --global i18n.logoutputencoding utf-8# log#git config --global gui.encoding utf-8# 独行打印git log --pretty&#x3D;oneline# 单次生效export LESSCHARSET&#x3D;utf-8# 永久有效vi ~&#x2F;.bashrc# 末尾追加export LESSCHARSET&#x3D;utf-8# 刷新source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回退-push"><a href="#回退-push" class="headerlink" title="回退 push"></a>回退 push</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 以新提交的方式回退（之前提交的记录还在）git revert commit-id# 重置远端（删除之前的提交记录）git reflog# 查看push记录git reset --hard commit-idgit push -f origin branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="头指针分离后再推送"><a href="#头指针分离后再推送" class="headerlink" title="头指针分离后再推送"></a>头指针分离后再推送</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 先执行，然后就可以正常 git push 了git branch -f master HEAD # 指向 master 头指针git checkout master# 切换到 master# 分离头指针, 从指向 branch_name 变为指向 commitIDgit checkout commitID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li><p>查看分支信息</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git branch# 列出本地分支git branch -v# 列出本地分支 + hash信息git branch -vv# 列出本地分支 + hash信息 + 与远程的关联信息git branch -a# 列出本地分支 + 远程分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="拉取远程到本地"><a href="#拉取远程到本地" class="headerlink" title="拉取远程到本地"></a>拉取远程到本地</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git clone -b &lt;branch name&gt; [remote repository address]git submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建-x2F-进入-x2F-提交分支"><a href="#创建-x2F-进入-x2F-提交分支" class="headerlink" title="创建&#x2F;进入&#x2F;提交分支"></a>创建&#x2F;进入&#x2F;提交分支</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 创建分支git branch branch-name# 切换分支git checkout branch-name# 提交分支git push origin branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 先进入分支 A，并更新Agit checkout Agit pull# 合并分支 A 到 Bgit checkout Bgit merge Agit commit# 注意这里不能添加注释，会自动弹出注释编辑；否则会报合并未完成的错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git checkout Agit branch -d Bgit push origin --delete B <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#第一步，切换到你指定的分支。如我要从dev上拉一个分支，代码一模一样git checkout dev #第二步，拉取dev的最新代码git pull#第三步，在本地创建一个test分支，并切换到该分支。此时执行git branch会看到该分支在本地已创建git checkout -b test #第四步，把分支推到远程仓库。此时执行git branch -av可以看到该分支在远程仓库也有了git push origin test#第五步，将本地分支与远程分支关联git branch --set-upstream-to&#x3D;origin&#x2F;test test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清除已有修改"><a href="#清除已有修改" class="headerlink" title="清除已有修改"></a>清除已有修改</h3><ul><li><code>git reset --hard</code></li></ul><h3 id="回退到指定-commit"><a href="#回退到指定-commit" class="headerlink" title="回退到指定 commit"></a>回退到指定 commit</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard HEAD^         # 回退到上个版本git reset --hard HEAD~n        # 回退到前n次提交之前git reset --hard commit_id     # 退&#x2F;进到指定 commitgit push origin HEAD --force   # 强制推送到远端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改指定-commit-的提交内容"><a href="#修改指定-commit-的提交内容" class="headerlink" title="修改指定 commit 的提交内容"></a>修改指定 commit 的提交内容</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 将 HEAD 移到需要更改的 commit 上git rebase -i commit_id^ # 注意 ^# 找到需要更改的commit, 将行首的 pick 改成 edit, 按esc, 输入 :wq 退出# 执行修改 ## 改动的文件添加改动文件到暂存git add modify_file_xx # 追加改动到指定的 commit_id 上git commit --amend# 移动 HEAD 到最新的 commit 处git rebase --continue# 如上面的修改导致有冲突则解决冲突，也可以 stash 先跳过git add .git commit --amend # 冲突修改后追加到当前# 解决冲突之后再执行git rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将工作空间中的改动追加到某个-commit-上"><a href="#将工作空间中的改动追加到某个-commit-上" class="headerlink" title="将工作空间中的改动追加到某个 commit 上"></a>将工作空间中的改动追加到某个 commit 上</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 先缓存当前工作空间中的更改git stash# 将 HEAD 移到需要更改的 commit 上git rebase -i commit_id^ --interactive # 注意 ^# 找到需要更改的commit, 将行首的 pick 改成 edit, 按esc, 输入 :wq 退出# 弹出缓存git stash pop# 改动的文件添加改动文件到暂存git add modify_file_xx # 追加改动到指定的 commit_id 上git commit --amend# 移动 HEAD 到最新的 commit 处git rebase --continue# 如上面的修改导致有冲突则解决冲突，也可以 stash 先跳过git add .git commit --amend # 冲突修改后追加到当前# 解决冲突之后再执行git rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并多个-commit"><a href="#合并多个-commit" class="headerlink" title="合并多个 commit"></a>合并多个 commit</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看提交历史git log# 修改最近一次 commit 的 messagegit commit --amend# 需要回退到的 commit-id，在这之后的 commit 可以全部合并在一起git rebase -i commit-id#git rebase -i HEAD~n # n 为想要合并的 commit 条数# 需要合并的 commit 倒序排列，在需要合并的 commit 前的# pick 修·改为 squash（或者 s），至少保留一项 pick# :wq 保存退出# 如果想放弃本次操作，执行 git rebase --abort# 修改合并 commit 信息# :wq 保存退出git push -f origin 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并指定分支的-commit-到当前分支"><a href="#合并指定分支的-commit-到当前分支" class="headerlink" title="合并指定分支的 commit 到当前分支"></a>合并指定分支的 commit 到当前分支</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 先切换到指定分支git checkout a-branch# gitlog 查找需要合并的 commitgit log# 切回当前分支git checkout b-branch# 合并指定 commitgit cherry-pick spcify-commit-id# 合并指定 commit 及之前的所有 commitgit rebase --onto spcify-commit-id # 为验证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 切换分支前可以先缓存当前分支已有的修改git stash save &quot;comment&quot;# 同时缓存未跟踪文件git stash save &quot;comment&quot; -u # 缓存全部文件git stash save &quot;comment&quot; -a# 查看已有缓存git stash list# 再次切回当前分支时可以恢复缓存git stash apply [stash@&#123;0&#125;]# 恢复指定的缓存git stash pop # 恢复第一条缓存，并删除该缓存# 移除缓存git stash drop [stash@&#123;0&#125;]git stash clear# 移除全部# 查看缓存所作的修改git stash show [-p]# 从缓存创建分支git stash branch stash-name# 会同步删除该缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令</title>
      <link href="/article/docker-command/"/>
      <url>/article/docker-command/</url>
      
        <content type="html"><![CDATA[<h1 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h1><h3 id="安装docker环境"><a href="#安装docker环境" class="headerlink" title="安装docker环境"></a>安装docker环境</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 在 CentOS 7安装docker要求系统为64位、系统内核版本为 3.10 以上，可以使用以下命令查看uname -r# 安装yum -y install docker# 启动systemctl start docker# 设置开机自启systemctl enable docker.service# 查看docker服务状态systemctl status docker# deepin下sudo apt update# 更新仓库apt install docker-ce docker-ce-cli containerd.io# 安装docker version# 验证是否安装成功# sudo docker run hello-world# 安装 nvidia-container-toolkitdistribution&#x3D;$(. &#x2F;etc&#x2F;os-release;echo $ID$VERSION_ID)curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;gpgkey | sudo apt-key add -curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;$distribution&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.list # 替换为 curl -s -L https:&#x2F;&#x2F;nvidia.github.io&#x2F;nvidia-docker&#x2F;debian11&#x2F;nvidia-docker.list | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nvidia-docker.listsudo apt updatesudo apt install nvidia-container-toolkitsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF&#123;&quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],&quot;graph&quot;: &quot;&#x2F;home&#x2F;docker_storage&quot;,&quot;log-driver&quot;: &quot;json-file&quot;,&quot;log-opts&quot;: &#123;&quot;max-size&quot;: &quot;100m&quot;&#125;,&quot;storage-driver&quot;: &quot;overlay2&quot;,&quot;storage-opts&quot;: [&quot;overlay2.override_kernel_check&#x3D;true&quot;],&quot;insecure-registries&quot; : [&quot;192.168.176.230:8090&quot;,&quot;49.233.23.166:8090&quot;,&quot;172.16.4.17:8090&quot;],&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;g427vmjy.mirror.aliyuncs.com&quot;],&quot;live-restore&quot;: true&#125;EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>graph：镜像保存地址</li><li>insecure-registries：使用http的仓库</li></ul><p>配置后需要执行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo service docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启docker，随后登录指定仓库</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo docker login 172.16.4.17:8090# 输入账户密码后拉去指定镜像sudo docker pull 172.16.4.17:8090&#x2F;algorithm&#x2F;ai_compile_1:v8# 创建容器支持gui转发及gpu的容器（直接从远端获取镜像）sudo docker run -itd --name docker_on_deepin --privileged&#x3D;true -u root --ipc&#x3D;host --gpus all -v &#x2F;home&#x2F;huzh&#x2F;job:&#x2F;root&#x2F;job -v &#x2F;tmp&#x2F;.X11-unix:&#x2F;tmp&#x2F;.X11-unix -e DISPLAY&#x3D;:0 172.16.4.17:8090&#x2F;algorithm&#x2F;ai_compile_1:v8 &#x2F;usr&#x2F;sbin&#x2F;init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="各种问题"><a href="#各种问题" class="headerlink" title="各种问题"></a>各种问题</h3><ul><li><p>vscode中docker插件无法连接</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Failed to connect. Is Docker runningError: connect EACCES &#x2F;var&#x2F;run&#x2F;docker.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为没有权限，将当前用户添加到docker组</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo groupadd dockersudo gpasswd -a $USER dockernewgrp docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>​        执行以上命令后注销账户重新打开vscode</p><ul><li><p>Gtk-WARNING **: 15:48:09.315: Locale not supported by C library</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export LC_ALL&#x3D;C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Gtk-WARNING **: 15:48:09.315: cannot open display: :0.0</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 本地执行（重启后需要再次执行）env | grep DISPLAY# 查询显示端口# DISPLAY&#x3D;:0xhost +# 容器内执行（重启后可能需要重新执行）export DISPLAY&#x3D;:0# 本地容器export DISPLAY&#x3D;15:48:09.315:0# 远端容器（待测试）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看镜像的详细信息docker inspect id# 查看已有镜像docker images# 删除镜像docker rmi id# 删除 repositorydocker rmi repository:tag# 镜像重命名docker  tag imageID repository:tag# 保存镜像docker save -o newImageName.zip imageName&#x2F;imageID# 载入镜像docker load --input newImageName.zip  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看容器的详细信息docker inspect id# 查看容器映射路径docker inspect container_name | grep Mounts -A 20# 查看已有容器docker ps [-a]# 创建容器# GPU 部分详见 https:&#x2F;&#x2F;docs.nvidia.com&#x2F;datacenter&#x2F;cloud-native&#x2F;container-toolkit&#x2F;runtime&#x2F;docker.htmldocker run-itd# i，交互模式运行；t，为容器重新分配一个伪输入终端；d，后台运行容器，并返回容器ID--privileged true # 特权模式创建，获取宿主机 root 权限--name xxx # 自定义容器名字--ipc host # 和宿主机共享内存（应该是默认的）--network host# 和宿主机共享网络（应该是默认的）--gpus all # 访问所有可用GPU（可以指定device&#x3D;1,2、或者device&#x3D;UUID，未验证）-e NVIDIA_VISIBLE_DEVICES&#x3D;all # 允许访问所有GPU -e NVIDIA_DRIVER_CAPABILITIES&#x3D;compute,utility # 允许使用CUDA 加速（默认情况下只能使用 utility）-v &#x2F;host&#x2F;src&#x2F;path&#x2F;:&#x2F;root&#x2F;dst&#x2F;path&#x2F; # 宿主机和容器路径映射-p 6666:22 # 宿主机和容器端口映射imageID # 使用的镜像id&#x2F;usr&#x2F;sbin&#x2F;init# 使用 systemctl 来启动一些需要自启的服务# 启动docker start [-i] name# 进入docker exec -it name &#x2F;bin&#x2F;bash# 此时执行 exit 或 ctrl + d 会后台运行（单次有效）docker attach name# 此时执行 exit 或 ctrl + d 会停止# 退出CTRL + Q + P# 后台运行CTRL + D # 退出exit# 退出# 停止docker stop name# 重命名容器docker rename oldname newname# 删除容器docker rm -f id # 提交修改# docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]docker commit -a &quot;user info&quot; -m &quot;comment info&quot; dockerName&#x2F;dockerID  repo&#x2F;imageName&#x2F;imageID:tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改网络配置模式"><a href="#修改网络配置模式" class="headerlink" title="修改网络配置模式"></a>修改网络配置模式</h3><p>比如默认是 bridge，想要修改为NAT（host），先删除旧网络</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker network disconnect bridge your_xxx # 断开自己容器和网络的连接# docker network rm bridge # 没执行也可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后可以这样</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find &#x2F; -name hostconfig.json&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;a77c1xxx&#x2F;hostconfig.json&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;cdaccxxx&#x2F;hostconfig.json&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;1cdd6dxxx&#x2F;hostconfig.json&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;15c3bcfxxx&#x2F;hostconfig.jsonvi &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;a77c1xxx&#x2F;hostconfig.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以直接在VScode里面选中该容器右键“inspect”打开</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"NetworkMode"</span><span class="token operator">:</span><span class="token string">"bridge"</span>改为<span class="token property">"NetworkMode"</span><span class="token operator">:</span><span class="token string">"host"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后重启容器</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 更新 gcc 版本</title>
      <link href="/article/update-gcc-version/"/>
      <url>/article/update-gcc-version/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-更新-gcc-版本"><a href="#CentOS-更新-gcc-版本" class="headerlink" title="CentOS 更新 gcc 版本"></a>CentOS 更新 gcc 版本</h1><h3 id="1、安装-scl-源管理工具"><a href="#1、安装-scl-源管理工具" class="headerlink" title="1、安装 scl 源管理工具"></a>1、安装 scl 源管理工具</h3><ul><li><code>yum install centos-release-scl scl-utils-build</code></li></ul><h3 id="2、查看可用工具集"><a href="#2、查看可用工具集" class="headerlink" title="2、查看可用工具集"></a>2、查看可用工具集</h3><ul><li><code>yum list all --enablerepo=&#39;centos-sclo-rh&#39; | grep &quot;devtoolset-&quot;</code></li></ul><h3 id="3、-安装具体版本"><a href="#3、-安装具体版本" class="headerlink" title="3、 安装具体版本"></a>3、 安装具体版本</h3><ul><li><code>yum install -y devtoolset-8-toolchain</code></li></ul><h3 id="4、激活具体版本"><a href="#4、激活具体版本" class="headerlink" title="4、激活具体版本"></a>4、激活具体版本</h3><ul><li><p>暂时</p><p>安装的 devtoolset 是在 &#x2F;opt&#x2F;rh 目录下</p><ul><li>启用当前版本 <code>scl enable devtoolset-8 bash</code></li></ul></li><li><p>永久</p><ul><li><p>查看已安装得有哪些 <code>find /usr -name gcc</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;bin&#x2F;gcc&#x2F;usr&#x2F;include&#x2F;boost&#x2F;mpl&#x2F;aux_&#x2F;preprocessed&#x2F;gcc&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;usr&#x2F;libexec&#x2F;gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>系统默认的是 &#x2F;usr&#x2F;bin&#x2F;gcc , 对其先备份, 然后替换成新安装的软连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mv &#x2F;usr&#x2F;bin&#x2F;gcc &#x2F;usr&#x2F;bin&#x2F;gcc-4.8.5ln -s &#x2F;opt&#x2F;rh&#x2F;devtoolset-8&#x2F;root&#x2F;bin&#x2F;gcc &#x2F;usr&#x2F;bin&#x2F;gccmv &#x2F;usr&#x2F;bin&#x2F;g++ &#x2F;usr&#x2F;bin&#x2F;g++-4.8.5ln -s &#x2F;opt&#x2F;rh&#x2F;devtoolset-8&#x2F;root&#x2F;bin&#x2F;g++ &#x2F;usr&#x2F;bin&#x2F;g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>5、开启 Address Sanitizer 提示 # 找不到 libasan_preinit.o 和 lasan</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">yum install devtoolset-11-libasan-devel libssan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像质量评价</title>
      <link href="/article/image-quality/"/>
      <url>/article/image-quality/</url>
      
        <content type="html"><![CDATA[<h1 id="图像质量评价"><a href="#图像质量评价" class="headerlink" title="图像质量评价"></a>图像质量评价</h1><ul><li><p>SSIM：是Structural Similarity的缩写，表示结构相似性，取值范围为[-1,1]，越接近1，代表相似度越高，融合质量越好</p></li><li><p>PSNR：Peak signal to noise ration的缩写，峰值信噪比，用于衡量图像有效信息与噪声之间的比率，能够反映图像是否失真，值越大，表示融合图像的质量越好</p></li><li><p>Entropy：信息熵主要是度量图像包含信息量多少的一个客观评价指标</p></li><li><p>MSE：均方误差(Mean Square Error)反映的是变量间的差异程度，是一种基于像素误差的图像质量客观评价指标，用于衡量融合图像和理想参考图像之间的差异，MSE越小，表示融合图像质量越好</p></li><li><p>NRMSE：是 normalized root mean square error 的缩写，归一化均方根误差就是将RMSE的值变成(0,1)之间</p></li></ul><h3 id="scikit-image"><a href="#scikit-image" class="headerlink" title="scikit-image"></a>scikit-image</h3><ul><li><p>0.18 后版本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> skimage<span class="token punctuation">.</span>measure <span class="token keyword">import</span> compare_ssim <span class="token keyword">as</span> sk_cpt_ssim<span class="token comment"># 懒得去研究具体用法了，默认安装高版本后会提示找不到相应函数，直接卸载安装低版本</span>pip uninstall scikit<span class="token operator">-</span>imagepip install scikit<span class="token operator">-</span>image<span class="token operator">==</span><span class="token number">0.15</span><span class="token number">.0</span> <span class="token operator">-</span>U <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>0.18 前版本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> skimage<span class="token punctuation">.</span>measure<span class="token comment"># 结构相似性</span>ssim <span class="token operator">=</span> skimage<span class="token punctuation">.</span>measure<span class="token punctuation">.</span>compare_ssim<span class="token punctuation">(</span>pre_roi<span class="token punctuation">,</span> origin_roi<span class="token punctuation">,</span> data_range<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 峰值信噪比</span>psnr <span class="token operator">=</span> skimage<span class="token punctuation">.</span>measure<span class="token punctuation">.</span>compare_psnr<span class="token punctuation">(</span>pre_roi<span class="token punctuation">,</span> origin_roi<span class="token punctuation">,</span> data_range<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token comment"># 均方误差</span>mse <span class="token operator">=</span> skimage<span class="token punctuation">.</span>measure<span class="token punctuation">.</span>compare_mse<span class="token punctuation">(</span>pre_roi<span class="token punctuation">,</span> origin_roi<span class="token punctuation">)</span><span class="token comment"># 均方根误差</span>rmse <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mse<span class="token punctuation">)</span><span class="token comment"># 归一化均方根误差</span>nrmse <span class="token operator">=</span> skimage<span class="token punctuation">.</span>measure<span class="token punctuation">.</span>compare_nrmse<span class="token punctuation">(</span>pre_roi<span class="token punctuation">,</span> origin_roi<span class="token punctuation">,</span> norm_type<span class="token operator">=</span><span class="token string">'Euclidean'</span><span class="token punctuation">)</span><span class="token comment"># 信息熵</span>entropy <span class="token operator">=</span> skimage<span class="token punctuation">.</span>measure<span class="token punctuation">.</span>shannon_entropy<span class="token punctuation">(</span>origin_roi<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> image algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像质量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连通域分析</title>
      <link href="/article/connected-component-analyze/"/>
      <url>/article/connected-component-analyze/</url>
      
        <content type="html"><![CDATA[<h1 id="连通域分析"><a href="#连通域分析" class="headerlink" title="连通域分析"></a>连通域分析</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有个需求要求纯C++实现连通域分析，记录下实现过程</p><p>采用两次遍历法实现</p><p><img src="https://pic1.zhimg.com/v2-87301b46cf47a72590812c1e1658a37c_b.webp" alt="img"></p><ul><li>第一次遍历：<ul><li>从上到下，从左至右遍历整幅图像，如果左邻域和上邻域都为 0，赋予当前像素一个新的 label，记录当前 label 的映射关系；</li><li>否则将左邻域和上邻域中 minLabel 赋给前像素，记录邻域中 maxLabel 与 minLabel 的映射关系，用于二次遍历时将 maxLabel 映射为 minLabel</li></ul></li><li>第二次遍历：<ul><li>第一遍已经给像素分配了一个label，同时知道每个 label 的映射关系，先获得当前像素的映射 label，然后将当前像素坐标绑定到该 label</li></ul></li></ul><p>最后 label 的个数代表连通域个数，label 关联的坐标代表连通域像素坐标</p><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pBuf<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">int</span> binaryThreshold<span class="token punctuation">,</span> <span class="token keyword">int</span> areaThreshold<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cv<span class="token double-colon punctuation">::</span>Mat <span class="token function">src</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> CV_8UC4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 全图二值化处理</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> pCur <span class="token operator">=</span> pBuf <span class="token operator">+</span> i <span class="token operator">*</span> cols <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pCur <span class="token operator">>=</span> binaryThreshold<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 二值图像像素值为 0 或 255，为了不冲突，label 从 256 开始</span><span class="token keyword">int</span> label <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> label2minLabel<span class="token punctuation">;</span><span class="token comment">// 每个像素的 label 映射到邻域内的最小 label，最后同一个连通域中只有最上面和最左边的 label 值可能不一样，其它的都一样</span><span class="token comment">/** 两次遍历法* * 第一次遍历：*1、从上到下，从左至右遍历整幅图像，如果左邻域和上邻域都为 0，赋予当前像素一个新的 label，记录当前 label 的映射关系；*   *2、否则将左邻域和上邻域中 minLabel 赋给前像素，记录邻域中 maxLabel 与 minLabel 的映射关系，用于二次遍历时将 maxLabel 映射为 minLabel* * 第二次遍历：*第一遍已经给像素分配了一个label，同时知道每个 label 的映射关系，先获得当前像素的映射 label，然后将当前像素坐标绑定到该 label* * 最后 label 的个数代表连通域个数，label 关联的坐标代表连通域像素坐标*/</span><span class="token comment">/////////////////// 第一次遍历 //////////////////</span><span class="token comment">// 处理原点</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pBuf <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>label2minLabel<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> label<span class="token punctuation">;</span><span class="token operator">*</span>pBuf <span class="token operator">=</span> label<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理首行</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前点不为 0 时才需要处理</span><span class="token comment">// pBuf + i ：当前像素</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 首行只有左邻域</span><span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>label2minLabel<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> label<span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> label<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理首列</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> cols<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前点不为 0 时才需要处理</span><span class="token comment">// pBuf + i * cols ：当前像素</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i <span class="token operator">*</span> cols<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i <span class="token operator">*</span> cols<span class="token punctuation">)</span> <span class="token operator">=</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>label2minLabel<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> label<span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i <span class="token operator">*</span> cols<span class="token punctuation">)</span> <span class="token operator">=</span> label<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> left<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> top<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pDataPrev <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">;</span><span class="token comment">// 上一行地址</span><span class="token keyword">int</span><span class="token operator">*</span> pDataCur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> cols<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前行地址</span><span class="token comment">// 跳过首行</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 跳过首列</span>pDataCur<span class="token operator">++</span><span class="token punctuation">;</span>pDataPrev<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span> pDataCur<span class="token operator">++</span><span class="token punctuation">,</span> pDataPrev<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 当前点为 0，扫描下一个点</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">*</span>pDataCur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>left <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>pDataCur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>top <span class="token operator">=</span> <span class="token operator">*</span>pDataPrev<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> left <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">==</span> top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>label2minLabel<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> label<span class="token punctuation">;</span><span class="token operator">*</span>pDataCur <span class="token operator">=</span> label<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>pDataCur <span class="token operator">=</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>pDataCur <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> minLabel <span class="token operator">=</span> left <span class="token operator">&lt;</span> top <span class="token operator">?</span> left <span class="token operator">:</span> top<span class="token punctuation">;</span><span class="token keyword">int</span> maxLabel <span class="token operator">=</span> left <span class="token operator">></span> top <span class="token operator">?</span> left <span class="token operator">:</span> top<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>minLabel <span class="token operator">!=</span> maxLabel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> pos <span class="token operator">=</span> label2minLabel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>minLabel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> label2minLabel<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>label2minLabel<span class="token punctuation">[</span>maxLabel<span class="token punctuation">]</span> <span class="token operator">=</span> pos<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token comment">// 将邻域内最大的映射到最小的，这里是保存映射关系</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>label2minLabel<span class="token punctuation">[</span>maxLabel<span class="token punctuation">]</span> <span class="token operator">=</span> minLabel<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// minLabel == maxLabel 时在执行 label2minLabel[minLabel] = minLabel; 时已经处理好映射关系了</span><span class="token operator">*</span>pDataCur <span class="token operator">=</span> minLabel<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/////////////////// 第二次遍历 //////////////////</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> results<span class="token punctuation">;</span>pDataCur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span> pDataCur<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> pos <span class="token operator">=</span> label2minLabel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">*</span>pDataCur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> label2minLabel<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>pDataCur <span class="token operator">=</span> pos<span class="token operator">-></span>second<span class="token punctuation">;</span> <span class="token comment">// 修改像素 label，这里是向下执行映射关系</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pDataCur <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>results<span class="token punctuation">[</span><span class="token operator">*</span>pDataCur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录当前 label 对应的坐标</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> validResults<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> it <span class="token operator">:</span> results<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> points <span class="token operator">=</span> it<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> areaThreshold<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 计算出矩形区域</span><span class="token keyword">int</span> maxX<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> maxY<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> minX<span class="token punctuation">&#123;</span> cols <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> minY<span class="token punctuation">&#123;</span> rows <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> point <span class="token operator">:</span> points<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> x <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> y <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>maxX <span class="token operator">=</span> maxX <span class="token operator">></span> x <span class="token operator">?</span> maxX <span class="token operator">:</span> x<span class="token punctuation">;</span>maxY <span class="token operator">=</span> maxY <span class="token operator">></span> y <span class="token operator">?</span> maxY <span class="token operator">:</span> y<span class="token punctuation">;</span>minX <span class="token operator">=</span> minX <span class="token operator">&lt;</span> x <span class="token operator">?</span> minX <span class="token operator">:</span> x<span class="token punctuation">;</span>minY <span class="token operator">=</span> minY <span class="token operator">&lt;</span> y <span class="token operator">?</span> minY <span class="token operator">:</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>validResults<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>minX<span class="token punctuation">,</span> minY<span class="token punctuation">,</span> maxX<span class="token punctuation">,</span> maxY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> validResults<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> rows<span class="token punctuation">&#123;</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> cols<span class="token punctuation">&#123;</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> valueVec<span class="token punctuation">&#123;</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> bufSize <span class="token operator">=</span> rows <span class="token operator">*</span> cols<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pBuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>bufSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span>pBuf <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> valueVec<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 连通域分析</span><span class="token keyword">auto</span> rectVec <span class="token operator">=</span> <span class="token function">Process</span><span class="token punctuation">(</span>pBuf<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> rect <span class="token operator">:</span> rectVec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" x1: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" y1: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>   <span class="token operator">&lt;&lt;</span> <span class="token string">" x2: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" y2: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>   <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pBuf<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>边界问题一定要考虑清楚</li><li>允许速度不够理想，待后续优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> image algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连通域分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯混合模型</title>
      <link href="/article/gmm/"/>
      <url>/article/gmm/</url>
      
        <content type="html"><![CDATA[<h1 id="高斯混合模型（GMM）"><a href="#高斯混合模型（GMM）" class="headerlink" title="高斯混合模型（GMM）"></a>高斯混合模型（GMM）</h1><h3 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a><strong>基本理解</strong></h3><ul><li><p>高斯混合模型是”模型“，且这个”某型“由很多个”小模型“（每个像素点对应一个模型）组成，当输入一张图片到”模型“时，每个”小模型“输入对应像素点的像素值，输出对应像素点为背景的概率</p></li><li><p>为什么是混合模型，因为这里用了好几个高斯核函数来拟合每一个像素点的像素值，每个高斯核函数有单独的权重值</p><ul><li>图像每个像素点的值的变化范围从0到255，但是背景像素值几乎不变，或者是在一定的小范围内波动</li><li>记录过去 T 时段内该像素点的像素值，以像素值为x轴，该像素值出现的次数为y轴绘图，在 T 够大的情况下，图形应该符合正态（高斯）分布，也就是可以用高斯核函数来拟合，但是在 T 不够大（如果太大显然不合理，过去一段时间画面明明发生了变化，不能仍然当成背景）的情况下就未必了，所以就用多个高斯核函数来拟合（想想信号与系统里的波形是怎么合成的）</li></ul></li><li><p>代价函数就是概率密度函数</p><ul><li>还记得已知期望、标准差求某一个大于某个数的概率吗，对，就是求高斯函数某个数右侧的面积</li></ul></li><li><p>在预先设定期望、标准差、概率阈值、每个高斯核权重值以及学习率的情况下，就可以自动训练模型了：</p><ul><li>输出概率大于概率阈值则当前像素点为背景、通过学习公式更新期望、标准差和高斯核权重值</li><li>否则像素点为前景，删除之前权重最小的模型，添加一个新模型，用当前像素值进行初始化</li></ul></li></ul><p><strong>所以最关键的思想就是</strong></p><ul><li><strong>背景的像素值几乎不变或者变化很小</strong></li><li><strong>通过混合高斯函数来拟合每个背景像素点可能出现的值</strong></li><li><strong>假定开始时整幅图像都是背景</strong></li></ul><h3 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h3><p>​    以后再补吧，写公式太累</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>发生光照突变时，容易造成大面积误检;</li></ul><blockquote><p>因为来不及更新背景</p></blockquote><ul><li><p>实际算法上线时，第一帧图像往往存在着运动目标，这些运动目标就会被当成背景，在后续一段时间的检测中会被判断为前景给提取出来，即产生“鬼影”。</p><blockquote><p>可以设定帧数阈值 T，对前 T 帧使用较大的学习速率来加速”鬼影”的消除，之后再使用正常学习率</p></blockquote></li></ul><h3 id="GMM的特殊情况"><a href="#GMM的特殊情况" class="headerlink" title="GMM的特殊情况"></a>GMM的特殊情况</h3><ul><li>knn</li><li>差帧</li></ul>]]></content>
      
      
      <categories>
          
          <category> image algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高斯混合模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSIM</title>
      <link href="/article/ssim/"/>
      <url>/article/ssim/</url>
      
        <content type="html"><![CDATA[<h1 id="SSIM"><a href="#SSIM" class="headerlink" title="SSIM"></a>SSIM</h1><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><p>SSIM 在三个维度上对图像进行比较</p><ul><li>亮度（luminance）</li><li>对比对（contrast）</li><li>结构（structure）</li></ul><p>SSIM 采用滑窗遍历整幅图像的每个像素点，计算每个“像素点”的相似性，滑窗分为</p><ul><li>win_size 为11 x 11，方差为 1.5 的高斯卷积核</li><li>win_size 为 7 x 7 的均匀卷积核</li></ul><p><strong>所以SSIM其实要求输入图像的宽高都必须大于 7，小于 7 时会报 win_size &lt; 7 的错误</strong></p><p>然后将对所有“像素点”相似度求均值（剔除图像边缘 (win_size - 1) &#x2F;&#x2F; 2 的像素点，因为它们是通过边缘补零的方式计算得到的，可能无法反映图像真实信息），即为整幅图像的相似度，</p><h3 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h3><p>每个像素点的均值、方差和协方差分别为 $\mu_x, \delta_x, \delta_{xy}$<br>$$<br>\begin{align*}\label{1}<br>  &amp; \mu_x &#x3D;\sum_{i&#x3D;1}^Nw_ix_i                                 \tag{1}\<br>  &amp; \delta_x &#x3D;(\sum_{i&#x3D;1}^Nw_i(x_i - \mu_x)                 \tag{2}\<br>  &amp; \delta_{xy} &#x3D;\sum_{i&#x3D;1}^Nw_i(x_i - \mu_x)(y_i - \mu_y)     \tag{3} \<br>\end{align*}<br>$$</p><p>亮度相似度、对比度相似度和结构相似度函数分别定义为 $ l(x, y), c(x, y), s(x, y)$<br>$$<br>l(x, y) &#x3D; \frac{2\mu_x\mu_y + C_1}{\mu_x^2 + \mu_y^2 + C_1} \qquad<br>C_1 &#x3D; (K_1L)^2    \tag{4}<br>$$<br>这里引入$C_1$为了防止除零，$K_1$取0.01，L是灰度级数，当图像为uint8时，$C1&#x3D;2.55\times2.55&#x3D;6.5025$<br>$$<br>c(x, y) &#x3D; \frac{2\delta_x\delta_y + C_2}{\delta_x^2 + \delta_y^2 + C_2} \qquad<br>C_2 &#x3D; (K_2L)^2            \tag{5}<br>$$<br>这里引入$C_2$为了防止除零， $K_2$取0.03，L是灰度级数，当图像为uint8时，$C2&#x3D;7.65 \times 7.65&#x3D;58.5225$</p><blockquote><p>对一幅图而言，其亮度和对比度都是标量，而其结构显然无法用一个标量表示，而是应该用该图所有像素组成的向量来表示。同时，研究结构相似度时，应该排除亮度和对比度的影响，即排除均值和标准差的影响。归根结底，作者研究的是归一化的两个向量：$\frac{x-\mu_x}{\delta_x}$和 $\frac{y-\mu_y}{\delta_y}$之间的关系。根据均值与标准差的关系，可知这两个向量的模长均为 $\sqrt{N-1}$</p></blockquote><p>$$<br>\begin{align*}\label{2}<br>s(x, y) &amp;&#x3D; (\frac{1}{\sqrt{N-1}}\times\frac{x-\mu_x}{\delta_x}) \times (\frac{1}{\sqrt{N-1}}\times\frac{y-\mu_y}{\delta_y}) \<br>&amp;&#x3D;\frac1{\delta_x\delta_y}\textcolor{red}{\Big(\frac{1}{\sqrt{N-1}}\sum_{i&#x3D;1}^N}(x_i - \mu_x)(y_i - \mu_y)\Big) \<br>&amp;&#x3D;\frac1{\delta_x\delta_y}\textcolor{blue}{\Big(\sum_{i&#x3D;1}^Nw_i}(x_i - \mu_x)(y_i - \mu_y)\Big) \<br>&amp;&#x3D;\frac{\delta_{xy} + C_3} {\delta_x\delta_y + C_3} \qquad<br>C_3 &#x3D; \frac{1}2{C_2}<br>\tag{6}</p><p>\end{align*}<br>$$</p><p>上式为余弦相似度？红色部分代表均匀卷积，蓝色部分代表高斯卷积，大括号里式子像素点 i 在 x 和 y 两幅图片中的协方差</p><p>引入$C_3$为了防止除零，后面会消掉</p><p>个人理解：</p><ul><li>$x-\mu_x$代表当前像素点与其邻域各个点的梯度，除以 $\delta_x\sqrt{N-1}$ 表示归一化，为了消弱两幅图片光照强弱的影响</li><li>所谓两个向量的模长均为 $\sqrt{N-1}$应该是排除自身余下像素个数 为 N - 1，这个模为啥是 $\sqrt{N-1}$</li><li>最终获得的就是两个像素点对其邻域的梯度分布相似度，这里还是求平均，没有用到位置信息，但是有说不要直接比较大图，应该将大图切分成小图再比较，然后将结果累加，所以应该不能是线性关系吧？</li></ul><p>SSIM 具体公式定义为<br>$$<br>\begin{align*}\label{3}<br>S(x, y) &amp;&#x3D; f(l(x, y), c(x, y), s(x, y)) \<br>        &amp;&#x3D; \frac{(2\mu_x\mu_y + C_1)(2\delta_{xy} + C_2)}{(\mu_x^2 + \mu_y^2 + C_1) +(\delta_x^2 + \delta_y^2 + C_2)}<br>\tag{7}<br>\end{align*}<br>$$</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>未完待续</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://cloud.tencent.com/developer/article/1438942">SSIM 的原理和代码实现 - 云+社区 - 腾讯云 (tencent.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> image algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV dnn 加载 YoloV5 模型</title>
      <link href="/article/OpenCV-dnn-deploy-YoloV5/"/>
      <url>/article/OpenCV-dnn-deploy-YoloV5/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenCV-dnn-加载-YoloV5-模型"><a href="#OpenCV-dnn-加载-YoloV5-模型" class="headerlink" title="OpenCV dnn 加载 YoloV5 模型"></a>OpenCV dnn 加载 YoloV5 模型</h1><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><p>环境</p><ul><li>Windows10</li><li>Intel(R) Core(TM) i3-9100F CPU @ 3.60GHz   3.60 GHz</li><li>GTX-960</li></ul></li><li><p>CPU 解码视频</p><ul><li>cpu<ul><li>cost time: 156.394 ms&#x2F;帧</li><li>cpu 消耗 60%</li><li>gpu消耗 -</li></ul></li><li>cuda<ul><li>cost time: 48.111 ms&#x2F;帧</li><li>cpu 消耗 30%</li><li>gpu消耗 40%</li></ul></li></ul></li></ul><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul><li>Windows10</li><li>Intel(R) Core(TM) i3-9100F CPU @ 3.60GHz   3.60 GHz</li></ul><h4 id="背景更新帧率-12，计算帧率-6"><a href="#背景更新帧率-12，计算帧率-6" class="headerlink" title="背景更新帧率 12，计算帧率 6"></a>背景更新帧率 12，计算帧率 6</h4><table><thead><tr><th></th><th>不检人</th><th>检人</th><th>CPU</th></tr></thead><tbody><tr><td>1920 x 1080</td><td>212</td><td>245</td><td></td></tr><tr><td>960 x 540</td><td>65</td><td>95</td><td>50</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg 常用命令</title>
      <link href="/article/ffmpeg-command-line/"/>
      <url>/article/ffmpeg-command-line/</url>
      
        <content type="html"><![CDATA[<h1 id="FFmpeg-常用命令"><a href="#FFmpeg-常用命令" class="headerlink" title="FFmpeg 常用命令"></a>FFmpeg 常用命令</h1><h3 id="调整视频速率"><a href="#调整视频速率" class="headerlink" title="调整视频速率"></a>调整视频速率</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 加快一倍（不丢帧）ffmpeg -i input.mkv -r 50 -filter:v &quot;setpts&#x3D;0.5*PTS&quot; output.mkv# 加快一倍（会丢帧）ffmpeg -i input.mkv -filter:v &quot;setpts&#x3D;0.5*PTS&quot; output.mkv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视频格式转换"><a href="#视频格式转换" class="headerlink" title="视频格式转换"></a>视频格式转换</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 单文件转换ffmpeg -i input.a -c copy output.b ffmpeg -i intro.flv -vcodec copy -acodec copy intro.mp4# 脚本批量转换#! &#x2F;bin&#x2F;bashfor i in *.mkv; do    ffmpeg -i &quot;$i&quot; -codec copy &quot;$&#123;i%.*&#125;.mp4&quot;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整视频帧率"><a href="#调整视频帧率" class="headerlink" title="调整视频帧率"></a>调整视频帧率</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 用 -r 参数设置帧率ffmpeg –i input.mp4 –r 25 output.mp4# 用 fps 的 filter 设置帧率ffmpeg -i input.mp4 -vf fps&#x3D;25 output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整视频码率"><a href="#调整视频码率" class="headerlink" title="调整视频码率"></a>调整视频码率</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 音频：-b:a  视频： - b:vffmpeg -i input.mp4 -b:v 500k [-bufsize 500k] output.mp4ffmpeg -i input.mp4 -b 500k [-bufsize 500k] output.mp4 # 音视频一起ß<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="控制文件大小"><a href="#控制文件大小" class="headerlink" title="控制文件大小"></a>控制文件大小</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># -fs (file size首字母缩写) 文件大小 &#x3D; (视频码率 + 音频码率) * 时长 &#x2F; 8ffmpeg -i input.avi -fs 1024K output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="图片合成视频"><a href="#图片合成视频" class="headerlink" title="图片合成视频"></a>图片合成视频</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 00%2d 根据实际图片命名格式调整ffmpeg -f image2 -i 00%2d.jpg output.mp4# 默认帧率为25，可以自定义为 your_fpsffmpeg -r your_fps -f image2 -i 00%2d.jpg output.mp4# 根据实际图片大小来调整码率ffmpeg -f image2 -i 00%2d.jpg -b:v 4M output.mp4# 指定编码格式，默认是 -c:v libx264，还可以 -c:v libvpx -c:v libvpx-vp9ffmpeg -f image2 -i 00%2d.jpg -c:v libx265 output.mp4# 指定分辨率ffmpeg -f image2 -i 00%2d.jpg -s 640x480 output.mp4 ffmpeg -f image2 -i 00%2d.jpg -vf scale&#x3D;-1:480 output5.mp4 # -1表示等比例缩放宽<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="帧内编码"><a href="#帧内编码" class="headerlink" title="帧内编码"></a>帧内编码</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ffmpeg -i output.mp4 -strict -2  -qscale 0 -intra keyoutput.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="视频倒放"><a href="#视频倒放" class="headerlink" title="视频倒放"></a>视频倒放</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ffmpeg -i input.mp4 -vf reverse -af areverse output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="视频剪切"><a href="#视频剪切" class="headerlink" title="视频剪切"></a>视频剪切</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 截取从头开始的30sffmpeg -ss 00:00:00 -t 00:00:30 -i input.mp4 -vcodec copy -acodec copy output.mp4# 精确剪切ffmpeg -ss 00:00:00 -t 00:00:30 [-accurate_seek] -i input.mp4 -vcodec copy -acodec copy [-avoid_negative_ts 1] output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视频合并"><a href="#视频合并" class="headerlink" title="视频合并"></a>视频合并</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ffmpeg -f concat -i list.txt -c copy concat.mp4# list.txt 放入遗下内容file .&#x2F;video1.mp4file .&#x2F;video2.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视频抽帧"><a href="#视频抽帧" class="headerlink" title="视频抽帧"></a>视频抽帧</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ffmpeg -ss 00:00:30 -i 666051400.mp4 -vframes 1 0.jpg# -r 指定抽取的帧率，即从视频中每秒钟抽取图片的数量。1代表每秒抽取一帧。ffmpeg -i 666051400.mp4 -r 1 -q:v 2 -f image2 .&#x2F;%08d.000000.jpg# 抽取I帧ffmpeg -i 666051400.mp4 -vf &quot;select&#x3D;eq(pict_type\,I)&quot;  -vsync vfr -qscale:v 2 -f image2 .&#x2F;%08d.jpg# 抽取P帧ffmpeg -i 666051400.mp4 -vf &quot;select&#x3D;eq(pict_type\,P)&quot;  -vsync vfr -qscale:v 2 -f image2 .&#x2F;%08d.jpg# 抽取B帧ffmpeg -i 666051400.mp4 -vf &quot;select&#x3D;eq(pict_type\,B)&quot;  -vsync vfr -qscale:v 2 -f image2 .&#x2F;%08d.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ffmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViBe</title>
      <link href="/article/vibe/"/>
      <url>/article/vibe/</url>
      
        <content type="html"><![CDATA[<h1 id="ViBe"><a href="#ViBe" class="headerlink" title="ViBe"></a>ViBe</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>前景提取&#x2F;背景消除的本质就是对图像像素进行二分类，算法建立如下算法模型</p><img src="C:\Users\huzh\AppData\Roaming\Typora\typora-user-images\image-20210730104759585.png" alt="image-20210730104759585" style="zoom:80%;" /><ul><li>每个像素建立一个样本库，大小为 20，样本随机采自当前像素点及其 8 邻域像素点</li></ul><p><img src="C:\Users\huzh\AppData\Roaming\Typora\typora-user-images\image-20210730105812850.png" alt="image-20210730105812850"></p><ul><li>计算每个像素点与其样本集中的像素点的欧式距离，小于阈值 20 的次数超过 2 则判为背景，否则为前景</li><li>如检测为背景，则有 1&#x2F;16 的概率更新自己和邻域某个像素点的样本集</li><li>记录每个像素点被检测为前景的次数，若超过指定次数 50，则强制将当前像素更新到背景样本集中</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>背景模型建立简单，背景突然时可以快速重置模型</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>由于可能采用了运动物体的像素初始化样本集，容易引入拖影（Ghost）区域</p><blockquote><p>运动物体被持续检测为前景一段时间后才会慢慢融入背景</p></blockquote></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>版本一</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="改进版本-ViBe"><a href="#改进版本-ViBe" class="headerlink" title="改进版本 ViBe+"></a>改进版本 ViBe+</h3><ul><li><p>初始化检测为背景时，前 100 帧直接更新自己和邻域某个像素点的样本集</p></li><li><p>决定前景像素不被用来更新模型</p><ul><li>那前景岂不是会一直存在？</li></ul></li><li><p>连接区域的滤波操作</p><ul><li>分割蒙版：移除面积小于等于10（像素）的前景斑点区域，填充面积小于等于20的前景孔洞区域；贴近边缘的斑点，无论尺寸全部保留，使其保持原状</li><li>更新蒙版：填充面积小于等于50（像素）的前景孔洞区域（因为目标是一个连续的整体），该操作用来限制散布在前景物体中的错误背景。</li></ul></li><li><p>抑制邻域传播</p><ul><li>计算背景斑点内侧边界的梯度，当梯度值（限制于整数范围[0, 255]）大于50时，将会抑制扩散。这种操作避免了背景值穿过物体边界？</li></ul></li><li><p>动态阈值判断</p><ul><li>颜色畸变值小于20（颜色畸变就是失真吧，确实见到过）</li><li>匹配阈值改为0.5×σ，σ标准偏差，设定在整数范围[20, 40]</li></ul></li><li><p>闪烁检测（增强多峰背景分布的处理）</p><ul><li>对于每个像素，我们存储了之前的更新蒙版（进行任何修正之前的更新蒙版）与一个闪烁等级图表。闪烁等级定义如下：如果一个像素属于背景的内边缘，并且当前更新边缘不同于之前更新的边缘，那么闪烁等级增加15（闪烁等级保持在整数范围[0, 150]之间），否则等级减1。如果一个像素的闪烁等级大于等于30，则该像素被认为正在闪烁，并将其从更新蒙版中移除</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> image algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> motion detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习CMake（一）</title>
      <link href="/article/cmake-note-01/"/>
      <url>/article/cmake-note-01/</url>
      
        <content type="html"><![CDATA[<h1 id="cmake-note-01"><a href="#cmake-note-01" class="headerlink" title="cmake-note-01"></a>cmake-note-01</h1><ul><li><p>生成项目：<code>cmake [Visual Studio 16 2019, Unix Makefiles]..</code></p></li><li><p>构建项目：</p><ul><li><code>cmake --build . --target &lt;target-name&gt;</code></li><li><code>cmake -H. -Bbuild</code>，<code>-H</code>表示当前目录中搜索根<code>CMakeLists.txt</code>文件。<code>-Bbuild</code>告诉CMake在一个名为<code>build</code>的目录中生成所有的文件</li></ul></li><li><p>要求在Windows上导出所有库符号: <code>set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)</code></p></li><li><p>设置语言标准</p><ul><li><p>细粒度</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set_target_properties</span><span class="token punctuation">(</span>animals  <span class="token namespace">PROPERTIES</span>    <span class="token property">CXX_STANDARD</span> <span class="token number">14</span>    <span class="token property">CXX_EXTENSIONS</span> <span class="token boolean">OFF</span>    <span class="token property">CXX_STANDARD_REQUIRED</span> <span class="token boolean">ON</span>    <span class="token property">POSITION_INDEPENDENT_CODE</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token property">POSITION_INDEPENDENT_CODE</span> 避免在使用一些编译器构建DSO时出现问题<span class="token property">CXX_STANDARD</span>会设置我们想要的标准。<span class="token property">CXX_EXTENSIONS</span>告诉CMake，只启用ISO C++标准的编译器标志，而不使用特定编译器的扩展。<span class="token property">CXX_STANDARD_REQUIRED</span>指定所选标准的版本。如果这个版本不可用，CMake将停止配置并出现错误。当这个属性被设置为<span class="token boolean">OFF</span>时，CMake将寻找下一个标准的最新版本，直到一个合适的标志。这意味着，首先查找C++<span class="token number">14</span>，然后是C++<span class="token number">11</span>，然后是C++<span class="token number">98</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">- project- .gitignore- README.md- LICENCE.md- CMakeLists.txt- cmake- FindSomeLib.cmake- something_else.cmake- include- project- lib.hpp- src- CMakeLists.txt- lib.cpp- apps- CMakeLists.txt- app.cpp- tests- CMakeLists.txt- testlib.cpp- docs- CMakeLists.txt- extern- googletest- scripts- helper.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake笔记</title>
      <link href="/article/cmake%20note/"/>
      <url>/article/cmake%20note/</url>
      
        <content type="html"><![CDATA[<h1 id="CMake笔记"><a href="#CMake笔记" class="headerlink" title="CMake笔记"></a>CMake笔记</h1><h3 id="Visual-Studio-报“warning-C4819”"><a href="#Visual-Studio-报“warning-C4819”" class="headerlink" title="Visual Studio 报“warning C4819”"></a>Visual Studio 报“warning C4819”</h3><blockquote><p>warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 </p></blockquote><ul><li><p>法一：visual studio默认编译文件的编码是utf-8 with bom，存在中文时会有乱码等问题，指定当使用 MSVC 编译器时修改源文件编码为 UTF-8</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">add_compile_options</span><span class="token punctuation">(</span><span class="token string">"$&lt;$&lt;C_COMPILER_ID:MSVC>:/source-charset:utf-8>"</span><span class="token punctuation">)</span><span class="token keyword">add_compile_options</span><span class="token punctuation">(</span><span class="token string">"$&lt;$&lt;CXX_COMPILER_ID:MSVC>:/source-charset:utf-8>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>法二（VS2019）：</p><ol><li>扩展 》管理扩展 》联机 》 搜索安装 “Format On Save” </li><li>工具 》选项 》Format On Save 》setting 》LineBreak 》选择 windows</li></ol></li></ul><h3 id="设置-C-x2F-C-标准"><a href="#设置-C-x2F-C-标准" class="headerlink" title="设置 C&#x2F;C++ 标准"></a>设置 C&#x2F;C++ 标准</h3><ul><li><p>法一</p><ul><li><p>CMAKE_CXX_STANDARD：全局表示，用来初始化每个工程的 CXX_STANDARD</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_STANDARD</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>法二</p><ul><li><p>CXX_STANDARD：每个工程覆盖设置</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">#add_executable($&#123;Target&#125; $&#123;SRCS&#125;)</span><span class="token keyword">set_target_properties</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>Target<span class="token punctuation">&#125;</span>    <span class="token namespace">PROPERTIES</span>        <span class="token property">C_STANDARD</span> <span class="token number">11</span>        <span class="token property">CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="禁用优化"><a href="#禁用优化" class="headerlink" title="禁用优化"></a>禁用优化</h3><ul><li><p>法一</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">string</span><span class="token punctuation">(</span>REPLACE <span class="token string">"/O2"</span> <span class="token string">"-Od"</span> <span class="token variable">CMAKE_CXX_FLAGS_RELEASE</span> <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS_RELEASE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>法二</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS_RELEASE</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS_RELEASE</span><span class="token punctuation">&#125;</span></span> -Od"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/article/regular-expression/"/>
      <url>/article/regular-expression/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>^</td><td>匹配行的开头</td></tr><tr><td>$</td><td>匹配行的结尾</td></tr><tr><td>.</td><td>匹配任意单个字符</td></tr><tr><td>[…]</td><td>匹配[]中的任意一个字符</td></tr><tr><td>(…)</td><td>设定分组</td></tr><tr><td>\</td><td>转义字符</td></tr><tr><td>\d</td><td>匹配数字[0-9]</td></tr><tr><td>\D</td><td>\d 取反</td></tr><tr><td>\w</td><td>匹配字母[a-z]，数字，下划线</td></tr><tr><td>\W</td><td>\w 取反</td></tr><tr><td>\s</td><td>匹配空格</td></tr><tr><td>\S</td><td>\s 取反</td></tr><tr><td>+</td><td>前面的元素重复1次或多次</td></tr><tr><td>*</td><td>前面的元素重复任意次</td></tr><tr><td>?</td><td>前面的元素重复0次或1次</td></tr><tr><td>{n}</td><td>前面的元素重复n次</td></tr><tr><td>{n,}</td><td>前面的元素重复至少n次</td></tr><tr><td>{n,m}</td><td>前面的元素重复至少n次，至多m次</td></tr><tr><td>|</td><td>逻辑或</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"(^\d+$)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// camera index</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"(^rtsp://.+)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// rtsp</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"(([\w\/\-:]+[\w-]&#123;1&#125;\.(mp4|h264|avi|rmvb|mkv)$)|(([\w\/-:]+%\d+d\.(jpg|png|bmp))$))"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token double-colon punctuation">::</span>icase<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// video，忽略后缀大小写</span>    <span class="token comment">// "path/to/imgs/xxx_%04d.jpg" ：文件夹内所有图片按规律命名，也可以用 VideoCapture 来读取，貌似图片太少不行？下载的数据集可以</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"([\w\/\-:]+)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// image folder</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">&#123;</span><span class="token raw-string string">R"([\w\/\-:]+[\w-]&#123;1&#125;\.(jpg|png|bmp)$)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// image</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">// unkown</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/coolcpp/p/cpp-regex.html">C++正则表达式 - cpluspluser - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/i_chaoren/article/details/79230773">(57条消息) C++11–正则表达式_学习使我快乐-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口计时</title>
      <link href="/article/time-consuming/"/>
      <url>/article/time-consuming/</url>
      
        <content type="html"><![CDATA[<h1 id="耗时计算"><a href="#耗时计算" class="headerlink" title="耗时计算"></a>耗时计算</h1><h3 id="先简单记录下，后面要用模板来做"><a href="#先简单记录下，后面要用模板来做" class="headerlink" title="先简单记录下，后面要用模板来做"></a>先简单记录下，后面要用模板来做</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> startTime <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do something</span><span class="token keyword">auto</span> stopTime <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>high_resolution_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> microsecond <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>stopTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 耗时统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/article/singleton/"/>
      <url>/article/singleton/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模板类"><a href="#单例模板类" class="headerlink" title="单例模板类"></a>单例模板类</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> T<span class="token operator">&amp;</span> <span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter Instance()\n"</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> T ins<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"exit Instance()\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ins<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Singleton()\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Singleton()\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span>Singleton<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span>      <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Singleton<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认构造、析构函数设为 protected 为了子类调用</li><li>拷贝构造、析构函数和赋值构造、析构函数设为 private为子类提供防止拷贝和赋值构造能力</li></ul><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SingletonObject</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Singleton</span><span class="token operator">&lt;</span><span class="token class-name">SingletonObject</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">SingletonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"SingletonObject()\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">SingletonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~SingletonObject()\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 只让父类访问自己</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&lt;</span>SingletonObject<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello Singleton, my address is ["</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">SingletonObject</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">enter Instance()&#x2F;&#x2F; 首次调用时构造Singleton()SingletonObject()exit Instance()hello Singleton, my address is [00007FF6A5FBB2F0]enter Instance()&#x2F;&#x2F; 再次调用不再构造exit Instance()hello Singleton, my address is [00007FF6A5FBB2F0]~SingletonObject()~Singleton()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/article/lambda-expression/"/>
      <url>/article/lambda-expression/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>capture list<span class="token punctuation">]</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">[</span>optional<span class="token punctuation">]</span> <span class="token keyword">constexpr</span> <span class="token punctuation">[</span>optional<span class="token punctuation">]</span> exception attr <span class="token punctuation">[</span>optional<span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token keyword">return</span> type <span class="token punctuation">[</span>optional<span class="token punctuation">]</span><span class="token punctuation">&#123;</span> body<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最简单的lambda表达式可以写成  <code>[]&#123;&#125;</code>，没有参数也不捕获任何变量</p><h3 id="变量捕获规则"><a href="#变量捕获规则" class="headerlink" title="变量捕获规则"></a>变量捕获规则</h3><ul><li><code>[&amp;] () &#123;...&#125;</code> ：捕获外部所有变量的引用</li><li><code>[=] () &#123;...&#125;</code> ：捕获外部所有变量的副本</li><li><code>[a, &amp;b] () &#123;...&#125;</code> ：捕获 a 的副本和 b 的引用</li><li><code>[&amp;, a] () &#123;...&#125;</code> ：除了捕获 a 为副本外，其余捕获的变量皆为引用</li><li><code>[=, &amp;b, i&#123;22&#125;, this] () &#123;...&#125;</code> ：捕获 b 的引用， this 的副本，并将新变 量 i 初始化成22，并且其余捕获的变量都为其副本。</li></ul><h3 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h3><ul><li>mutable：需要修改副本变量时使用</li><li>constexpr：显式告之编译器这是一个常量表达式</li><li>exception attr：是否抛出异常</li><li>return type：显式指定返回类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++解析命令行</title>
      <link href="/article/parse-command-line-by-c++/"/>
      <url>/article/parse-command-line-by-c++/</url>
      
        <content type="html"><![CDATA[<h1 id="C-解析命令行"><a href="#C-解析命令行" class="headerlink" title="C++解析命令行"></a>C++解析命令行</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>看到python命令行解析如此优雅，遂想在C++也能优雅的使用命令行（以前用配置文件多），正好从一个开源项目中发现有整套命令行方案，决定复现，遇到了大坑，浪费了一整天时间，记录一下。</p><h3 id="那些坑儿"><a href="#那些坑儿" class="headerlink" title="那些坑儿"></a>那些坑儿</h3><p>代码中发现使用 <strong>getopt_long</strong> 解析命令行，第一次接触这个函数，百度发现有  <strong>getopt</strong>、<strong>getopt_long</strong>和<strong>getopt_long_only</strong> 三个函数，Linux原生支持，windows有移植版本，庆幸不影响跨平台，兴冲冲的开始写代码，调试时就发现这玩意是真难用。</p><ul><li><p>第一个坑</p><ul><li><strong>getopt</strong> 选填参数输入格式必须是 <code>-a1</code>，而不是 <code>-a 1</code></li><li><strong>getopt_long</strong> 选填参数输入格式必须是 <code>--optarg=200 </code>，而不是 <code>--optarg 200</code></li></ul></li><li><p>第二个坑</p><ul><li><p>参数顺序、缺失，具体如下</p><ul><li>getopt</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span>         opt<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pShortOpt <span class="token operator">=</span> <span class="token string">"a:b::c"</span><span class="token punctuation">;</span> <span class="token comment">// a 必填，b 选填, c 无</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> pShortOpt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>left<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"opt = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">"\t optarg = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> optarg              <span class="token operator">&lt;&lt;</span> <span class="token string">"\t optind = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> optind              <span class="token operator">&lt;&lt;</span> <span class="token string">"\t argv[optind] = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span>optind<span class="token punctuation">]</span>              <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、<code>.\cmd.exe -a1 -b2 -c</code> 或者 <code>.\cmd.exe -a 1 -b2 -c</code>，一切都是那么的美好</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; a          optarg &#x3D; 1      optind &#x3D; 2      argv[optind] &#x3D; -b2opt &#x3D; b          optarg &#x3D; 2      optind &#x3D; 3      argv[optind] &#x3D; -copt &#x3D; c          optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、<code>.\cmd.exe -a1 -b -c</code>，-c 无法解析了</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; a          optarg &#x3D; 1      optind &#x3D; 2      argv[optind] &#x3D; -bopt &#x3D; b          optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、<code>.\cmd.exe -b2 -c -a 1</code>，必填项 -a 都解析不出来了</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; b          optarg &#x3D; 2      optind &#x3D; 2      argv[optind] &#x3D; -c   opt &#x3D; c          optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="到这我还以为是自己代码写的有问题，反复检查无果"><a href="#到这我还以为是自己代码写的有问题，反复检查无果" class="headerlink" title="到这我还以为是自己代码写的有问题，反复检查无果"></a>到这我还以为是自己代码写的有问题，反复检查无果</h5><ul><li>getopt_long</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span>                 opt<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span>                 longOptIdx<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>         pShortOpt <span class="token operator">=</span> <span class="token string">"a:b::c"</span><span class="token punctuation">;</span> <span class="token comment">// a 必填，b 选填, c 无</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>option<span class="token operator">></span> longOptVec<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token string">"required"</span><span class="token punctuation">,</span> required_argument<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"optional"</span><span class="token punctuation">,</span> optional_argument<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"no"</span><span class="token punctuation">,</span> no_argument<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token char">'n'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token function">getopt_long</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> pShortOpt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>longOptVec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>longOptIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>left<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"opt = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">"optarg = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> optarg              <span class="token operator">&lt;&lt;</span> <span class="token string">"optind = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> optind              <span class="token operator">&lt;&lt;</span> <span class="token string">"argv[optind] = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span>optind<span class="token punctuation">]</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">"longOptIdx = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> longOptIdx              <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        optarg <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、<code>.\cmd.exe -a1 -b2 -c</code> 或者 <code>.\cmd.exe -a 1 -b2 -c</code>，完美解析</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; a          optarg &#x3D; 1      optind &#x3D; 2      argv[optind] &#x3D; -b2opt &#x3D; b          optarg &#x3D; 2      optind &#x3D; 3      argv[optind] &#x3D; -copt &#x3D; c          optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、<code>.\cmd.exe -a1 -b -c</code>、<code>.\cmd.exe -b2 -c -a 1</code>，效果同 getopt</p><p>3、<code>.\cmd.exe --required 1 --optional=2 --no</code>或者<code>.\cmd.exe --required=1 --optional=2 --no</code>，正常</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; r  optarg &#x3D; 1  optind &#x3D; 3  argv[optind] &#x3D; --optional&#x3D;2   longOptIdx &#x3D; 0opt &#x3D; o  optarg &#x3D; 2  optind &#x3D; 4  argv[optind] &#x3D; --no           longOptIdx &#x3D; 1opt &#x3D; n  optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、<code>.\cmd.exe --required 1 --optional= --no </code></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; r  optarg &#x3D; 1  optind &#x3D; 3  argv[optind] &#x3D; --optional&#x3D;    longOptIdx &#x3D; 0opt &#x3D; o  optarg &#x3D;    optind &#x3D; 4  argv[optind] &#x3D; --no           longOptIdx &#x3D; 1opt &#x3D; n  optarg &#x3D;opt &#x3D; r  optarg &#x3D; 1  optind &#x3D; 3  argv[optind] &#x3D; --optional     longOptIdx &#x3D; 0opt &#x3D; o  optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、<code>.\cmd.exe --required 1 --optional --no </code></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; r  optarg &#x3D; 1  optind &#x3D; 3  argv[optind] &#x3D; --optional     longOptIdx &#x3D; 0opt &#x3D; o  optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、<code>.\cmd.exe --required 1 --optional </code></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; r  optarg &#x3D; 1  optind &#x3D; 3  argv[optind] &#x3D; --optional     longOptIdx &#x3D; 0opt &#x3D; o  optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7、<code>.\cmd.exe  --optional=2 --no </code></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">opt &#x3D; o  optarg &#x3D; 2  optind &#x3D; 2  argv[optind] &#x3D; --no           longOptIdx &#x3D; 1opt &#x3D; n  optarg &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="除此之外混合长短命令也不行，尝试了多次后放弃了"><a href="#除此之外混合长短命令也不行，尝试了多次后放弃了" class="headerlink" title="除此之外混合长短命令也不行，尝试了多次后放弃了"></a>除此之外混合长短命令也不行，尝试了多次后放弃了</h5></li></ul></li></ul><h3 id="出坑"><a href="#出坑" class="headerlink" title="出坑"></a>出坑</h3><p>之前知道的方案有：</p><ul><li>自己写个简单的解析，不求通用，满足当前项目就行</li><li>开源项目<strong>CLPP</strong>，有点复杂，源码7000行，被劝退了</li><li>开源项目<strong>cmdline</strong>，相当简单，源码900行</li></ul><p>决定还是抽空重写 cmdline 吧，试用下先：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cmdline<span class="token double-colon punctuation">::</span>parser cmdPaeser<span class="token punctuation">;</span>cmdPaeser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token string">"host name"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmdPaeser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token string">"port number"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> cmdline<span class="token double-colon punctuation">::</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmdPaeser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token string">"protocol type"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">,</span> cmdline<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">oneof</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"https"</span><span class="token punctuation">,</span> <span class="token string">"ssh"</span><span class="token punctuation">,</span> <span class="token string">"ftp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmdPaeser<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"gzip"</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token string">"gzip when transfer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmdPaeser<span class="token punctuation">.</span><span class="token function">parse_check</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>left<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"type = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> cmdPaeser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span>          <span class="token operator">&lt;&lt;</span> <span class="token string">"host = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> cmdPaeser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span>          <span class="token operator">&lt;&lt;</span> <span class="token string">"port = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> cmdPaeser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span>          <span class="token operator">&lt;&lt;</span> <span class="token string">"gzip = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> cmdPaeser<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token string">"gzip"</span><span class="token punctuation">)</span>          <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、<code>.\cmd.exe -h 123 -p 88 -t ftp --gzip</code> 体验完美</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">type &#x3D; ftp  host &#x3D; 123  port &#x3D; 88   gzip &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、.\cmd.exe -p 88 -t ftp –gzip</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">need option: --host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、<code>.\cmd.exe --gzip --port 88 -h 123    </code></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">type &#x3D; http host &#x3D; 123  port &#x3D; 88   gzip &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="嗯嗯，确实不错"><a href="#嗯嗯，确实不错" class="headerlink" title="嗯嗯，确实不错"></a>嗯嗯，确实不错</h5><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>网上不怎么流行的东西说明大家已经替你试过了，大概率是不好用嘛</li><li>先确定基本功能好用再开始拓展集成，不能想当然觉得别人项目里用了这东西就肯定没问题</li><li>博客还是要当笔记来写，别做别记，做完再复盘太费时间了</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇测试文章</title>
      <link href="/article/test/"/>
      <url>/article/test/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一篇测试文章"><a href="#这是一篇测试文章" class="headerlink" title="这是一篇测试文章"></a>这是一篇测试文章</h1><p>我来看啊可能,我来看啊可能我来看啊可能我来看啊可能我</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
